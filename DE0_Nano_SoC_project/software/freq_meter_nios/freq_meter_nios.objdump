
freq_meter_nios.elf:     file format elf32-littlenios2
freq_meter_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00004028 memsz 0x00004028 flags r-x
    LOAD off    0x00005048 vaddr 0x00044048 paddr 0x0004542c align 2**12
         filesz 0x000013e4 memsz 0x000013e4 flags rw-
    LOAD off    0x00006810 vaddr 0x00046810 paddr 0x00046810 align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003cec  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  00043f30  00043f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013e4  00044048  0004542c  00005048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00046810  00046810  00006810  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00046944  00046944  0000642c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000738  00000000  00000000  00006450  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b3f4  00000000  00000000  00006b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b42  00000000  00000000  00011f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004081  00000000  00000000  00015abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000107c  00000000  00000000  00019b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002233  00000000  00000000  0001abbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002442  00000000  00000000  0001cdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001f234  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000408  00000000  00000000  0001f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002164a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002164d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021659  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002165a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002165b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002165f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021663  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00021667  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00021672  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0002167d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  00021688  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  0002169b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a9d  00000000  00000000  000216f5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00071c31  00000000  00000000  00027192  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00043f30 l    d  .rodata	00000000 .rodata
00044048 l    d  .rwdata	00000000 .rwdata
00046810 l    d  .bss	00000000 .bss
00046944 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../freq_meter_nios_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00040290 l     F .text	0000004c set_output
000402dc l     F .text	0000008c enable
00040368 l     F .text	00000094 read_busy
000403fc l     F .text	00000080 hd44780_write
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040eb8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00044114 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 vfprintf.c
000416c4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00041e7c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00042018 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00042160 l     F .text	00000038 alt_dev_reg
000441f4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00042448 l     F .text	0000020c altera_avalon_jtag_uart_irq
00042654 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00042dd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00042f3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00042f68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043360 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000434a0 l     F .text	00000050 alt_get_errno
000434f0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00046840 g     O .bss	00000004 alt_instruction_exception_handler
00041f68 g     F .text	0000006c alt_main
00046844 g     O .bss	00000100 alt_irq
0004542c g       *ABS*	00000000 __flash_rwdata_start
00040d50 g     F .text	0000004c printf
000414c0 g     F .text	0000001c vsprintf
000404c4 g     F .text	00000048 hd44780_home
00046814 g     O .bss	00000004 time_del
00041664 g     F .text	00000060 memmove
00046810 g     O .bss	00000004 n
00041fd4 g     F .text	00000044 alt_putstr
0004391c g     F .text	00000024 altera_nios2_gen2_irq_init
00041594 g     F .text	000000a8 __sfvwrite_small_str
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00046824 g     O .bss	00000004 errno
0004682c g     O .bss	00000004 alt_argv
0004d3fc g       *ABS*	00000000 _gp
00040888 g     F .text	000000fc hd44780_init
0004527c g     O .rwdata	00000180 alt_fd_list
0004050c g     F .text	00000090 hd44780_display
0004681c g     O .bss	00000004 sw123
00043940 g     F .text	00000090 alt_find_dev
0004163c g     F .text	00000028 memcpy
00043424 g     F .text	0000007c alt_io_redirect
00043c28 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00042854 g     F .text	0000021c altera_avalon_jtag_uart_read
00040d14 g     F .text	0000003c _printf_r
00040754 g     F .text	00000084 hd44780_print
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00041dc0 g     F .text	00000064 .hidden __udivsi3
00040ac8 g     F .text	000000d8 set_freq_base
00043b98 g     F .text	00000090 alt_icache_flush
00040984 g     F .text	00000144 freq_to_lcd
00040d10 g     F .text	00000004 itoa
00044048 g     O .rwdata	00000042 rus_code_mas
00045418 g     O .rwdata	00000004 alt_max_fd
00045400 g     O .rwdata	00000004 _global_impure_ptr
00046944 g       *ABS*	00000000 __bss_end
00043270 g     F .text	000000f0 alt_iic_isr_register
00043814 g     F .text	00000108 alt_tick
00043224 g     F .text	0000004c alt_ic_irq_enabled
00043778 g     F .text	0000009c alt_alarm_stop
00046834 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00045254 g     O .rwdata	00000028 alt_dev_null
0004047c g     F .text	00000048 hd44780_clear
00042ef4 g     F .text	00000048 alt_dcache_flush_all
00040eb4 g     F .text	00000004 utoa
0004542c g       *ABS*	00000000 __ram_rwdata_end
00045410 g     O .rwdata	00000008 alt_dev_list
00042068 g     F .text	000000f8 write
000453fc g     O .rwdata	00000004 freq_base
00044048 g       *ABS*	00000000 __ram_rodata_end
00041e24 g     F .text	00000058 .hidden __umodsi3
00046944 g       *ABS*	00000000 end
00040ca8 g     F .text	00000068 __itoa
00042380 g     F .text	000000c8 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00070d40 g       *ABS*	00000000 __alt_stack_pointer
00042a70 g     F .text	00000224 altera_avalon_jtag_uart_write
00040f24 g     F .text	00000524 ___vfprintf_internal_r
00043d6c g     F .text	00000190 __call_exitprocs
00040244 g     F .text	0000004c _start
0004063c g     F .text	000000cc hd44780_cgram
00046838 g     O .bss	00000004 _alt_tick_rate
0004408c g     O .rwdata	00000085 rus_letter_mas
0004683c g     O .bss	00000004 _alt_nticks
000421d0 g     F .text	0000004c alt_sys_init
00040ba0 g     F .text	000000c4 set_time_del
000426fc g     F .text	00000068 altera_avalon_jtag_uart_close
00044048 g       *ABS*	00000000 __ram_rwdata_start
00043f30 g       *ABS*	00000000 __ram_rodata_start
0004221c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00043ae4 g     F .text	000000b4 alt_get_fd
00043d3c g     F .text	00000030 memcmp
000422dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00046944 g       *ABS*	00000000 __alt_stack_base
0004232c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000439d0 g     F .text	00000114 alt_find_file
00042fb8 g     F .text	000000a4 alt_dev_llist_insert
00041730 g     F .text	00000524 ___svfprintf_internal_r
00040db8 g     F .text	000000fc __utoa
000414dc g     F .text	000000b8 __sfvwrite_small_dev
00046810 g       *ABS*	00000000 __bss_start
00040708 g     F .text	0000004c hd44780_put
00040c64 g     F .text	00000044 main
00046830 g     O .bss	00000004 alt_envp
0004227c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004541c g     O .rwdata	00000004 alt_errno
00041cc8 g     F .text	00000084 .hidden __divsi3
00043f30 g       *ABS*	00000000 __flash_rodata_start
00042198 g     F .text	00000038 alt_irq_init
00043714 g     F .text	00000064 alt_release_fd
00041c70 g     F .text	00000058 _write_r
00041464 g     F .text	0000005c _vsprintf_r
00046818 g     O .bss	00000004 len_znach
00045404 g     O .rwdata	00000004 _impure_ptr
00046828 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00045408 g     O .rwdata	00000008 alt_fs_list
00041c54 g     F .text	0000001c __vfprintf_internal_unused
00040020 g       *ABS*	00000000 __ram_exceptions_start
000407d8 g     F .text	000000b0 hd44780_printf
00043090 g     F .text	00000050 alt_ic_isr_register
0004542c g       *ABS*	00000000 _edata
00046944 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
00042764 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00043180 g     F .text	000000a4 alt_ic_irq_disable
00043cc4 g     F .text	00000020 exit
00041d4c g     F .text	00000074 .hidden __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00043efc g     F .text	00000034 _exit
00042c94 g     F .text	00000140 alt_alarm_start
00040d9c g     F .text	0000001c strlen
000435bc g     F .text	00000158 open
0004059c g     F .text	000000a0 hd44780_position
0004305c g     F .text	00000034 alt_icache_flush_all
00043ce4 g     F .text	00000058 fputs
00045420 g     O .rwdata	00000004 alt_priority_mask
000430e0 g     F .text	000000a0 alt_ic_irq_enable
00041448 g     F .text	0000001c __vfprintf_internal
00045424 g     O .rwdata	00000008 alt_alarm_list
00042e24 g     F .text	000000d0 close
00041ee4 g     F .text	00000084 alt_load
00046820 g     O .bss	00000004 sw0



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffcf2c4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	109a1104 	addi	r2,r2,26692
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	109a1104 	addi	r2,r2,26692
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffcf3ec>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffcf3e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a51117 	ldw	r2,-27580(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a51117 	ldw	r2,-27580(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffcf508>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   4025c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40260:	d6b4ff14 	ori	gp,gp,54268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40268:	109a0414 	ori	r2,r2,26640

    movhi r3, %hi(__bss_end)
   4026c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40270:	18da5114 	ori	r3,r3,26948

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffcf538>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	0041ee40 	call	41ee4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	0041f680 	call	41f68 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffcf54c>

00040290 <set_output>:
char rus_letter_mas[] = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
//char rus_letter_mas[] = {'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е','ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'};
//char rus_letter_mas[] = {"А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я", "а", "б", "в", "г", "д", "е","ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"};

static void set_output(const bool output)
{
   40290:	defffe04 	addi	sp,sp,-8
   40294:	df000115 	stw	fp,4(sp)
   40298:	df000104 	addi	fp,sp,4
   4029c:	e13fff15 	stw	r4,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD_DATA_BASE, 0);
   402a0:	0007883a 	mov	r3,zero
   402a4:	00800234 	movhi	r2,8
   402a8:	10841904 	addi	r2,r2,4196
   402ac:	10c00035 	stwio	r3,0(r2)
	if (output)
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10000426 	beq	r2,zero,402c8 <set_output+0x38>
		IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD_DATA_BASE, 0xFF);
   402b8:	00c03fc4 	movi	r3,255
   402bc:	00800234 	movhi	r2,8
   402c0:	10841904 	addi	r2,r2,4196
   402c4:	10c00035 	stwio	r3,0(r2)
}
   402c8:	0001883a 	nop
   402cc:	e037883a 	mov	sp,fp
   402d0:	df000017 	ldw	fp,0(sp)
   402d4:	dec00104 	addi	sp,sp,4
   402d8:	f800283a 	ret

000402dc <enable>:

static void enable(const bool pulse)
{
   402dc:	defffc04 	addi	sp,sp,-16
   402e0:	df000315 	stw	fp,12(sp)
   402e4:	df000304 	addi	fp,sp,12
   402e8:	e13fff15 	stw	r4,-4(fp)
	if (pulse)
   402ec:	e0bfff17 	ldw	r2,-4(fp)
   402f0:	10000c26 	beq	r2,zero,40324 <enable+0x48>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_E_BASE, 0x01);
   402f4:	00c00044 	movi	r3,1
   402f8:	00800234 	movhi	r2,8
   402fc:	10840c04 	addi	r2,r2,4144
   40300:	10c00035 	stwio	r3,0(r2)
		for(int i = 0; i < 5000; i++);
   40304:	e03ffd15 	stw	zero,-12(fp)
   40308:	00000306 	br	40318 <enable+0x3c>
   4030c:	e0bffd17 	ldw	r2,-12(fp)
   40310:	10800044 	addi	r2,r2,1
   40314:	e0bffd15 	stw	r2,-12(fp)
   40318:	e0bffd17 	ldw	r2,-12(fp)
   4031c:	1084e210 	cmplti	r2,r2,5000
   40320:	103ffa1e 	bne	r2,zero,4030c <__alt_data_end+0xfffcf5cc>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_E_BASE, 0);
   40324:	0007883a 	mov	r3,zero
   40328:	00800234 	movhi	r2,8
   4032c:	10840c04 	addi	r2,r2,4144
   40330:	10c00035 	stwio	r3,0(r2)
	for(int i = 0; i < 5000; i++);
   40334:	e03ffe15 	stw	zero,-8(fp)
   40338:	00000306 	br	40348 <enable+0x6c>
   4033c:	e0bffe17 	ldw	r2,-8(fp)
   40340:	10800044 	addi	r2,r2,1
   40344:	e0bffe15 	stw	r2,-8(fp)
   40348:	e0bffe17 	ldw	r2,-8(fp)
   4034c:	1084e210 	cmplti	r2,r2,5000
   40350:	103ffa1e 	bne	r2,zero,4033c <__alt_data_end+0xfffcf5fc>
}
   40354:	0001883a 	nop
   40358:	e037883a 	mov	sp,fp
   4035c:	df000017 	ldw	fp,0(sp)
   40360:	dec00104 	addi	sp,sp,4
   40364:	f800283a 	ret

00040368 <read_busy>:

static bool read_busy(void)
{
   40368:	defffd04 	addi	sp,sp,-12
   4036c:	dfc00215 	stw	ra,8(sp)
   40370:	df000115 	stw	fp,4(sp)
   40374:	df000104 	addi	fp,sp,4
	alt_u8 data;

	set_output(FALSE);
   40378:	0009883a 	mov	r4,zero
   4037c:	00402900 	call	40290 <set_output>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
   40380:	0007883a 	mov	r3,zero
   40384:	00800234 	movhi	r2,8
   40388:	10841404 	addi	r2,r2,4176
   4038c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0x01);
   40390:	00c00044 	movi	r3,1
   40394:	00800234 	movhi	r2,8
   40398:	10841004 	addi	r2,r2,4160
   4039c:	10c00035 	stwio	r3,0(r2)
	enable(FALSE);
   403a0:	0009883a 	mov	r4,zero
   403a4:	00402dc0 	call	402dc <enable>
	data = IORD_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE);
   403a8:	00800234 	movhi	r2,8
   403ac:	10841804 	addi	r2,r2,4192
   403b0:	10800037 	ldwio	r2,0(r2)
   403b4:	e0bfff05 	stb	r2,-4(fp)
	enable(FALSE);
   403b8:	0009883a 	mov	r4,zero
   403bc:	00402dc0 	call	402dc <enable>
	enable(TRUE);
   403c0:	01000044 	movi	r4,1
   403c4:	00402dc0 	call	402dc <enable>

	if (data >> 7 == 1)
   403c8:	e0bfff03 	ldbu	r2,-4(fp)
   403cc:	1004d1fa 	srli	r2,r2,7
   403d0:	10803fcc 	andi	r2,r2,255
   403d4:	10800058 	cmpnei	r2,r2,1
   403d8:	1000021e 	bne	r2,zero,403e4 <read_busy+0x7c>
		return (TRUE);
   403dc:	00800044 	movi	r2,1
   403e0:	00000106 	br	403e8 <read_busy+0x80>

	return (FALSE);
   403e4:	0005883a 	mov	r2,zero

}
   403e8:	e037883a 	mov	sp,fp
   403ec:	dfc00117 	ldw	ra,4(sp)
   403f0:	df000017 	ldw	fp,0(sp)
   403f4:	dec00204 	addi	sp,sp,8
   403f8:	f800283a 	ret

000403fc <hd44780_write>:

static void hd44780_write(const alt_u8 data, const bool reg)
{
   403fc:	defffc04 	addi	sp,sp,-16
   40400:	dfc00315 	stw	ra,12(sp)
   40404:	df000215 	stw	fp,8(sp)
   40408:	df000204 	addi	fp,sp,8
   4040c:	2005883a 	mov	r2,r4
   40410:	e17fff15 	stw	r5,-4(fp)
   40414:	e0bffe05 	stb	r2,-8(fp)
	set_output(TRUE);
   40418:	01000044 	movi	r4,1
   4041c:	00402900 	call	40290 <set_output>
	//alt_putstr("set_output TRUE\n");
	
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0);
   40420:	0007883a 	mov	r3,zero
   40424:	00800234 	movhi	r2,8
   40428:	10841004 	addi	r2,r2,4160
   4042c:	10c00035 	stwio	r3,0(r2)
	//alt_putstr("RW 0\n");
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, reg);
   40430:	00800234 	movhi	r2,8
   40434:	10841404 	addi	r2,r2,4176
   40438:	e0ffff17 	ldw	r3,-4(fp)
   4043c:	10c00035 	stwio	r3,0(r2)
	//alt_putstr("RS installed\n");
	
	if (MODE_8_OR_4 == 8) IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data);
   40440:	e0fffe03 	ldbu	r3,-8(fp)
   40444:	00800234 	movhi	r2,8
   40448:	10841804 	addi	r2,r2,4192
   4044c:	10c00035 	stwio	r3,0(r2)
	else IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data << 4);
	//alt_putstr("data installed\n");
	//printf("%x\n", data);
	
	enable(TRUE);
   40450:	01000044 	movi	r4,1
   40454:	00402dc0 	call	402dc <enable>
	//alt_putstr("enable\n");
	while(!read_busy());
   40458:	0001883a 	nop
   4045c:	00403680 	call	40368 <read_busy>
   40460:	103ffe26 	beq	r2,zero,4045c <__alt_data_end+0xfffcf71c>
}
   40464:	0001883a 	nop
   40468:	e037883a 	mov	sp,fp
   4046c:	dfc00117 	ldw	ra,4(sp)
   40470:	df000017 	ldw	fp,0(sp)
   40474:	dec00204 	addi	sp,sp,8
   40478:	f800283a 	ret

0004047c <hd44780_clear>:

/**
 * Clear the LCD
 */
void hd44780_clear()
{
   4047c:	defffc04 	addi	sp,sp,-16
   40480:	dfc00315 	stw	ra,12(sp)
   40484:	df000215 	stw	fp,8(sp)
   40488:	df000204 	addi	fp,sp,8
	int data = 0x01;
   4048c:	00800044 	movi	r2,1
   40490:	e0bffe15 	stw	r2,-8(fp)
	int rs = 0;
   40494:	e03fff15 	stw	zero,-4(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(data, rs);
   40498:	e0bffe17 	ldw	r2,-8(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	e17fff17 	ldw	r5,-4(fp)
   404a4:	1009883a 	mov	r4,r2
   404a8:	00403fc0 	call	403fc <hd44780_write>
}
   404ac:	0001883a 	nop
   404b0:	e037883a 	mov	sp,fp
   404b4:	dfc00117 	ldw	ra,4(sp)
   404b8:	df000017 	ldw	fp,0(sp)
   404bc:	dec00204 	addi	sp,sp,8
   404c0:	f800283a 	ret

000404c4 <hd44780_home>:

/**
 * Move cursor home
 */
void hd44780_home()
{
   404c4:	defffc04 	addi	sp,sp,-16
   404c8:	dfc00315 	stw	ra,12(sp)
   404cc:	df000215 	stw	fp,8(sp)
   404d0:	df000204 	addi	fp,sp,8
	int data = 0x02;
   404d4:	00800084 	movi	r2,2
   404d8:	e0bffe15 	stw	r2,-8(fp)
	int rs = 0;
   404dc:	e03fff15 	stw	zero,-4(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(data, rs);
   404e0:	e0bffe17 	ldw	r2,-8(fp)
   404e4:	10803fcc 	andi	r2,r2,255
   404e8:	e17fff17 	ldw	r5,-4(fp)
   404ec:	1009883a 	mov	r4,r2
   404f0:	00403fc0 	call	403fc <hd44780_write>
}
   404f4:	0001883a 	nop
   404f8:	e037883a 	mov	sp,fp
   404fc:	dfc00117 	ldw	ra,4(sp)
   40500:	df000017 	ldw	fp,0(sp)
   40504:	dec00204 	addi	sp,sp,8
   40508:	f800283a 	ret

0004050c <hd44780_display>:
 * @param cursor	Cursor on/off
 * @param blink		Blinking cursor on/off
 *
 */
void hd44780_display(const bool enable, const bool cursor, const bool blink)
{
   4050c:	defff904 	addi	sp,sp,-28
   40510:	dfc00615 	stw	ra,24(sp)
   40514:	df000515 	stw	fp,20(sp)
   40518:	df000504 	addi	fp,sp,20
   4051c:	e13ffd15 	stw	r4,-12(fp)
   40520:	e17ffe15 	stw	r5,-8(fp)
   40524:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 command = HD44780_DISPLAY;
   40528:	00800204 	movi	r2,8
   4052c:	e0bffb0d 	sth	r2,-20(fp)

	if (enable)
   40530:	e0bffd17 	ldw	r2,-12(fp)
   40534:	10000326 	beq	r2,zero,40544 <hd44780_display+0x38>
		command |= HD44780_DISPLAY_ON;
   40538:	e0bffb0b 	ldhu	r2,-20(fp)
   4053c:	10800114 	ori	r2,r2,4
   40540:	e0bffb0d 	sth	r2,-20(fp)
	if (cursor)
   40544:	e0bffe17 	ldw	r2,-8(fp)
   40548:	10000326 	beq	r2,zero,40558 <hd44780_display+0x4c>
		command |= HD44780_CURSOR_ON;
   4054c:	e0bffb0b 	ldhu	r2,-20(fp)
   40550:	10800094 	ori	r2,r2,2
   40554:	e0bffb0d 	sth	r2,-20(fp)
	if (blink)
   40558:	e0bfff17 	ldw	r2,-4(fp)
   4055c:	10000326 	beq	r2,zero,4056c <hd44780_display+0x60>
		command |= HD44780_BLINK_ON;
   40560:	e0bffb0b 	ldhu	r2,-20(fp)
   40564:	10800054 	ori	r2,r2,1
   40568:	e0bffb0d 	sth	r2,-20(fp)

	int rs = 0;
   4056c:	e03ffc15 	stw	zero,-16(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(command, rs);
   40570:	e0bffb0b 	ldhu	r2,-20(fp)
   40574:	10803fcc 	andi	r2,r2,255
   40578:	e17ffc17 	ldw	r5,-16(fp)
   4057c:	1009883a 	mov	r4,r2
   40580:	00403fc0 	call	403fc <hd44780_write>
}
   40584:	0001883a 	nop
   40588:	e037883a 	mov	sp,fp
   4058c:	dfc00117 	ldw	ra,4(sp)
   40590:	df000017 	ldw	fp,0(sp)
   40594:	dec00204 	addi	sp,sp,8
   40598:	f800283a 	ret

0004059c <hd44780_position>:
 *
 * @param row	Row
 * @param col	Column
 */
void hd44780_position(const alt_u8 row, const alt_u8 col)
{
   4059c:	defff904 	addi	sp,sp,-28
   405a0:	dfc00615 	stw	ra,24(sp)
   405a4:	df000515 	stw	fp,20(sp)
   405a8:	df000504 	addi	fp,sp,20
   405ac:	2007883a 	mov	r3,r4
   405b0:	2805883a 	mov	r2,r5
   405b4:	e0fffe05 	stb	r3,-8(fp)
   405b8:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 command = HD44780_DGRAM;
   405bc:	00802004 	movi	r2,128
   405c0:	e0bffb0d 	sth	r2,-20(fp)
	const alt_u8 offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   405c4:	e03ffd05 	stb	zero,-12(fp)
   405c8:	00801004 	movi	r2,64
   405cc:	e0bffd45 	stb	r2,-11(fp)
   405d0:	00800504 	movi	r2,20
   405d4:	e0bffd85 	stb	r2,-10(fp)
   405d8:	00801504 	movi	r2,84
   405dc:	e0bffdc5 	stb	r2,-9(fp)

	command |= col + offsets[row];
   405e0:	e0ffff03 	ldbu	r3,-4(fp)
   405e4:	e0bffe03 	ldbu	r2,-8(fp)
   405e8:	e13ffd04 	addi	r4,fp,-12
   405ec:	2085883a 	add	r2,r4,r2
   405f0:	10800003 	ldbu	r2,0(r2)
   405f4:	10803fcc 	andi	r2,r2,255
   405f8:	1885883a 	add	r2,r3,r2
   405fc:	1007883a 	mov	r3,r2
   40600:	e0bffb0b 	ldhu	r2,-20(fp)
   40604:	1884b03a 	or	r2,r3,r2
   40608:	e0bffb0d 	sth	r2,-20(fp)
	int rs = 0;
   4060c:	e03ffc15 	stw	zero,-16(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(command, rs);
   40610:	e0bffb0b 	ldhu	r2,-20(fp)
   40614:	10803fcc 	andi	r2,r2,255
   40618:	e17ffc17 	ldw	r5,-16(fp)
   4061c:	1009883a 	mov	r4,r2
   40620:	00403fc0 	call	403fc <hd44780_write>
}
   40624:	0001883a 	nop
   40628:	e037883a 	mov	sp,fp
   4062c:	dfc00117 	ldw	ra,4(sp)
   40630:	df000017 	ldw	fp,0(sp)
   40634:	dec00204 	addi	sp,sp,8
   40638:	f800283a 	ret

0004063c <hd44780_cgram>:
 *
 * @param pos	UDG number
 * @param udg	UDG definition
 */
void hd44780_cgram(const alt_u8 pos, const char udg[8])
{
   4063c:	defffa04 	addi	sp,sp,-24
   40640:	dfc00515 	stw	ra,20(sp)
   40644:	df000415 	stw	fp,16(sp)
   40648:	df000404 	addi	fp,sp,16
   4064c:	2005883a 	mov	r2,r4
   40650:	e17fff15 	stw	r5,-4(fp)
   40654:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 i;
	alt_u16 command = HD44780_CGRAM;
   40658:	00801004 	movi	r2,64
   4065c:	e0bffc8d 	sth	r2,-14(fp)

	if (pos < 8) alt_putstr("pos cgram failed");
   40660:	e0bffe03 	ldbu	r2,-8(fp)
   40664:	10800228 	cmpgeui	r2,r2,8
   40668:	1000031e 	bne	r2,zero,40678 <hd44780_cgram+0x3c>
   4066c:	01000134 	movhi	r4,4
   40670:	210fcc04 	addi	r4,r4,16176
   40674:	0041fd40 	call	41fd4 <alt_putstr>

	command |= pos * 8;
   40678:	e0bffe03 	ldbu	r2,-8(fp)
   4067c:	100490fa 	slli	r2,r2,3
   40680:	1007883a 	mov	r3,r2
   40684:	e0bffc8b 	ldhu	r2,-14(fp)
   40688:	1884b03a 	or	r2,r3,r2
   4068c:	e0bffc8d 	sth	r2,-14(fp)

	int rs = 0;
   40690:	e03ffd15 	stw	zero,-12(fp)
	/*if( xSemaphoreTake( Mutex_write_lcd, portMAX_DELAY ) == pdTRUE )
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(command, rs);
   40694:	e0bffc8b 	ldhu	r2,-14(fp)
   40698:	10803fcc 	andi	r2,r2,255
   4069c:	e17ffd17 	ldw	r5,-12(fp)
   406a0:	1009883a 	mov	r4,r2
   406a4:	00403fc0 	call	403fc <hd44780_write>
		rs = 1;
   406a8:	00800044 	movi	r2,1
   406ac:	e0bffd15 	stw	r2,-12(fp)
		for (i = 0; i < 8; i++)
   406b0:	e03ffc05 	stb	zero,-16(fp)
   406b4:	00000b06 	br	406e4 <hd44780_cgram+0xa8>
		{
				/*xQueueSendToBack(Queue_lcd_data, &udg[i], portMAX_DELAY);
				xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
				hd44780_write(udg[i], rs);
   406b8:	e0bffc03 	ldbu	r2,-16(fp)
   406bc:	e0ffff17 	ldw	r3,-4(fp)
   406c0:	1885883a 	add	r2,r3,r2
   406c4:	10800003 	ldbu	r2,0(r2)
   406c8:	10803fcc 	andi	r2,r2,255
   406cc:	e17ffd17 	ldw	r5,-12(fp)
   406d0:	1009883a 	mov	r4,r2
   406d4:	00403fc0 	call	403fc <hd44780_write>
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(command, rs);
		rs = 1;
		for (i = 0; i < 8; i++)
   406d8:	e0bffc03 	ldbu	r2,-16(fp)
   406dc:	10800044 	addi	r2,r2,1
   406e0:	e0bffc05 	stb	r2,-16(fp)
   406e4:	e0bffc03 	ldbu	r2,-16(fp)
   406e8:	10800230 	cmpltui	r2,r2,8
   406ec:	103ff21e 	bne	r2,zero,406b8 <__alt_data_end+0xfffcf978>
				xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
				hd44780_write(udg[i], rs);
		}
		/*xSemaphoreGive( Mutex_write_lcd );
	}*/
}
   406f0:	0001883a 	nop
   406f4:	e037883a 	mov	sp,fp
   406f8:	dfc00117 	ldw	ra,4(sp)
   406fc:	df000017 	ldw	fp,0(sp)
   40700:	dec00204 	addi	sp,sp,8
   40704:	f800283a 	ret

00040708 <hd44780_put>:
 * Send a single character to the LCD
 *
 * @param chr	Character to send
 */
void hd44780_put(const char chr)
{
   40708:	defffc04 	addi	sp,sp,-16
   4070c:	dfc00315 	stw	ra,12(sp)
   40710:	df000215 	stw	fp,8(sp)
   40714:	df000204 	addi	fp,sp,8
   40718:	2005883a 	mov	r2,r4
   4071c:	e0bfff05 	stb	r2,-4(fp)
	int rs = 1;
   40720:	00800044 	movi	r2,1
   40724:	e0bffe15 	stw	r2,-8(fp)
			xQueueSendToBack(Queue_lcd_data, &chr, portMAX_DELAY);
			xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
			xSemaphoreGive( Mutex_write_lcd );
	
	}*/
	hd44780_write(chr, rs);
   40728:	e0bfff03 	ldbu	r2,-4(fp)
   4072c:	10803fcc 	andi	r2,r2,255
   40730:	e17ffe17 	ldw	r5,-8(fp)
   40734:	1009883a 	mov	r4,r2
   40738:	00403fc0 	call	403fc <hd44780_write>
}
   4073c:	0001883a 	nop
   40740:	e037883a 	mov	sp,fp
   40744:	dfc00117 	ldw	ra,4(sp)
   40748:	df000017 	ldw	fp,0(sp)
   4074c:	dec00204 	addi	sp,sp,8
   40750:	f800283a 	ret

00040754 <hd44780_print>:
 * Send a string to the LCD
 *
 * @param string	String to send
 */
void hd44780_print(const char* string)
{
   40754:	defffa04 	addi	sp,sp,-24
   40758:	dfc00515 	stw	ra,20(sp)
   4075c:	df000415 	stw	fp,16(sp)
   40760:	dc000315 	stw	r16,12(sp)
   40764:	df000404 	addi	fp,sp,16
   40768:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 i = 0;
   4076c:	e03ffc05 	stb	zero,-16(fp)
	int rs = 1;
   40770:	00800044 	movi	r2,1
   40774:	e0bffd15 	stw	r2,-12(fp)
	
	for(; i < strlen(string); i++)
   40778:	00000c06 	br	407ac <hd44780_print+0x58>
	{
		hd44780_put(string[i]);
   4077c:	e0bffc03 	ldbu	r2,-16(fp)
   40780:	e0fffe17 	ldw	r3,-8(fp)
   40784:	1885883a 	add	r2,r3,r2
   40788:	10800003 	ldbu	r2,0(r2)
   4078c:	10803fcc 	andi	r2,r2,255
   40790:	1080201c 	xori	r2,r2,128
   40794:	10bfe004 	addi	r2,r2,-128
   40798:	1009883a 	mov	r4,r2
   4079c:	00407080 	call	40708 <hd44780_put>
void hd44780_print(const char* string)
{
	alt_u8 i = 0;
	int rs = 1;
	
	for(; i < strlen(string); i++)
   407a0:	e0bffc03 	ldbu	r2,-16(fp)
   407a4:	10800044 	addi	r2,r2,1
   407a8:	e0bffc05 	stb	r2,-16(fp)
   407ac:	e43ffc03 	ldbu	r16,-16(fp)
   407b0:	e13ffe17 	ldw	r4,-8(fp)
   407b4:	0040d9c0 	call	40d9c <strlen>
   407b8:	80bff036 	bltu	r16,r2,4077c <__alt_data_end+0xfffcfa3c>
	{
		hd44780_put(string[i]);
	}
}
   407bc:	0001883a 	nop
   407c0:	e6ffff04 	addi	sp,fp,-4
   407c4:	dfc00217 	ldw	ra,8(sp)
   407c8:	df000117 	ldw	fp,4(sp)
   407cc:	dc000017 	ldw	r16,0(sp)
   407d0:	dec00304 	addi	sp,sp,12
   407d4:	f800283a 	ret

000407d8 <hd44780_printf>:
 *
 * @param fmt	String format
 * @param ...	Variable arguments (see printf())
 */
void hd44780_printf(const char *fmt, ...)
{
   407d8:	deffee04 	addi	sp,sp,-72
   407dc:	dfc00e15 	stw	ra,56(sp)
   407e0:	df000d15 	stw	fp,52(sp)
   407e4:	df000d04 	addi	fp,sp,52
   407e8:	e13fff15 	stw	r4,-4(fp)
   407ec:	e1400215 	stw	r5,8(fp)
   407f0:	e1800315 	stw	r6,12(fp)
   407f4:	e1c00415 	stw	r7,16(fp)
	alt_u16 i;
	alt_u16 size;
	alt_u8 character;
	char buffer[32];
	va_list args;
	int rs = 1;
   407f8:	00800044 	movi	r2,1
   407fc:	e0bff415 	stw	r2,-48(fp)

	va_start(args, fmt);
   40800:	e0800204 	addi	r2,fp,8
   40804:	e0bffe15 	stw	r2,-8(fp)
	size = vsprintf(buffer, fmt, args);
   40808:	e0fffe17 	ldw	r3,-8(fp)
   4080c:	e0bff5c4 	addi	r2,fp,-41
   40810:	180d883a 	mov	r6,r3
   40814:	e17fff17 	ldw	r5,-4(fp)
   40818:	1009883a 	mov	r4,r2
   4081c:	00414c00 	call	414c0 <vsprintf>
   40820:	e0bff50d 	sth	r2,-44(fp)
	for (i = 0; i < size; i++)
   40824:	e03ff30d 	sth	zero,-52(fp)
   40828:	00000e06 	br	40864 <hd44780_printf+0x8c>
	{
		character = buffer[i];
   4082c:	e0bff30b 	ldhu	r2,-52(fp)
   40830:	e0fff5c4 	addi	r3,fp,-41
   40834:	1885883a 	add	r2,r3,r2
   40838:	10800003 	ldbu	r2,0(r2)
   4083c:	e0bff585 	stb	r2,-42(fp)
		hd44780_put(character);
   40840:	e0bff583 	ldbu	r2,-42(fp)
   40844:	10803fcc 	andi	r2,r2,255
   40848:	1080201c 	xori	r2,r2,128
   4084c:	10bfe004 	addi	r2,r2,-128
   40850:	1009883a 	mov	r4,r2
   40854:	00407080 	call	40708 <hd44780_put>
	va_list args;
	int rs = 1;

	va_start(args, fmt);
	size = vsprintf(buffer, fmt, args);
	for (i = 0; i < size; i++)
   40858:	e0bff30b 	ldhu	r2,-52(fp)
   4085c:	10800044 	addi	r2,r2,1
   40860:	e0bff30d 	sth	r2,-52(fp)
   40864:	e0fff30b 	ldhu	r3,-52(fp)
   40868:	e0bff50b 	ldhu	r2,-44(fp)
   4086c:	18bfef36 	bltu	r3,r2,4082c <__alt_data_end+0xfffcfaec>
	{
		character = buffer[i];
		hd44780_put(character);
	}
}
   40870:	0001883a 	nop
   40874:	e037883a 	mov	sp,fp
   40878:	dfc00117 	ldw	ra,4(sp)
   4087c:	df000017 	ldw	fp,0(sp)
   40880:	dec00504 	addi	sp,sp,20
   40884:	f800283a 	ret

00040888 <hd44780_init>:

/**
 * Initialise the LCD
 */
void hd44780_init()
{
   40888:	defffb04 	addi	sp,sp,-20
   4088c:	dfc00415 	stw	ra,16(sp)
   40890:	df000315 	stw	fp,12(sp)
   40894:	df000304 	addi	fp,sp,12
	int data, rs = 0;
   40898:	e03ffe15 	stw	zero,-8(fp)
	alt_putstr("initialisation start\n");
   4089c:	01000134 	movhi	r4,4
   408a0:	210fd104 	addi	r4,r4,16196
   408a4:	0041fd40 	call	41fd4 <alt_putstr>
	//function set
	/*if( xSemaphoreTake( Mutex_write_lcd, portMAX_DELAY ) == pdTRUE )
	{*/
		//vTaskDelay(35*10);
		for(int i = 0; i < 5000000; i++);
   408a8:	e03ffd15 	stw	zero,-12(fp)
   408ac:	00000306 	br	408bc <hd44780_init+0x34>
   408b0:	e0bffd17 	ldw	r2,-12(fp)
   408b4:	10800044 	addi	r2,r2,1
   408b8:	e0bffd15 	stw	r2,-12(fp)
   408bc:	e0fffd17 	ldw	r3,-12(fp)
   408c0:	00801334 	movhi	r2,76
   408c4:	1092cfc4 	addi	r2,r2,19263
   408c8:	10fff90e 	bge	r2,r3,408b0 <__alt_data_end+0xfffcfb70>
		data = 0x3C;
   408cc:	00800f04 	movi	r2,60
   408d0:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   408d4:	e0bfff17 	ldw	r2,-4(fp)
   408d8:	10803fcc 	andi	r2,r2,255
   408dc:	e17ffe17 	ldw	r5,-8(fp)
   408e0:	1009883a 	mov	r4,r2
   408e4:	00403fc0 	call	403fc <hd44780_write>
		alt_putstr("initialisation function\n");
   408e8:	01000134 	movhi	r4,4
   408ec:	210fd704 	addi	r4,r4,16220
   408f0:	0041fd40 	call	41fd4 <alt_putstr>
		//display and cursor control
		data = 0x0C;
   408f4:	00800304 	movi	r2,12
   408f8:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   408fc:	e0bfff17 	ldw	r2,-4(fp)
   40900:	10803fcc 	andi	r2,r2,255
   40904:	e17ffe17 	ldw	r5,-8(fp)
   40908:	1009883a 	mov	r4,r2
   4090c:	00403fc0 	call	403fc <hd44780_write>
		alt_putstr("initialisation display\n");
   40910:	01000134 	movhi	r4,4
   40914:	210fde04 	addi	r4,r4,16248
   40918:	0041fd40 	call	41fd4 <alt_putstr>
		//display clear
		data = 0x01;
   4091c:	00800044 	movi	r2,1
   40920:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   40924:	e0bfff17 	ldw	r2,-4(fp)
   40928:	10803fcc 	andi	r2,r2,255
   4092c:	e17ffe17 	ldw	r5,-8(fp)
   40930:	1009883a 	mov	r4,r2
   40934:	00403fc0 	call	403fc <hd44780_write>
		alt_putstr("clear display\n");
   40938:	01000134 	movhi	r4,4
   4093c:	210fe404 	addi	r4,r4,16272
   40940:	0041fd40 	call	41fd4 <alt_putstr>
		//entry mode set
		data = 0x06;
   40944:	00800184 	movi	r2,6
   40948:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   4094c:	e0bfff17 	ldw	r2,-4(fp)
   40950:	10803fcc 	andi	r2,r2,255
   40954:	e17ffe17 	ldw	r5,-8(fp)
   40958:	1009883a 	mov	r4,r2
   4095c:	00403fc0 	call	403fc <hd44780_write>
		/*xSemaphoreGive( Mutex_write_lcd );
	}*/
	alt_putstr("initialisation finished\n");
   40960:	01000134 	movhi	r4,4
   40964:	210fe804 	addi	r4,r4,16288
   40968:	0041fd40 	call	41fd4 <alt_putstr>
	/* hd44780_clear();
	hd44780_home(); */
}
   4096c:	0001883a 	nop
   40970:	e037883a 	mov	sp,fp
   40974:	dfc00117 	ldw	ra,4(sp)
   40978:	df000017 	ldw	fp,0(sp)
   4097c:	dec00204 	addi	sp,sp,8
   40980:	f800283a 	ret

00040984 <freq_to_lcd>:
#include "alt_types.h"

int n = 0, freq_base = 400000000, time_del = 0, sw0, sw123, len_znach = 0;

void freq_to_lcd()
{
   40984:	defff604 	addi	sp,sp,-40
   40988:	dfc00915 	stw	ra,36(sp)
   4098c:	df000815 	stw	fp,32(sp)
   40990:	df000804 	addi	fp,sp,32
	int write_en = 0;
   40994:	e03ff815 	stw	zero,-32(fp)
	char zagolovok [] = {0xAB,0x61,0x63,0xBF,0x6F,0xBF,0x61}, znachenie [20];
   40998:	00bfeac4 	movi	r2,-85
   4099c:	e0bff905 	stb	r2,-28(fp)
   409a0:	00801844 	movi	r2,97
   409a4:	e0bff945 	stb	r2,-27(fp)
   409a8:	008018c4 	movi	r2,99
   409ac:	e0bff985 	stb	r2,-26(fp)
   409b0:	00bfefc4 	movi	r2,-65
   409b4:	e0bff9c5 	stb	r2,-25(fp)
   409b8:	00801bc4 	movi	r2,111
   409bc:	e0bffa05 	stb	r2,-24(fp)
   409c0:	00bfefc4 	movi	r2,-65
   409c4:	e0bffa45 	stb	r2,-23(fp)
   409c8:	00801844 	movi	r2,97
   409cc:	e0bffa85 	stb	r2,-22(fp)
	if(IORD_ALTERA_AVALON_PIO_DATA(FREQ_EN_BASE))
   409d0:	00800234 	movhi	r2,8
   409d4:	10840804 	addi	r2,r2,4128
   409d8:	10800037 	ldwio	r2,0(r2)
   409dc:	10003326 	beq	r2,zero,40aac <freq_to_lcd+0x128>
	{
		write_en++;
   409e0:	e0bff817 	ldw	r2,-32(fp)
   409e4:	10800044 	addi	r2,r2,1
   409e8:	e0bff815 	stw	r2,-32(fp)
		//printf("frequency enable\n");
		if (write_en == 1)
   409ec:	e0bff817 	ldw	r2,-32(fp)
   409f0:	10800058 	cmpnei	r2,r2,1
   409f4:	10002e1e 	bne	r2,zero,40ab0 <freq_to_lcd+0x12c>
		{
			//printf("home\n");
			//hd44780_clear();
			itoa(IORD_ALTERA_AVALON_PIO_DATA(FREQ_BASE), znachenie, 10);
   409f8:	00800234 	movhi	r2,8
   409fc:	10842004 	addi	r2,r2,4224
   40a00:	10800037 	ldwio	r2,0(r2)
   40a04:	e0fffac4 	addi	r3,fp,-21
   40a08:	01800284 	movi	r6,10
   40a0c:	180b883a 	mov	r5,r3
   40a10:	1009883a 	mov	r4,r2
   40a14:	0040d100 	call	40d10 <itoa>
			hd44780_position(0, 0/*strlen(znachenie) + 12*/);
   40a18:	000b883a 	mov	r5,zero
   40a1c:	0009883a 	mov	r4,zero
   40a20:	004059c0 	call	4059c <hd44780_position>
			//hd44780_print(zagolovok);
			//printf("frequency\n");
			if (strlen(znachenie) < len_znach) hd44780_clear();
   40a24:	e0bffac4 	addi	r2,fp,-21
   40a28:	1009883a 	mov	r4,r2
   40a2c:	0040d9c0 	call	40d9c <strlen>
   40a30:	1007883a 	mov	r3,r2
   40a34:	d0a50717 	ldw	r2,-27620(gp)
   40a38:	1880012e 	bgeu	r3,r2,40a40 <freq_to_lcd+0xbc>
   40a3c:	004047c0 	call	4047c <hd44780_clear>
			hd44780_print("frequency");
   40a40:	01000134 	movhi	r4,4
   40a44:	210fef04 	addi	r4,r4,16316
   40a48:	00407540 	call	40754 <hd44780_print>
			hd44780_print("=");
   40a4c:	01000134 	movhi	r4,4
   40a50:	210ff204 	addi	r4,r4,16328
   40a54:	00407540 	call	40754 <hd44780_print>
			//alt_putstr(znachenie);
			hd44780_print(znachenie);
   40a58:	e0bffac4 	addi	r2,fp,-21
   40a5c:	1009883a 	mov	r4,r2
   40a60:	00407540 	call	40754 <hd44780_print>
			len_znach = strlen(znachenie);
   40a64:	e0bffac4 	addi	r2,fp,-21
   40a68:	1009883a 	mov	r4,r2
   40a6c:	0040d9c0 	call	40d9c <strlen>
   40a70:	d0a50715 	stw	r2,-27620(gp)

			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << n);
   40a74:	d0a50517 	ldw	r2,-27628(gp)
   40a78:	00c00044 	movi	r3,1
   40a7c:	1886983a 	sll	r3,r3,r2
   40a80:	00800234 	movhi	r2,8
   40a84:	10842404 	addi	r2,r2,4240
   40a88:	10c00035 	stwio	r3,0(r2)
			n++;
   40a8c:	d0a50517 	ldw	r2,-27628(gp)
   40a90:	10800044 	addi	r2,r2,1
   40a94:	d0a50515 	stw	r2,-27628(gp)
			if (n == LED_DATA_WIDTH) n = 0;
   40a98:	d0a50517 	ldw	r2,-27628(gp)
   40a9c:	10800218 	cmpnei	r2,r2,8
   40aa0:	1000031e 	bne	r2,zero,40ab0 <freq_to_lcd+0x12c>
   40aa4:	d0250515 	stw	zero,-27628(gp)
		}
	}
	else write_en = 0;

}
   40aa8:	00000106 	br	40ab0 <freq_to_lcd+0x12c>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << n);
			n++;
			if (n == LED_DATA_WIDTH) n = 0;
		}
	}
	else write_en = 0;
   40aac:	e03ff815 	stw	zero,-32(fp)

}
   40ab0:	0001883a 	nop
   40ab4:	e037883a 	mov	sp,fp
   40ab8:	dfc00117 	ldw	ra,4(sp)
   40abc:	df000017 	ldw	fp,0(sp)
   40ac0:	dec00204 	addi	sp,sp,8
   40ac4:	f800283a 	ret

00040ac8 <set_freq_base>:

void set_freq_base()
{
   40ac8:	defffd04 	addi	sp,sp,-12
   40acc:	dfc00215 	stw	ra,8(sp)
   40ad0:	df000115 	stw	fp,4(sp)
   40ad4:	df000104 	addi	fp,sp,4

	if (sw0 != (IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x01))
   40ad8:	00800234 	movhi	r2,8
   40adc:	10841c04 	addi	r2,r2,4208
   40ae0:	10800037 	ldwio	r2,0(r2)
   40ae4:	10c0004c 	andi	r3,r2,1
   40ae8:	00800134 	movhi	r2,4
   40aec:	109a0804 	addi	r2,r2,26656
   40af0:	10800017 	ldw	r2,0(r2)
   40af4:	18802426 	beq	r3,r2,40b88 <set_freq_base+0xc0>
	{
		for(int i = 0; i < ALT_CPU_CPU_FREQ / 4 ; i++);
   40af8:	e03fff15 	stw	zero,-4(fp)
   40afc:	00000306 	br	40b0c <set_freq_base+0x44>
   40b00:	e0bfff17 	ldw	r2,-4(fp)
   40b04:	10800044 	addi	r2,r2,1
   40b08:	e0bfff15 	stw	r2,-4(fp)
   40b0c:	e0ffff17 	ldw	r3,-4(fp)
   40b10:	00805f74 	movhi	r2,381
   40b14:	109e0fc4 	addi	r2,r2,30783
   40b18:	10fff92e 	bgeu	r2,r3,40b00 <__alt_data_end+0xfffcfdc0>
		sw0 = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x01;
   40b1c:	00800234 	movhi	r2,8
   40b20:	10841c04 	addi	r2,r2,4208
   40b24:	10800037 	ldwio	r2,0(r2)
   40b28:	10c0004c 	andi	r3,r2,1
   40b2c:	00800134 	movhi	r2,4
   40b30:	109a0804 	addi	r2,r2,26656
   40b34:	10c00015 	stw	r3,0(r2)
		if (sw0 == 0) freq_base = 400000000;
   40b38:	00800134 	movhi	r2,4
   40b3c:	109a0804 	addi	r2,r2,26656
   40b40:	10800017 	ldw	r2,0(r2)
   40b44:	1000041e 	bne	r2,zero,40b58 <set_freq_base+0x90>
   40b48:	0085f634 	movhi	r2,6104
   40b4c:	10a10004 	addi	r2,r2,-31744
   40b50:	d0a00015 	stw	r2,-32768(gp)
   40b54:	00000306 	br	40b64 <set_freq_base+0x9c>
		else freq_base = 50000000;
   40b58:	0080bef4 	movhi	r2,763
   40b5c:	10bc2004 	addi	r2,r2,-3968
   40b60:	d0a00015 	stw	r2,-32768(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(FREQ_BASE_BASE, freq_base);
   40b64:	d0e00017 	ldw	r3,-32768(gp)
   40b68:	00800234 	movhi	r2,8
   40b6c:	10840004 	addi	r2,r2,4096
   40b70:	10c00035 	stwio	r3,0(r2)
		printf("freq_base = %d\n",freq_base);
   40b74:	d0a00017 	ldw	r2,-32768(gp)
   40b78:	100b883a 	mov	r5,r2
   40b7c:	01000134 	movhi	r4,4
   40b80:	210ff304 	addi	r4,r4,16332
   40b84:	0040d500 	call	40d50 <printf>
	}
}
   40b88:	0001883a 	nop
   40b8c:	e037883a 	mov	sp,fp
   40b90:	dfc00117 	ldw	ra,4(sp)
   40b94:	df000017 	ldw	fp,0(sp)
   40b98:	dec00204 	addi	sp,sp,8
   40b9c:	f800283a 	ret

00040ba0 <set_time_del>:

void set_time_del()
{
   40ba0:	defffd04 	addi	sp,sp,-12
   40ba4:	dfc00215 	stw	ra,8(sp)
   40ba8:	df000115 	stw	fp,4(sp)
   40bac:	df000104 	addi	fp,sp,4
	if (sw123 != ((IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x0E) >> 1))
   40bb0:	00800234 	movhi	r2,8
   40bb4:	10841c04 	addi	r2,r2,4208
   40bb8:	10800037 	ldwio	r2,0(r2)
   40bbc:	1080038c 	andi	r2,r2,14
   40bc0:	1007d07a 	srai	r3,r2,1
   40bc4:	00800134 	movhi	r2,4
   40bc8:	109a0704 	addi	r2,r2,26652
   40bcc:	10800017 	ldw	r2,0(r2)
   40bd0:	18801e26 	beq	r3,r2,40c4c <set_time_del+0xac>
	{
		for(int i = 0; i < ALT_CPU_CPU_FREQ / 4; i++);
   40bd4:	e03fff15 	stw	zero,-4(fp)
   40bd8:	00000306 	br	40be8 <set_time_del+0x48>
   40bdc:	e0bfff17 	ldw	r2,-4(fp)
   40be0:	10800044 	addi	r2,r2,1
   40be4:	e0bfff15 	stw	r2,-4(fp)
   40be8:	e0ffff17 	ldw	r3,-4(fp)
   40bec:	00805f74 	movhi	r2,381
   40bf0:	109e0fc4 	addi	r2,r2,30783
   40bf4:	10fff92e 	bgeu	r2,r3,40bdc <__alt_data_end+0xfffcfe9c>
		sw123 = ((IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x0E) >> 1);
   40bf8:	00800234 	movhi	r2,8
   40bfc:	10841c04 	addi	r2,r2,4208
   40c00:	10800037 	ldwio	r2,0(r2)
   40c04:	1080038c 	andi	r2,r2,14
   40c08:	1007d07a 	srai	r3,r2,1
   40c0c:	00800134 	movhi	r2,4
   40c10:	109a0704 	addi	r2,r2,26652
   40c14:	10c00015 	stw	r3,0(r2)
		time_del = sw123;
   40c18:	00800134 	movhi	r2,4
   40c1c:	109a0704 	addi	r2,r2,26652
   40c20:	10800017 	ldw	r2,0(r2)
   40c24:	d0a50615 	stw	r2,-27624(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(TIME_DEL_BASE, time_del);
   40c28:	d0e50617 	ldw	r3,-27624(gp)
   40c2c:	00800234 	movhi	r2,8
   40c30:	10840404 	addi	r2,r2,4112
   40c34:	10c00035 	stwio	r3,0(r2)
		printf("time_del = %d\n",time_del);
   40c38:	d0a50617 	ldw	r2,-27624(gp)
   40c3c:	100b883a 	mov	r5,r2
   40c40:	01000134 	movhi	r4,4
   40c44:	210ff704 	addi	r4,r4,16348
   40c48:	0040d500 	call	40d50 <printf>
	}
}
   40c4c:	0001883a 	nop
   40c50:	e037883a 	mov	sp,fp
   40c54:	dfc00117 	ldw	ra,4(sp)
   40c58:	df000017 	ldw	fp,0(sp)
   40c5c:	dec00204 	addi	sp,sp,8
   40c60:	f800283a 	ret

00040c64 <main>:

int main()
{
   40c64:	defffe04 	addi	sp,sp,-8
   40c68:	dfc00115 	stw	ra,4(sp)
   40c6c:	df000015 	stw	fp,0(sp)
   40c70:	d839883a 	mov	fp,sp
	hd44780_init();
   40c74:	00408880 	call	40888 <hd44780_init>
	IOWR_ALTERA_AVALON_PIO_DATA(FREQ_BASE_BASE, freq_base);
   40c78:	d0e00017 	ldw	r3,-32768(gp)
   40c7c:	00800234 	movhi	r2,8
   40c80:	10840004 	addi	r2,r2,4096
   40c84:	10c00035 	stwio	r3,0(r2)
	//printf("freq_base init: ", freq_base);
	IOWR_ALTERA_AVALON_PIO_DATA(TIME_DEL_BASE, time_del);
   40c88:	d0e50617 	ldw	r3,-27624(gp)
   40c8c:	00800234 	movhi	r2,8
   40c90:	10840404 	addi	r2,r2,4112
   40c94:	10c00035 	stwio	r3,0(r2)
	//printf("time_del init: ", time_del);
	while(1)
	{
		set_freq_base();
   40c98:	0040ac80 	call	40ac8 <set_freq_base>
		set_time_del();
   40c9c:	0040ba00 	call	40ba0 <set_time_del>
		freq_to_lcd();
   40ca0:	00409840 	call	40984 <freq_to_lcd>
	}
   40ca4:	003ffc06 	br	40c98 <__alt_data_end+0xfffcff58>

00040ca8 <__itoa>:
   40ca8:	30bfff84 	addi	r2,r6,-2
   40cac:	00c00884 	movi	r3,34
   40cb0:	1880032e 	bgeu	r3,r2,40cc0 <__itoa+0x18>
   40cb4:	28000005 	stb	zero,0(r5)
   40cb8:	0005883a 	mov	r2,zero
   40cbc:	f800283a 	ret
   40cc0:	defffe04 	addi	sp,sp,-8
   40cc4:	dfc00115 	stw	ra,4(sp)
   40cc8:	dc000015 	stw	r16,0(sp)
   40ccc:	00800284 	movi	r2,10
   40cd0:	3080061e 	bne	r6,r2,40cec <__itoa+0x44>
   40cd4:	2000050e 	bge	r4,zero,40cec <__itoa+0x44>
   40cd8:	00800b44 	movi	r2,45
   40cdc:	28800005 	stb	r2,0(r5)
   40ce0:	0109c83a 	sub	r4,zero,r4
   40ce4:	00800044 	movi	r2,1
   40ce8:	00000106 	br	40cf0 <__itoa+0x48>
   40cec:	0005883a 	mov	r2,zero
   40cf0:	2821883a 	mov	r16,r5
   40cf4:	288b883a 	add	r5,r5,r2
   40cf8:	0040db80 	call	40db8 <__utoa>
   40cfc:	8005883a 	mov	r2,r16
   40d00:	dfc00117 	ldw	ra,4(sp)
   40d04:	dc000017 	ldw	r16,0(sp)
   40d08:	dec00204 	addi	sp,sp,8
   40d0c:	f800283a 	ret

00040d10 <itoa>:
   40d10:	0040ca81 	jmpi	40ca8 <__itoa>

00040d14 <_printf_r>:
   40d14:	defffd04 	addi	sp,sp,-12
   40d18:	dfc00015 	stw	ra,0(sp)
   40d1c:	d9800115 	stw	r6,4(sp)
   40d20:	d9c00215 	stw	r7,8(sp)
   40d24:	20c00217 	ldw	r3,8(r4)
   40d28:	01800134 	movhi	r6,4
   40d2c:	31853704 	addi	r6,r6,5340
   40d30:	19800115 	stw	r6,4(r3)
   40d34:	280d883a 	mov	r6,r5
   40d38:	21400217 	ldw	r5,8(r4)
   40d3c:	d9c00104 	addi	r7,sp,4
   40d40:	0040f240 	call	40f24 <___vfprintf_internal_r>
   40d44:	dfc00017 	ldw	ra,0(sp)
   40d48:	dec00304 	addi	sp,sp,12
   40d4c:	f800283a 	ret

00040d50 <printf>:
   40d50:	defffc04 	addi	sp,sp,-16
   40d54:	dfc00015 	stw	ra,0(sp)
   40d58:	d9400115 	stw	r5,4(sp)
   40d5c:	d9800215 	stw	r6,8(sp)
   40d60:	d9c00315 	stw	r7,12(sp)
   40d64:	00800134 	movhi	r2,4
   40d68:	10950104 	addi	r2,r2,21508
   40d6c:	10800017 	ldw	r2,0(r2)
   40d70:	01400134 	movhi	r5,4
   40d74:	29453704 	addi	r5,r5,5340
   40d78:	10c00217 	ldw	r3,8(r2)
   40d7c:	d9800104 	addi	r6,sp,4
   40d80:	19400115 	stw	r5,4(r3)
   40d84:	200b883a 	mov	r5,r4
   40d88:	11000217 	ldw	r4,8(r2)
   40d8c:	00414480 	call	41448 <__vfprintf_internal>
   40d90:	dfc00017 	ldw	ra,0(sp)
   40d94:	dec00404 	addi	sp,sp,16
   40d98:	f800283a 	ret

00040d9c <strlen>:
   40d9c:	2005883a 	mov	r2,r4
   40da0:	10c00007 	ldb	r3,0(r2)
   40da4:	18000226 	beq	r3,zero,40db0 <strlen+0x14>
   40da8:	10800044 	addi	r2,r2,1
   40dac:	003ffc06 	br	40da0 <__alt_data_end+0xfffd0060>
   40db0:	1105c83a 	sub	r2,r2,r4
   40db4:	f800283a 	ret

00040db8 <__utoa>:
   40db8:	deffef04 	addi	sp,sp,-68
   40dbc:	dc000a15 	stw	r16,40(sp)
   40dc0:	2821883a 	mov	r16,r5
   40dc4:	01400134 	movhi	r5,4
   40dc8:	dd400f15 	stw	r21,60(sp)
   40dcc:	dcc00d15 	stw	r19,52(sp)
   40dd0:	302b883a 	mov	r21,r6
   40dd4:	2027883a 	mov	r19,r4
   40dd8:	01800944 	movi	r6,37
   40ddc:	294ffb04 	addi	r5,r5,16364
   40de0:	d809883a 	mov	r4,sp
   40de4:	dfc01015 	stw	ra,64(sp)
   40de8:	dd000e15 	stw	r20,56(sp)
   40dec:	dc800c15 	stw	r18,48(sp)
   40df0:	dc400b15 	stw	r17,44(sp)
   40df4:	004163c0 	call	4163c <memcpy>
   40df8:	a8bfff84 	addi	r2,r21,-2
   40dfc:	00c00884 	movi	r3,34
   40e00:	1880032e 	bgeu	r3,r2,40e10 <__utoa+0x58>
   40e04:	80000005 	stb	zero,0(r16)
   40e08:	0005883a 	mov	r2,zero
   40e0c:	00002006 	br	40e90 <__utoa+0xd8>
   40e10:	8029883a 	mov	r20,r16
   40e14:	0023883a 	mov	r17,zero
   40e18:	9809883a 	mov	r4,r19
   40e1c:	a80b883a 	mov	r5,r21
   40e20:	0041e240 	call	41e24 <__umodsi3>
   40e24:	d885883a 	add	r2,sp,r2
   40e28:	10800003 	ldbu	r2,0(r2)
   40e2c:	9809883a 	mov	r4,r19
   40e30:	a80b883a 	mov	r5,r21
   40e34:	a0800005 	stb	r2,0(r20)
   40e38:	0041dc00 	call	41dc0 <__udivsi3>
   40e3c:	8c800044 	addi	r18,r17,1
   40e40:	1027883a 	mov	r19,r2
   40e44:	a5000044 	addi	r20,r20,1
   40e48:	10000226 	beq	r2,zero,40e54 <__utoa+0x9c>
   40e4c:	9023883a 	mov	r17,r18
   40e50:	003ff106 	br	40e18 <__alt_data_end+0xfffd00d8>
   40e54:	84a5883a 	add	r18,r16,r18
   40e58:	90000005 	stb	zero,0(r18)
   40e5c:	8445883a 	add	r2,r16,r17
   40e60:	8007883a 	mov	r3,r16
   40e64:	1409c83a 	sub	r4,r2,r16
   40e68:	1c0bc83a 	sub	r5,r3,r16
   40e6c:	2900070e 	bge	r5,r4,40e8c <__utoa+0xd4>
   40e70:	11400003 	ldbu	r5,0(r2)
   40e74:	19000003 	ldbu	r4,0(r3)
   40e78:	10bfffc4 	addi	r2,r2,-1
   40e7c:	19400005 	stb	r5,0(r3)
   40e80:	11000045 	stb	r4,1(r2)
   40e84:	18c00044 	addi	r3,r3,1
   40e88:	003ff606 	br	40e64 <__alt_data_end+0xfffd0124>
   40e8c:	8005883a 	mov	r2,r16
   40e90:	dfc01017 	ldw	ra,64(sp)
   40e94:	dd400f17 	ldw	r21,60(sp)
   40e98:	dd000e17 	ldw	r20,56(sp)
   40e9c:	dcc00d17 	ldw	r19,52(sp)
   40ea0:	dc800c17 	ldw	r18,48(sp)
   40ea4:	dc400b17 	ldw	r17,44(sp)
   40ea8:	dc000a17 	ldw	r16,40(sp)
   40eac:	dec01104 	addi	sp,sp,68
   40eb0:	f800283a 	ret

00040eb4 <utoa>:
   40eb4:	0040db81 	jmpi	40db8 <__utoa>

00040eb8 <print_repeat>:
   40eb8:	defffb04 	addi	sp,sp,-20
   40ebc:	dc800315 	stw	r18,12(sp)
   40ec0:	dc400215 	stw	r17,8(sp)
   40ec4:	dc000115 	stw	r16,4(sp)
   40ec8:	dfc00415 	stw	ra,16(sp)
   40ecc:	2025883a 	mov	r18,r4
   40ed0:	2823883a 	mov	r17,r5
   40ed4:	d9800005 	stb	r6,0(sp)
   40ed8:	3821883a 	mov	r16,r7
   40edc:	04000a0e 	bge	zero,r16,40f08 <print_repeat+0x50>
   40ee0:	88800117 	ldw	r2,4(r17)
   40ee4:	01c00044 	movi	r7,1
   40ee8:	d80d883a 	mov	r6,sp
   40eec:	880b883a 	mov	r5,r17
   40ef0:	9009883a 	mov	r4,r18
   40ef4:	103ee83a 	callr	r2
   40ef8:	843fffc4 	addi	r16,r16,-1
   40efc:	103ff726 	beq	r2,zero,40edc <__alt_data_end+0xfffd019c>
   40f00:	00bfffc4 	movi	r2,-1
   40f04:	00000106 	br	40f0c <print_repeat+0x54>
   40f08:	0005883a 	mov	r2,zero
   40f0c:	dfc00417 	ldw	ra,16(sp)
   40f10:	dc800317 	ldw	r18,12(sp)
   40f14:	dc400217 	ldw	r17,8(sp)
   40f18:	dc000117 	ldw	r16,4(sp)
   40f1c:	dec00504 	addi	sp,sp,20
   40f20:	f800283a 	ret

00040f24 <___vfprintf_internal_r>:
   40f24:	deffe504 	addi	sp,sp,-108
   40f28:	d8c00804 	addi	r3,sp,32
   40f2c:	df001915 	stw	fp,100(sp)
   40f30:	ddc01815 	stw	r23,96(sp)
   40f34:	dd801715 	stw	r22,92(sp)
   40f38:	dd401615 	stw	r21,88(sp)
   40f3c:	dd001515 	stw	r20,84(sp)
   40f40:	dcc01415 	stw	r19,80(sp)
   40f44:	dc801315 	stw	r18,76(sp)
   40f48:	dc401215 	stw	r17,72(sp)
   40f4c:	dc001115 	stw	r16,68(sp)
   40f50:	dfc01a15 	stw	ra,104(sp)
   40f54:	2027883a 	mov	r19,r4
   40f58:	2839883a 	mov	fp,r5
   40f5c:	382d883a 	mov	r22,r7
   40f60:	d9800f15 	stw	r6,60(sp)
   40f64:	0021883a 	mov	r16,zero
   40f68:	d8000e15 	stw	zero,56(sp)
   40f6c:	002f883a 	mov	r23,zero
   40f70:	002b883a 	mov	r21,zero
   40f74:	0025883a 	mov	r18,zero
   40f78:	0023883a 	mov	r17,zero
   40f7c:	d8000c15 	stw	zero,48(sp)
   40f80:	d8000b15 	stw	zero,44(sp)
   40f84:	0029883a 	mov	r20,zero
   40f88:	d8c00915 	stw	r3,36(sp)
   40f8c:	d8c00f17 	ldw	r3,60(sp)
   40f90:	19000003 	ldbu	r4,0(r3)
   40f94:	20803fcc 	andi	r2,r4,255
   40f98:	1080201c 	xori	r2,r2,128
   40f9c:	10bfe004 	addi	r2,r2,-128
   40fa0:	10011c26 	beq	r2,zero,41414 <___vfprintf_internal_r+0x4f0>
   40fa4:	00c00044 	movi	r3,1
   40fa8:	a0c01426 	beq	r20,r3,40ffc <___vfprintf_internal_r+0xd8>
   40fac:	1d000216 	blt	r3,r20,40fb8 <___vfprintf_internal_r+0x94>
   40fb0:	a0000626 	beq	r20,zero,40fcc <___vfprintf_internal_r+0xa8>
   40fb4:	00011306 	br	41404 <___vfprintf_internal_r+0x4e0>
   40fb8:	01400084 	movi	r5,2
   40fbc:	a1401d26 	beq	r20,r5,41034 <___vfprintf_internal_r+0x110>
   40fc0:	014000c4 	movi	r5,3
   40fc4:	a1402926 	beq	r20,r5,4106c <___vfprintf_internal_r+0x148>
   40fc8:	00010e06 	br	41404 <___vfprintf_internal_r+0x4e0>
   40fcc:	01400944 	movi	r5,37
   40fd0:	1140fb26 	beq	r2,r5,413c0 <___vfprintf_internal_r+0x49c>
   40fd4:	e0800117 	ldw	r2,4(fp)
   40fd8:	d9000005 	stb	r4,0(sp)
   40fdc:	01c00044 	movi	r7,1
   40fe0:	d80d883a 	mov	r6,sp
   40fe4:	e00b883a 	mov	r5,fp
   40fe8:	9809883a 	mov	r4,r19
   40fec:	103ee83a 	callr	r2
   40ff0:	1000d61e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   40ff4:	84000044 	addi	r16,r16,1
   40ff8:	00010206 	br	41404 <___vfprintf_internal_r+0x4e0>
   40ffc:	01400c04 	movi	r5,48
   41000:	1140f826 	beq	r2,r5,413e4 <___vfprintf_internal_r+0x4c0>
   41004:	01400944 	movi	r5,37
   41008:	11400a1e 	bne	r2,r5,41034 <___vfprintf_internal_r+0x110>
   4100c:	d8800005 	stb	r2,0(sp)
   41010:	e0800117 	ldw	r2,4(fp)
   41014:	a00f883a 	mov	r7,r20
   41018:	d80d883a 	mov	r6,sp
   4101c:	e00b883a 	mov	r5,fp
   41020:	9809883a 	mov	r4,r19
   41024:	103ee83a 	callr	r2
   41028:	1000c81e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   4102c:	84000044 	addi	r16,r16,1
   41030:	0000f306 	br	41400 <___vfprintf_internal_r+0x4dc>
   41034:	217ff404 	addi	r5,r4,-48
   41038:	29403fcc 	andi	r5,r5,255
   4103c:	00c00244 	movi	r3,9
   41040:	19400736 	bltu	r3,r5,41060 <___vfprintf_internal_r+0x13c>
   41044:	00bfffc4 	movi	r2,-1
   41048:	88800226 	beq	r17,r2,41054 <___vfprintf_internal_r+0x130>
   4104c:	8c4002a4 	muli	r17,r17,10
   41050:	00000106 	br	41058 <___vfprintf_internal_r+0x134>
   41054:	0023883a 	mov	r17,zero
   41058:	2c63883a 	add	r17,r5,r17
   4105c:	0000e206 	br	413e8 <___vfprintf_internal_r+0x4c4>
   41060:	01400b84 	movi	r5,46
   41064:	1140e426 	beq	r2,r5,413f8 <___vfprintf_internal_r+0x4d4>
   41068:	05000084 	movi	r20,2
   4106c:	213ff404 	addi	r4,r4,-48
   41070:	21003fcc 	andi	r4,r4,255
   41074:	00c00244 	movi	r3,9
   41078:	19000736 	bltu	r3,r4,41098 <___vfprintf_internal_r+0x174>
   4107c:	00bfffc4 	movi	r2,-1
   41080:	90800226 	beq	r18,r2,4108c <___vfprintf_internal_r+0x168>
   41084:	948002a4 	muli	r18,r18,10
   41088:	00000106 	br	41090 <___vfprintf_internal_r+0x16c>
   4108c:	0025883a 	mov	r18,zero
   41090:	24a5883a 	add	r18,r4,r18
   41094:	0000db06 	br	41404 <___vfprintf_internal_r+0x4e0>
   41098:	00c01b04 	movi	r3,108
   4109c:	10c0d426 	beq	r2,r3,413f0 <___vfprintf_internal_r+0x4cc>
   410a0:	013fffc4 	movi	r4,-1
   410a4:	91000226 	beq	r18,r4,410b0 <___vfprintf_internal_r+0x18c>
   410a8:	d8000b15 	stw	zero,44(sp)
   410ac:	00000106 	br	410b4 <___vfprintf_internal_r+0x190>
   410b0:	04800044 	movi	r18,1
   410b4:	01001a44 	movi	r4,105
   410b8:	11001626 	beq	r2,r4,41114 <___vfprintf_internal_r+0x1f0>
   410bc:	20800916 	blt	r4,r2,410e4 <___vfprintf_internal_r+0x1c0>
   410c0:	010018c4 	movi	r4,99
   410c4:	11008a26 	beq	r2,r4,412f0 <___vfprintf_internal_r+0x3cc>
   410c8:	01001904 	movi	r4,100
   410cc:	11001126 	beq	r2,r4,41114 <___vfprintf_internal_r+0x1f0>
   410d0:	01001604 	movi	r4,88
   410d4:	1100ca1e 	bne	r2,r4,41400 <___vfprintf_internal_r+0x4dc>
   410d8:	00c00044 	movi	r3,1
   410dc:	d8c00e15 	stw	r3,56(sp)
   410e0:	00001406 	br	41134 <___vfprintf_internal_r+0x210>
   410e4:	01001cc4 	movi	r4,115
   410e8:	11009a26 	beq	r2,r4,41354 <___vfprintf_internal_r+0x430>
   410ec:	20800416 	blt	r4,r2,41100 <___vfprintf_internal_r+0x1dc>
   410f0:	01001bc4 	movi	r4,111
   410f4:	1100c21e 	bne	r2,r4,41400 <___vfprintf_internal_r+0x4dc>
   410f8:	05400204 	movi	r21,8
   410fc:	00000e06 	br	41138 <___vfprintf_internal_r+0x214>
   41100:	01001d44 	movi	r4,117
   41104:	11000c26 	beq	r2,r4,41138 <___vfprintf_internal_r+0x214>
   41108:	01001e04 	movi	r4,120
   4110c:	11000926 	beq	r2,r4,41134 <___vfprintf_internal_r+0x210>
   41110:	0000bb06 	br	41400 <___vfprintf_internal_r+0x4dc>
   41114:	b5000104 	addi	r20,r22,4
   41118:	b8000726 	beq	r23,zero,41138 <___vfprintf_internal_r+0x214>
   4111c:	dd000d15 	stw	r20,52(sp)
   41120:	b5800017 	ldw	r22,0(r22)
   41124:	b000080e 	bge	r22,zero,41148 <___vfprintf_internal_r+0x224>
   41128:	05adc83a 	sub	r22,zero,r22
   4112c:	02800044 	movi	r10,1
   41130:	00000606 	br	4114c <___vfprintf_internal_r+0x228>
   41134:	05400404 	movi	r21,16
   41138:	b0c00104 	addi	r3,r22,4
   4113c:	d8c00d15 	stw	r3,52(sp)
   41140:	b5800017 	ldw	r22,0(r22)
   41144:	002f883a 	mov	r23,zero
   41148:	0015883a 	mov	r10,zero
   4114c:	d829883a 	mov	r20,sp
   41150:	b0001426 	beq	r22,zero,411a4 <___vfprintf_internal_r+0x280>
   41154:	b009883a 	mov	r4,r22
   41158:	a80b883a 	mov	r5,r21
   4115c:	da801015 	stw	r10,64(sp)
   41160:	0041dc00 	call	41dc0 <__udivsi3>
   41164:	1549383a 	mul	r4,r2,r21
   41168:	00c00244 	movi	r3,9
   4116c:	da801017 	ldw	r10,64(sp)
   41170:	b12dc83a 	sub	r22,r22,r4
   41174:	1d800216 	blt	r3,r22,41180 <___vfprintf_internal_r+0x25c>
   41178:	b5800c04 	addi	r22,r22,48
   4117c:	00000506 	br	41194 <___vfprintf_internal_r+0x270>
   41180:	d8c00e17 	ldw	r3,56(sp)
   41184:	18000226 	beq	r3,zero,41190 <___vfprintf_internal_r+0x26c>
   41188:	b5800dc4 	addi	r22,r22,55
   4118c:	00000106 	br	41194 <___vfprintf_internal_r+0x270>
   41190:	b58015c4 	addi	r22,r22,87
   41194:	a5800005 	stb	r22,0(r20)
   41198:	a5000044 	addi	r20,r20,1
   4119c:	102d883a 	mov	r22,r2
   411a0:	003feb06 	br	41150 <__alt_data_end+0xfffd0410>
   411a4:	a6c7c83a 	sub	r3,r20,sp
   411a8:	d8c00a15 	stw	r3,40(sp)
   411ac:	90c5c83a 	sub	r2,r18,r3
   411b0:	00800a0e 	bge	zero,r2,411dc <___vfprintf_internal_r+0x2b8>
   411b4:	a085883a 	add	r2,r20,r2
   411b8:	01400c04 	movi	r5,48
   411bc:	d8c00917 	ldw	r3,36(sp)
   411c0:	a009883a 	mov	r4,r20
   411c4:	a0c0032e 	bgeu	r20,r3,411d4 <___vfprintf_internal_r+0x2b0>
   411c8:	a5000044 	addi	r20,r20,1
   411cc:	21400005 	stb	r5,0(r4)
   411d0:	a0bffa1e 	bne	r20,r2,411bc <__alt_data_end+0xfffd047c>
   411d4:	a6c7c83a 	sub	r3,r20,sp
   411d8:	d8c00a15 	stw	r3,40(sp)
   411dc:	d8c00a17 	ldw	r3,40(sp)
   411e0:	50d3883a 	add	r9,r10,r3
   411e4:	d8c00b17 	ldw	r3,44(sp)
   411e8:	8a6dc83a 	sub	r22,r17,r9
   411ec:	18001726 	beq	r3,zero,4124c <___vfprintf_internal_r+0x328>
   411f0:	50000a26 	beq	r10,zero,4121c <___vfprintf_internal_r+0x2f8>
   411f4:	00800b44 	movi	r2,45
   411f8:	d8800805 	stb	r2,32(sp)
   411fc:	e0800117 	ldw	r2,4(fp)
   41200:	01c00044 	movi	r7,1
   41204:	d9800804 	addi	r6,sp,32
   41208:	e00b883a 	mov	r5,fp
   4120c:	9809883a 	mov	r4,r19
   41210:	103ee83a 	callr	r2
   41214:	10004d1e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   41218:	84000044 	addi	r16,r16,1
   4121c:	0580070e 	bge	zero,r22,4123c <___vfprintf_internal_r+0x318>
   41220:	b00f883a 	mov	r7,r22
   41224:	01800c04 	movi	r6,48
   41228:	e00b883a 	mov	r5,fp
   4122c:	9809883a 	mov	r4,r19
   41230:	0040eb80 	call	40eb8 <print_repeat>
   41234:	1000451e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   41238:	85a1883a 	add	r16,r16,r22
   4123c:	d8c00a17 	ldw	r3,40(sp)
   41240:	a013883a 	mov	r9,r20
   41244:	1d2dc83a 	sub	r22,r3,r20
   41248:	00002206 	br	412d4 <___vfprintf_internal_r+0x3b0>
   4124c:	0580090e 	bge	zero,r22,41274 <___vfprintf_internal_r+0x350>
   41250:	b00f883a 	mov	r7,r22
   41254:	01800804 	movi	r6,32
   41258:	e00b883a 	mov	r5,fp
   4125c:	9809883a 	mov	r4,r19
   41260:	da801015 	stw	r10,64(sp)
   41264:	0040eb80 	call	40eb8 <print_repeat>
   41268:	da801017 	ldw	r10,64(sp)
   4126c:	1000371e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   41270:	85a1883a 	add	r16,r16,r22
   41274:	503ff126 	beq	r10,zero,4123c <__alt_data_end+0xfffd04fc>
   41278:	00800b44 	movi	r2,45
   4127c:	d8800805 	stb	r2,32(sp)
   41280:	e0800117 	ldw	r2,4(fp)
   41284:	01c00044 	movi	r7,1
   41288:	d9800804 	addi	r6,sp,32
   4128c:	e00b883a 	mov	r5,fp
   41290:	9809883a 	mov	r4,r19
   41294:	103ee83a 	callr	r2
   41298:	10002c1e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   4129c:	84000044 	addi	r16,r16,1
   412a0:	003fe606 	br	4123c <__alt_data_end+0xfffd04fc>
   412a4:	4a7fffc4 	addi	r9,r9,-1
   412a8:	48800003 	ldbu	r2,0(r9)
   412ac:	01c00044 	movi	r7,1
   412b0:	d9800804 	addi	r6,sp,32
   412b4:	d8800805 	stb	r2,32(sp)
   412b8:	e0800117 	ldw	r2,4(fp)
   412bc:	e00b883a 	mov	r5,fp
   412c0:	da401015 	stw	r9,64(sp)
   412c4:	9809883a 	mov	r4,r19
   412c8:	103ee83a 	callr	r2
   412cc:	da401017 	ldw	r9,64(sp)
   412d0:	10001e1e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   412d4:	8245c83a 	sub	r2,r16,r9
   412d8:	4d89883a 	add	r4,r9,r22
   412dc:	a085883a 	add	r2,r20,r2
   412e0:	013ff016 	blt	zero,r4,412a4 <__alt_data_end+0xfffd0564>
   412e4:	1021883a 	mov	r16,r2
   412e8:	dd800d17 	ldw	r22,52(sp)
   412ec:	00004406 	br	41400 <___vfprintf_internal_r+0x4dc>
   412f0:	00800044 	movi	r2,1
   412f4:	1440080e 	bge	r2,r17,41318 <___vfprintf_internal_r+0x3f4>
   412f8:	8d3fffc4 	addi	r20,r17,-1
   412fc:	a00f883a 	mov	r7,r20
   41300:	01800804 	movi	r6,32
   41304:	e00b883a 	mov	r5,fp
   41308:	9809883a 	mov	r4,r19
   4130c:	0040eb80 	call	40eb8 <print_repeat>
   41310:	10000e1e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   41314:	8521883a 	add	r16,r16,r20
   41318:	b0800017 	ldw	r2,0(r22)
   4131c:	01c00044 	movi	r7,1
   41320:	d80d883a 	mov	r6,sp
   41324:	d8800005 	stb	r2,0(sp)
   41328:	e0800117 	ldw	r2,4(fp)
   4132c:	e00b883a 	mov	r5,fp
   41330:	9809883a 	mov	r4,r19
   41334:	b5000104 	addi	r20,r22,4
   41338:	103ee83a 	callr	r2
   4133c:	1000031e 	bne	r2,zero,4134c <___vfprintf_internal_r+0x428>
   41340:	84000044 	addi	r16,r16,1
   41344:	a02d883a 	mov	r22,r20
   41348:	00002d06 	br	41400 <___vfprintf_internal_r+0x4dc>
   4134c:	00bfffc4 	movi	r2,-1
   41350:	00003106 	br	41418 <___vfprintf_internal_r+0x4f4>
   41354:	b5000017 	ldw	r20,0(r22)
   41358:	b0c00104 	addi	r3,r22,4
   4135c:	d8c00a15 	stw	r3,40(sp)
   41360:	a009883a 	mov	r4,r20
   41364:	0040d9c0 	call	40d9c <strlen>
   41368:	8893c83a 	sub	r9,r17,r2
   4136c:	102d883a 	mov	r22,r2
   41370:	0240090e 	bge	zero,r9,41398 <___vfprintf_internal_r+0x474>
   41374:	480f883a 	mov	r7,r9
   41378:	01800804 	movi	r6,32
   4137c:	e00b883a 	mov	r5,fp
   41380:	9809883a 	mov	r4,r19
   41384:	da401015 	stw	r9,64(sp)
   41388:	0040eb80 	call	40eb8 <print_repeat>
   4138c:	da401017 	ldw	r9,64(sp)
   41390:	103fee1e 	bne	r2,zero,4134c <__alt_data_end+0xfffd060c>
   41394:	8261883a 	add	r16,r16,r9
   41398:	e0800117 	ldw	r2,4(fp)
   4139c:	b00f883a 	mov	r7,r22
   413a0:	a00d883a 	mov	r6,r20
   413a4:	e00b883a 	mov	r5,fp
   413a8:	9809883a 	mov	r4,r19
   413ac:	103ee83a 	callr	r2
   413b0:	103fe61e 	bne	r2,zero,4134c <__alt_data_end+0xfffd060c>
   413b4:	85a1883a 	add	r16,r16,r22
   413b8:	dd800a17 	ldw	r22,40(sp)
   413bc:	00001006 	br	41400 <___vfprintf_internal_r+0x4dc>
   413c0:	05c00044 	movi	r23,1
   413c4:	04bfffc4 	movi	r18,-1
   413c8:	d8000e15 	stw	zero,56(sp)
   413cc:	05400284 	movi	r21,10
   413d0:	9023883a 	mov	r17,r18
   413d4:	d8000c15 	stw	zero,48(sp)
   413d8:	d8000b15 	stw	zero,44(sp)
   413dc:	b829883a 	mov	r20,r23
   413e0:	00000806 	br	41404 <___vfprintf_internal_r+0x4e0>
   413e4:	dd000b15 	stw	r20,44(sp)
   413e8:	05000084 	movi	r20,2
   413ec:	00000506 	br	41404 <___vfprintf_internal_r+0x4e0>
   413f0:	00c00044 	movi	r3,1
   413f4:	d8c00c15 	stw	r3,48(sp)
   413f8:	050000c4 	movi	r20,3
   413fc:	00000106 	br	41404 <___vfprintf_internal_r+0x4e0>
   41400:	0029883a 	mov	r20,zero
   41404:	d8c00f17 	ldw	r3,60(sp)
   41408:	18c00044 	addi	r3,r3,1
   4140c:	d8c00f15 	stw	r3,60(sp)
   41410:	003ede06 	br	40f8c <__alt_data_end+0xfffd024c>
   41414:	8005883a 	mov	r2,r16
   41418:	dfc01a17 	ldw	ra,104(sp)
   4141c:	df001917 	ldw	fp,100(sp)
   41420:	ddc01817 	ldw	r23,96(sp)
   41424:	dd801717 	ldw	r22,92(sp)
   41428:	dd401617 	ldw	r21,88(sp)
   4142c:	dd001517 	ldw	r20,84(sp)
   41430:	dcc01417 	ldw	r19,80(sp)
   41434:	dc801317 	ldw	r18,76(sp)
   41438:	dc401217 	ldw	r17,72(sp)
   4143c:	dc001117 	ldw	r16,68(sp)
   41440:	dec01b04 	addi	sp,sp,108
   41444:	f800283a 	ret

00041448 <__vfprintf_internal>:
   41448:	00800134 	movhi	r2,4
   4144c:	10950104 	addi	r2,r2,21508
   41450:	300f883a 	mov	r7,r6
   41454:	280d883a 	mov	r6,r5
   41458:	200b883a 	mov	r5,r4
   4145c:	11000017 	ldw	r4,0(r2)
   41460:	0040f241 	jmpi	40f24 <___vfprintf_internal_r>

00041464 <_vsprintf_r>:
   41464:	defff804 	addi	sp,sp,-32
   41468:	00808204 	movi	r2,520
   4146c:	d880000d 	sth	r2,0(sp)
   41470:	00a00034 	movhi	r2,32768
   41474:	10bfffc4 	addi	r2,r2,-1
   41478:	d8800515 	stw	r2,20(sp)
   4147c:	d8800315 	stw	r2,12(sp)
   41480:	00bfffc4 	movi	r2,-1
   41484:	d880008d 	sth	r2,2(sp)
   41488:	00800134 	movhi	r2,4
   4148c:	d9400415 	stw	r5,16(sp)
   41490:	d9400215 	stw	r5,8(sp)
   41494:	10856504 	addi	r2,r2,5524
   41498:	d80b883a 	mov	r5,sp
   4149c:	dfc00715 	stw	ra,28(sp)
   414a0:	d8800115 	stw	r2,4(sp)
   414a4:	d8000615 	stw	zero,24(sp)
   414a8:	00417300 	call	41730 <___svfprintf_internal_r>
   414ac:	d8c00417 	ldw	r3,16(sp)
   414b0:	18000005 	stb	zero,0(r3)
   414b4:	dfc00717 	ldw	ra,28(sp)
   414b8:	dec00804 	addi	sp,sp,32
   414bc:	f800283a 	ret

000414c0 <vsprintf>:
   414c0:	00800134 	movhi	r2,4
   414c4:	10950104 	addi	r2,r2,21508
   414c8:	300f883a 	mov	r7,r6
   414cc:	280d883a 	mov	r6,r5
   414d0:	200b883a 	mov	r5,r4
   414d4:	11000017 	ldw	r4,0(r2)
   414d8:	00414641 	jmpi	41464 <_vsprintf_r>

000414dc <__sfvwrite_small_dev>:
   414dc:	2880000b 	ldhu	r2,0(r5)
   414e0:	1080020c 	andi	r2,r2,8
   414e4:	10002126 	beq	r2,zero,4156c <__sfvwrite_small_dev+0x90>
   414e8:	2880008f 	ldh	r2,2(r5)
   414ec:	defffa04 	addi	sp,sp,-24
   414f0:	dc000015 	stw	r16,0(sp)
   414f4:	dfc00515 	stw	ra,20(sp)
   414f8:	dd000415 	stw	r20,16(sp)
   414fc:	dcc00315 	stw	r19,12(sp)
   41500:	dc800215 	stw	r18,8(sp)
   41504:	dc400115 	stw	r17,4(sp)
   41508:	2821883a 	mov	r16,r5
   4150c:	10001216 	blt	r2,zero,41558 <__sfvwrite_small_dev+0x7c>
   41510:	2027883a 	mov	r19,r4
   41514:	3025883a 	mov	r18,r6
   41518:	3823883a 	mov	r17,r7
   4151c:	05010004 	movi	r20,1024
   41520:	04400b0e 	bge	zero,r17,41550 <__sfvwrite_small_dev+0x74>
   41524:	880f883a 	mov	r7,r17
   41528:	a440010e 	bge	r20,r17,41530 <__sfvwrite_small_dev+0x54>
   4152c:	01c10004 	movi	r7,1024
   41530:	8140008f 	ldh	r5,2(r16)
   41534:	900d883a 	mov	r6,r18
   41538:	9809883a 	mov	r4,r19
   4153c:	0041c700 	call	41c70 <_write_r>
   41540:	0080050e 	bge	zero,r2,41558 <__sfvwrite_small_dev+0x7c>
   41544:	88a3c83a 	sub	r17,r17,r2
   41548:	90a5883a 	add	r18,r18,r2
   4154c:	003ff406 	br	41520 <__alt_data_end+0xfffd07e0>
   41550:	0005883a 	mov	r2,zero
   41554:	00000706 	br	41574 <__sfvwrite_small_dev+0x98>
   41558:	8080000b 	ldhu	r2,0(r16)
   4155c:	10801014 	ori	r2,r2,64
   41560:	8080000d 	sth	r2,0(r16)
   41564:	00bfffc4 	movi	r2,-1
   41568:	00000206 	br	41574 <__sfvwrite_small_dev+0x98>
   4156c:	00bfffc4 	movi	r2,-1
   41570:	f800283a 	ret
   41574:	dfc00517 	ldw	ra,20(sp)
   41578:	dd000417 	ldw	r20,16(sp)
   4157c:	dcc00317 	ldw	r19,12(sp)
   41580:	dc800217 	ldw	r18,8(sp)
   41584:	dc400117 	ldw	r17,4(sp)
   41588:	dc000017 	ldw	r16,0(sp)
   4158c:	dec00604 	addi	sp,sp,24
   41590:	f800283a 	ret

00041594 <__sfvwrite_small_str>:
   41594:	2880000b 	ldhu	r2,0(r5)
   41598:	10c0020c 	andi	r3,r2,8
   4159c:	18002026 	beq	r3,zero,41620 <__sfvwrite_small_str+0x8c>
   415a0:	28c0008f 	ldh	r3,2(r5)
   415a4:	defffd04 	addi	sp,sp,-12
   415a8:	dc000015 	stw	r16,0(sp)
   415ac:	dfc00215 	stw	ra,8(sp)
   415b0:	dc400115 	stw	r17,4(sp)
   415b4:	2821883a 	mov	r16,r5
   415b8:	1800150e 	bge	r3,zero,41610 <__sfvwrite_small_str+0x7c>
   415bc:	10c0800c 	andi	r3,r2,512
   415c0:	18001326 	beq	r3,zero,41610 <__sfvwrite_small_str+0x7c>
   415c4:	2c400517 	ldw	r17,20(r5)
   415c8:	89c0030e 	bge	r17,r7,415d8 <__sfvwrite_small_str+0x44>
   415cc:	10c0200c 	andi	r3,r2,128
   415d0:	18000326 	beq	r3,zero,415e0 <__sfvwrite_small_str+0x4c>
   415d4:	00000e06 	br	41610 <__sfvwrite_small_str+0x7c>
   415d8:	3c40010e 	bge	r7,r17,415e0 <__sfvwrite_small_str+0x4c>
   415dc:	3823883a 	mov	r17,r7
   415e0:	81000417 	ldw	r4,16(r16)
   415e4:	300b883a 	mov	r5,r6
   415e8:	880d883a 	mov	r6,r17
   415ec:	00416640 	call	41664 <memmove>
   415f0:	80800517 	ldw	r2,20(r16)
   415f4:	1445c83a 	sub	r2,r2,r17
   415f8:	80800515 	stw	r2,20(r16)
   415fc:	80800417 	ldw	r2,16(r16)
   41600:	1463883a 	add	r17,r2,r17
   41604:	84400415 	stw	r17,16(r16)
   41608:	0005883a 	mov	r2,zero
   4160c:	00000606 	br	41628 <__sfvwrite_small_str+0x94>
   41610:	10801014 	ori	r2,r2,64
   41614:	8080000d 	sth	r2,0(r16)
   41618:	00bfffc4 	movi	r2,-1
   4161c:	00000206 	br	41628 <__sfvwrite_small_str+0x94>
   41620:	00bfffc4 	movi	r2,-1
   41624:	f800283a 	ret
   41628:	dfc00217 	ldw	ra,8(sp)
   4162c:	dc400117 	ldw	r17,4(sp)
   41630:	dc000017 	ldw	r16,0(sp)
   41634:	dec00304 	addi	sp,sp,12
   41638:	f800283a 	ret

0004163c <memcpy>:
   4163c:	2005883a 	mov	r2,r4
   41640:	2007883a 	mov	r3,r4
   41644:	218d883a 	add	r6,r4,r6
   41648:	19800526 	beq	r3,r6,41660 <memcpy+0x24>
   4164c:	29000003 	ldbu	r4,0(r5)
   41650:	18c00044 	addi	r3,r3,1
   41654:	29400044 	addi	r5,r5,1
   41658:	193fffc5 	stb	r4,-1(r3)
   4165c:	003ffa06 	br	41648 <__alt_data_end+0xfffd0908>
   41660:	f800283a 	ret

00041664 <memmove>:
   41664:	2005883a 	mov	r2,r4
   41668:	218f883a 	add	r7,r4,r6
   4166c:	29000236 	bltu	r5,r4,41678 <memmove+0x14>
   41670:	1007883a 	mov	r3,r2
   41674:	00000c06 	br	416a8 <memmove+0x44>
   41678:	2987883a 	add	r3,r5,r6
   4167c:	20fffc2e 	bgeu	r4,r3,41670 <__alt_data_end+0xfffd0930>
   41680:	380b883a 	mov	r5,r7
   41684:	30cdc83a 	sub	r6,r6,r3
   41688:	1989883a 	add	r4,r3,r6
   4168c:	20000526 	beq	r4,zero,416a4 <memmove+0x40>
   41690:	18ffffc4 	addi	r3,r3,-1
   41694:	19000003 	ldbu	r4,0(r3)
   41698:	297fffc4 	addi	r5,r5,-1
   4169c:	29000005 	stb	r4,0(r5)
   416a0:	003ff906 	br	41688 <__alt_data_end+0xfffd0948>
   416a4:	f800283a 	ret
   416a8:	19c00526 	beq	r3,r7,416c0 <memmove+0x5c>
   416ac:	29000003 	ldbu	r4,0(r5)
   416b0:	18c00044 	addi	r3,r3,1
   416b4:	29400044 	addi	r5,r5,1
   416b8:	193fffc5 	stb	r4,-1(r3)
   416bc:	003ffa06 	br	416a8 <__alt_data_end+0xfffd0968>
   416c0:	f800283a 	ret

000416c4 <print_repeat>:
   416c4:	defffb04 	addi	sp,sp,-20
   416c8:	dc800315 	stw	r18,12(sp)
   416cc:	dc400215 	stw	r17,8(sp)
   416d0:	dc000115 	stw	r16,4(sp)
   416d4:	dfc00415 	stw	ra,16(sp)
   416d8:	2025883a 	mov	r18,r4
   416dc:	2823883a 	mov	r17,r5
   416e0:	d9800005 	stb	r6,0(sp)
   416e4:	3821883a 	mov	r16,r7
   416e8:	04000a0e 	bge	zero,r16,41714 <print_repeat+0x50>
   416ec:	88800117 	ldw	r2,4(r17)
   416f0:	01c00044 	movi	r7,1
   416f4:	d80d883a 	mov	r6,sp
   416f8:	880b883a 	mov	r5,r17
   416fc:	9009883a 	mov	r4,r18
   41700:	103ee83a 	callr	r2
   41704:	843fffc4 	addi	r16,r16,-1
   41708:	103ff726 	beq	r2,zero,416e8 <__alt_data_end+0xfffd09a8>
   4170c:	00bfffc4 	movi	r2,-1
   41710:	00000106 	br	41718 <print_repeat+0x54>
   41714:	0005883a 	mov	r2,zero
   41718:	dfc00417 	ldw	ra,16(sp)
   4171c:	dc800317 	ldw	r18,12(sp)
   41720:	dc400217 	ldw	r17,8(sp)
   41724:	dc000117 	ldw	r16,4(sp)
   41728:	dec00504 	addi	sp,sp,20
   4172c:	f800283a 	ret

00041730 <___svfprintf_internal_r>:
   41730:	deffe504 	addi	sp,sp,-108
   41734:	d8c00804 	addi	r3,sp,32
   41738:	df001915 	stw	fp,100(sp)
   4173c:	ddc01815 	stw	r23,96(sp)
   41740:	dd801715 	stw	r22,92(sp)
   41744:	dd401615 	stw	r21,88(sp)
   41748:	dd001515 	stw	r20,84(sp)
   4174c:	dcc01415 	stw	r19,80(sp)
   41750:	dc801315 	stw	r18,76(sp)
   41754:	dc401215 	stw	r17,72(sp)
   41758:	dc001115 	stw	r16,68(sp)
   4175c:	dfc01a15 	stw	ra,104(sp)
   41760:	2027883a 	mov	r19,r4
   41764:	2839883a 	mov	fp,r5
   41768:	382d883a 	mov	r22,r7
   4176c:	d9800f15 	stw	r6,60(sp)
   41770:	0021883a 	mov	r16,zero
   41774:	d8000e15 	stw	zero,56(sp)
   41778:	002f883a 	mov	r23,zero
   4177c:	002b883a 	mov	r21,zero
   41780:	0025883a 	mov	r18,zero
   41784:	0023883a 	mov	r17,zero
   41788:	d8000c15 	stw	zero,48(sp)
   4178c:	d8000b15 	stw	zero,44(sp)
   41790:	0029883a 	mov	r20,zero
   41794:	d8c00915 	stw	r3,36(sp)
   41798:	d8c00f17 	ldw	r3,60(sp)
   4179c:	19000003 	ldbu	r4,0(r3)
   417a0:	20803fcc 	andi	r2,r4,255
   417a4:	1080201c 	xori	r2,r2,128
   417a8:	10bfe004 	addi	r2,r2,-128
   417ac:	10011c26 	beq	r2,zero,41c20 <___svfprintf_internal_r+0x4f0>
   417b0:	00c00044 	movi	r3,1
   417b4:	a0c01426 	beq	r20,r3,41808 <___svfprintf_internal_r+0xd8>
   417b8:	1d000216 	blt	r3,r20,417c4 <___svfprintf_internal_r+0x94>
   417bc:	a0000626 	beq	r20,zero,417d8 <___svfprintf_internal_r+0xa8>
   417c0:	00011306 	br	41c10 <___svfprintf_internal_r+0x4e0>
   417c4:	01400084 	movi	r5,2
   417c8:	a1401d26 	beq	r20,r5,41840 <___svfprintf_internal_r+0x110>
   417cc:	014000c4 	movi	r5,3
   417d0:	a1402926 	beq	r20,r5,41878 <___svfprintf_internal_r+0x148>
   417d4:	00010e06 	br	41c10 <___svfprintf_internal_r+0x4e0>
   417d8:	01400944 	movi	r5,37
   417dc:	1140fb26 	beq	r2,r5,41bcc <___svfprintf_internal_r+0x49c>
   417e0:	e0800117 	ldw	r2,4(fp)
   417e4:	d9000005 	stb	r4,0(sp)
   417e8:	01c00044 	movi	r7,1
   417ec:	d80d883a 	mov	r6,sp
   417f0:	e00b883a 	mov	r5,fp
   417f4:	9809883a 	mov	r4,r19
   417f8:	103ee83a 	callr	r2
   417fc:	1000d61e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41800:	84000044 	addi	r16,r16,1
   41804:	00010206 	br	41c10 <___svfprintf_internal_r+0x4e0>
   41808:	01400c04 	movi	r5,48
   4180c:	1140f826 	beq	r2,r5,41bf0 <___svfprintf_internal_r+0x4c0>
   41810:	01400944 	movi	r5,37
   41814:	11400a1e 	bne	r2,r5,41840 <___svfprintf_internal_r+0x110>
   41818:	d8800005 	stb	r2,0(sp)
   4181c:	e0800117 	ldw	r2,4(fp)
   41820:	a00f883a 	mov	r7,r20
   41824:	d80d883a 	mov	r6,sp
   41828:	e00b883a 	mov	r5,fp
   4182c:	9809883a 	mov	r4,r19
   41830:	103ee83a 	callr	r2
   41834:	1000c81e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41838:	84000044 	addi	r16,r16,1
   4183c:	0000f306 	br	41c0c <___svfprintf_internal_r+0x4dc>
   41840:	217ff404 	addi	r5,r4,-48
   41844:	29403fcc 	andi	r5,r5,255
   41848:	00c00244 	movi	r3,9
   4184c:	19400736 	bltu	r3,r5,4186c <___svfprintf_internal_r+0x13c>
   41850:	00bfffc4 	movi	r2,-1
   41854:	88800226 	beq	r17,r2,41860 <___svfprintf_internal_r+0x130>
   41858:	8c4002a4 	muli	r17,r17,10
   4185c:	00000106 	br	41864 <___svfprintf_internal_r+0x134>
   41860:	0023883a 	mov	r17,zero
   41864:	2c63883a 	add	r17,r5,r17
   41868:	0000e206 	br	41bf4 <___svfprintf_internal_r+0x4c4>
   4186c:	01400b84 	movi	r5,46
   41870:	1140e426 	beq	r2,r5,41c04 <___svfprintf_internal_r+0x4d4>
   41874:	05000084 	movi	r20,2
   41878:	213ff404 	addi	r4,r4,-48
   4187c:	21003fcc 	andi	r4,r4,255
   41880:	00c00244 	movi	r3,9
   41884:	19000736 	bltu	r3,r4,418a4 <___svfprintf_internal_r+0x174>
   41888:	00bfffc4 	movi	r2,-1
   4188c:	90800226 	beq	r18,r2,41898 <___svfprintf_internal_r+0x168>
   41890:	948002a4 	muli	r18,r18,10
   41894:	00000106 	br	4189c <___svfprintf_internal_r+0x16c>
   41898:	0025883a 	mov	r18,zero
   4189c:	24a5883a 	add	r18,r4,r18
   418a0:	0000db06 	br	41c10 <___svfprintf_internal_r+0x4e0>
   418a4:	00c01b04 	movi	r3,108
   418a8:	10c0d426 	beq	r2,r3,41bfc <___svfprintf_internal_r+0x4cc>
   418ac:	013fffc4 	movi	r4,-1
   418b0:	91000226 	beq	r18,r4,418bc <___svfprintf_internal_r+0x18c>
   418b4:	d8000b15 	stw	zero,44(sp)
   418b8:	00000106 	br	418c0 <___svfprintf_internal_r+0x190>
   418bc:	04800044 	movi	r18,1
   418c0:	01001a44 	movi	r4,105
   418c4:	11001626 	beq	r2,r4,41920 <___svfprintf_internal_r+0x1f0>
   418c8:	20800916 	blt	r4,r2,418f0 <___svfprintf_internal_r+0x1c0>
   418cc:	010018c4 	movi	r4,99
   418d0:	11008a26 	beq	r2,r4,41afc <___svfprintf_internal_r+0x3cc>
   418d4:	01001904 	movi	r4,100
   418d8:	11001126 	beq	r2,r4,41920 <___svfprintf_internal_r+0x1f0>
   418dc:	01001604 	movi	r4,88
   418e0:	1100ca1e 	bne	r2,r4,41c0c <___svfprintf_internal_r+0x4dc>
   418e4:	00c00044 	movi	r3,1
   418e8:	d8c00e15 	stw	r3,56(sp)
   418ec:	00001406 	br	41940 <___svfprintf_internal_r+0x210>
   418f0:	01001cc4 	movi	r4,115
   418f4:	11009a26 	beq	r2,r4,41b60 <___svfprintf_internal_r+0x430>
   418f8:	20800416 	blt	r4,r2,4190c <___svfprintf_internal_r+0x1dc>
   418fc:	01001bc4 	movi	r4,111
   41900:	1100c21e 	bne	r2,r4,41c0c <___svfprintf_internal_r+0x4dc>
   41904:	05400204 	movi	r21,8
   41908:	00000e06 	br	41944 <___svfprintf_internal_r+0x214>
   4190c:	01001d44 	movi	r4,117
   41910:	11000c26 	beq	r2,r4,41944 <___svfprintf_internal_r+0x214>
   41914:	01001e04 	movi	r4,120
   41918:	11000926 	beq	r2,r4,41940 <___svfprintf_internal_r+0x210>
   4191c:	0000bb06 	br	41c0c <___svfprintf_internal_r+0x4dc>
   41920:	b5000104 	addi	r20,r22,4
   41924:	b8000726 	beq	r23,zero,41944 <___svfprintf_internal_r+0x214>
   41928:	dd000d15 	stw	r20,52(sp)
   4192c:	b5800017 	ldw	r22,0(r22)
   41930:	b000080e 	bge	r22,zero,41954 <___svfprintf_internal_r+0x224>
   41934:	05adc83a 	sub	r22,zero,r22
   41938:	02800044 	movi	r10,1
   4193c:	00000606 	br	41958 <___svfprintf_internal_r+0x228>
   41940:	05400404 	movi	r21,16
   41944:	b0c00104 	addi	r3,r22,4
   41948:	d8c00d15 	stw	r3,52(sp)
   4194c:	b5800017 	ldw	r22,0(r22)
   41950:	002f883a 	mov	r23,zero
   41954:	0015883a 	mov	r10,zero
   41958:	d829883a 	mov	r20,sp
   4195c:	b0001426 	beq	r22,zero,419b0 <___svfprintf_internal_r+0x280>
   41960:	b009883a 	mov	r4,r22
   41964:	a80b883a 	mov	r5,r21
   41968:	da801015 	stw	r10,64(sp)
   4196c:	0041dc00 	call	41dc0 <__udivsi3>
   41970:	1549383a 	mul	r4,r2,r21
   41974:	00c00244 	movi	r3,9
   41978:	da801017 	ldw	r10,64(sp)
   4197c:	b12dc83a 	sub	r22,r22,r4
   41980:	1d800216 	blt	r3,r22,4198c <___svfprintf_internal_r+0x25c>
   41984:	b5800c04 	addi	r22,r22,48
   41988:	00000506 	br	419a0 <___svfprintf_internal_r+0x270>
   4198c:	d8c00e17 	ldw	r3,56(sp)
   41990:	18000226 	beq	r3,zero,4199c <___svfprintf_internal_r+0x26c>
   41994:	b5800dc4 	addi	r22,r22,55
   41998:	00000106 	br	419a0 <___svfprintf_internal_r+0x270>
   4199c:	b58015c4 	addi	r22,r22,87
   419a0:	a5800005 	stb	r22,0(r20)
   419a4:	a5000044 	addi	r20,r20,1
   419a8:	102d883a 	mov	r22,r2
   419ac:	003feb06 	br	4195c <__alt_data_end+0xfffd0c1c>
   419b0:	a6c7c83a 	sub	r3,r20,sp
   419b4:	d8c00a15 	stw	r3,40(sp)
   419b8:	90c5c83a 	sub	r2,r18,r3
   419bc:	00800a0e 	bge	zero,r2,419e8 <___svfprintf_internal_r+0x2b8>
   419c0:	a085883a 	add	r2,r20,r2
   419c4:	01400c04 	movi	r5,48
   419c8:	d8c00917 	ldw	r3,36(sp)
   419cc:	a009883a 	mov	r4,r20
   419d0:	a0c0032e 	bgeu	r20,r3,419e0 <___svfprintf_internal_r+0x2b0>
   419d4:	a5000044 	addi	r20,r20,1
   419d8:	21400005 	stb	r5,0(r4)
   419dc:	a0bffa1e 	bne	r20,r2,419c8 <__alt_data_end+0xfffd0c88>
   419e0:	a6c7c83a 	sub	r3,r20,sp
   419e4:	d8c00a15 	stw	r3,40(sp)
   419e8:	d8c00a17 	ldw	r3,40(sp)
   419ec:	50d3883a 	add	r9,r10,r3
   419f0:	d8c00b17 	ldw	r3,44(sp)
   419f4:	8a6dc83a 	sub	r22,r17,r9
   419f8:	18001726 	beq	r3,zero,41a58 <___svfprintf_internal_r+0x328>
   419fc:	50000a26 	beq	r10,zero,41a28 <___svfprintf_internal_r+0x2f8>
   41a00:	00800b44 	movi	r2,45
   41a04:	d8800805 	stb	r2,32(sp)
   41a08:	e0800117 	ldw	r2,4(fp)
   41a0c:	01c00044 	movi	r7,1
   41a10:	d9800804 	addi	r6,sp,32
   41a14:	e00b883a 	mov	r5,fp
   41a18:	9809883a 	mov	r4,r19
   41a1c:	103ee83a 	callr	r2
   41a20:	10004d1e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41a24:	84000044 	addi	r16,r16,1
   41a28:	0580070e 	bge	zero,r22,41a48 <___svfprintf_internal_r+0x318>
   41a2c:	b00f883a 	mov	r7,r22
   41a30:	01800c04 	movi	r6,48
   41a34:	e00b883a 	mov	r5,fp
   41a38:	9809883a 	mov	r4,r19
   41a3c:	00416c40 	call	416c4 <print_repeat>
   41a40:	1000451e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41a44:	85a1883a 	add	r16,r16,r22
   41a48:	d8c00a17 	ldw	r3,40(sp)
   41a4c:	a013883a 	mov	r9,r20
   41a50:	1d2dc83a 	sub	r22,r3,r20
   41a54:	00002206 	br	41ae0 <___svfprintf_internal_r+0x3b0>
   41a58:	0580090e 	bge	zero,r22,41a80 <___svfprintf_internal_r+0x350>
   41a5c:	b00f883a 	mov	r7,r22
   41a60:	01800804 	movi	r6,32
   41a64:	e00b883a 	mov	r5,fp
   41a68:	9809883a 	mov	r4,r19
   41a6c:	da801015 	stw	r10,64(sp)
   41a70:	00416c40 	call	416c4 <print_repeat>
   41a74:	da801017 	ldw	r10,64(sp)
   41a78:	1000371e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41a7c:	85a1883a 	add	r16,r16,r22
   41a80:	503ff126 	beq	r10,zero,41a48 <__alt_data_end+0xfffd0d08>
   41a84:	00800b44 	movi	r2,45
   41a88:	d8800805 	stb	r2,32(sp)
   41a8c:	e0800117 	ldw	r2,4(fp)
   41a90:	01c00044 	movi	r7,1
   41a94:	d9800804 	addi	r6,sp,32
   41a98:	e00b883a 	mov	r5,fp
   41a9c:	9809883a 	mov	r4,r19
   41aa0:	103ee83a 	callr	r2
   41aa4:	10002c1e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41aa8:	84000044 	addi	r16,r16,1
   41aac:	003fe606 	br	41a48 <__alt_data_end+0xfffd0d08>
   41ab0:	4a7fffc4 	addi	r9,r9,-1
   41ab4:	48800003 	ldbu	r2,0(r9)
   41ab8:	01c00044 	movi	r7,1
   41abc:	d9800804 	addi	r6,sp,32
   41ac0:	d8800805 	stb	r2,32(sp)
   41ac4:	e0800117 	ldw	r2,4(fp)
   41ac8:	e00b883a 	mov	r5,fp
   41acc:	da401015 	stw	r9,64(sp)
   41ad0:	9809883a 	mov	r4,r19
   41ad4:	103ee83a 	callr	r2
   41ad8:	da401017 	ldw	r9,64(sp)
   41adc:	10001e1e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41ae0:	8245c83a 	sub	r2,r16,r9
   41ae4:	4d89883a 	add	r4,r9,r22
   41ae8:	a085883a 	add	r2,r20,r2
   41aec:	013ff016 	blt	zero,r4,41ab0 <__alt_data_end+0xfffd0d70>
   41af0:	1021883a 	mov	r16,r2
   41af4:	dd800d17 	ldw	r22,52(sp)
   41af8:	00004406 	br	41c0c <___svfprintf_internal_r+0x4dc>
   41afc:	00800044 	movi	r2,1
   41b00:	1440080e 	bge	r2,r17,41b24 <___svfprintf_internal_r+0x3f4>
   41b04:	8d3fffc4 	addi	r20,r17,-1
   41b08:	a00f883a 	mov	r7,r20
   41b0c:	01800804 	movi	r6,32
   41b10:	e00b883a 	mov	r5,fp
   41b14:	9809883a 	mov	r4,r19
   41b18:	00416c40 	call	416c4 <print_repeat>
   41b1c:	10000e1e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41b20:	8521883a 	add	r16,r16,r20
   41b24:	b0800017 	ldw	r2,0(r22)
   41b28:	01c00044 	movi	r7,1
   41b2c:	d80d883a 	mov	r6,sp
   41b30:	d8800005 	stb	r2,0(sp)
   41b34:	e0800117 	ldw	r2,4(fp)
   41b38:	e00b883a 	mov	r5,fp
   41b3c:	9809883a 	mov	r4,r19
   41b40:	b5000104 	addi	r20,r22,4
   41b44:	103ee83a 	callr	r2
   41b48:	1000031e 	bne	r2,zero,41b58 <___svfprintf_internal_r+0x428>
   41b4c:	84000044 	addi	r16,r16,1
   41b50:	a02d883a 	mov	r22,r20
   41b54:	00002d06 	br	41c0c <___svfprintf_internal_r+0x4dc>
   41b58:	00bfffc4 	movi	r2,-1
   41b5c:	00003106 	br	41c24 <___svfprintf_internal_r+0x4f4>
   41b60:	b5000017 	ldw	r20,0(r22)
   41b64:	b0c00104 	addi	r3,r22,4
   41b68:	d8c00a15 	stw	r3,40(sp)
   41b6c:	a009883a 	mov	r4,r20
   41b70:	0040d9c0 	call	40d9c <strlen>
   41b74:	8893c83a 	sub	r9,r17,r2
   41b78:	102d883a 	mov	r22,r2
   41b7c:	0240090e 	bge	zero,r9,41ba4 <___svfprintf_internal_r+0x474>
   41b80:	480f883a 	mov	r7,r9
   41b84:	01800804 	movi	r6,32
   41b88:	e00b883a 	mov	r5,fp
   41b8c:	9809883a 	mov	r4,r19
   41b90:	da401015 	stw	r9,64(sp)
   41b94:	00416c40 	call	416c4 <print_repeat>
   41b98:	da401017 	ldw	r9,64(sp)
   41b9c:	103fee1e 	bne	r2,zero,41b58 <__alt_data_end+0xfffd0e18>
   41ba0:	8261883a 	add	r16,r16,r9
   41ba4:	e0800117 	ldw	r2,4(fp)
   41ba8:	b00f883a 	mov	r7,r22
   41bac:	a00d883a 	mov	r6,r20
   41bb0:	e00b883a 	mov	r5,fp
   41bb4:	9809883a 	mov	r4,r19
   41bb8:	103ee83a 	callr	r2
   41bbc:	103fe61e 	bne	r2,zero,41b58 <__alt_data_end+0xfffd0e18>
   41bc0:	85a1883a 	add	r16,r16,r22
   41bc4:	dd800a17 	ldw	r22,40(sp)
   41bc8:	00001006 	br	41c0c <___svfprintf_internal_r+0x4dc>
   41bcc:	05c00044 	movi	r23,1
   41bd0:	04bfffc4 	movi	r18,-1
   41bd4:	d8000e15 	stw	zero,56(sp)
   41bd8:	05400284 	movi	r21,10
   41bdc:	9023883a 	mov	r17,r18
   41be0:	d8000c15 	stw	zero,48(sp)
   41be4:	d8000b15 	stw	zero,44(sp)
   41be8:	b829883a 	mov	r20,r23
   41bec:	00000806 	br	41c10 <___svfprintf_internal_r+0x4e0>
   41bf0:	dd000b15 	stw	r20,44(sp)
   41bf4:	05000084 	movi	r20,2
   41bf8:	00000506 	br	41c10 <___svfprintf_internal_r+0x4e0>
   41bfc:	00c00044 	movi	r3,1
   41c00:	d8c00c15 	stw	r3,48(sp)
   41c04:	050000c4 	movi	r20,3
   41c08:	00000106 	br	41c10 <___svfprintf_internal_r+0x4e0>
   41c0c:	0029883a 	mov	r20,zero
   41c10:	d8c00f17 	ldw	r3,60(sp)
   41c14:	18c00044 	addi	r3,r3,1
   41c18:	d8c00f15 	stw	r3,60(sp)
   41c1c:	003ede06 	br	41798 <__alt_data_end+0xfffd0a58>
   41c20:	8005883a 	mov	r2,r16
   41c24:	dfc01a17 	ldw	ra,104(sp)
   41c28:	df001917 	ldw	fp,100(sp)
   41c2c:	ddc01817 	ldw	r23,96(sp)
   41c30:	dd801717 	ldw	r22,92(sp)
   41c34:	dd401617 	ldw	r21,88(sp)
   41c38:	dd001517 	ldw	r20,84(sp)
   41c3c:	dcc01417 	ldw	r19,80(sp)
   41c40:	dc801317 	ldw	r18,76(sp)
   41c44:	dc401217 	ldw	r17,72(sp)
   41c48:	dc001117 	ldw	r16,68(sp)
   41c4c:	dec01b04 	addi	sp,sp,108
   41c50:	f800283a 	ret

00041c54 <__vfprintf_internal_unused>:
   41c54:	00800134 	movhi	r2,4
   41c58:	10950104 	addi	r2,r2,21508
   41c5c:	300f883a 	mov	r7,r6
   41c60:	280d883a 	mov	r6,r5
   41c64:	200b883a 	mov	r5,r4
   41c68:	11000017 	ldw	r4,0(r2)
   41c6c:	00417301 	jmpi	41730 <___svfprintf_internal_r>

00041c70 <_write_r>:
   41c70:	defffd04 	addi	sp,sp,-12
   41c74:	dc000015 	stw	r16,0(sp)
   41c78:	04000134 	movhi	r16,4
   41c7c:	dc400115 	stw	r17,4(sp)
   41c80:	841a0904 	addi	r16,r16,26660
   41c84:	2023883a 	mov	r17,r4
   41c88:	2809883a 	mov	r4,r5
   41c8c:	300b883a 	mov	r5,r6
   41c90:	380d883a 	mov	r6,r7
   41c94:	dfc00215 	stw	ra,8(sp)
   41c98:	80000015 	stw	zero,0(r16)
   41c9c:	00420680 	call	42068 <write>
   41ca0:	00ffffc4 	movi	r3,-1
   41ca4:	10c0031e 	bne	r2,r3,41cb4 <_write_r+0x44>
   41ca8:	80c00017 	ldw	r3,0(r16)
   41cac:	18000126 	beq	r3,zero,41cb4 <_write_r+0x44>
   41cb0:	88c00015 	stw	r3,0(r17)
   41cb4:	dfc00217 	ldw	ra,8(sp)
   41cb8:	dc400117 	ldw	r17,4(sp)
   41cbc:	dc000017 	ldw	r16,0(sp)
   41cc0:	dec00304 	addi	sp,sp,12
   41cc4:	f800283a 	ret

00041cc8 <__divsi3>:
   41cc8:	20001b16 	blt	r4,zero,41d38 <__divsi3+0x70>
   41ccc:	000f883a 	mov	r7,zero
   41cd0:	28001616 	blt	r5,zero,41d2c <__divsi3+0x64>
   41cd4:	200d883a 	mov	r6,r4
   41cd8:	29001a2e 	bgeu	r5,r4,41d44 <__divsi3+0x7c>
   41cdc:	00800804 	movi	r2,32
   41ce0:	00c00044 	movi	r3,1
   41ce4:	00000106 	br	41cec <__divsi3+0x24>
   41ce8:	10000d26 	beq	r2,zero,41d20 <__divsi3+0x58>
   41cec:	294b883a 	add	r5,r5,r5
   41cf0:	10bfffc4 	addi	r2,r2,-1
   41cf4:	18c7883a 	add	r3,r3,r3
   41cf8:	293ffb36 	bltu	r5,r4,41ce8 <__alt_data_end+0xfffd0fa8>
   41cfc:	0005883a 	mov	r2,zero
   41d00:	18000726 	beq	r3,zero,41d20 <__divsi3+0x58>
   41d04:	0005883a 	mov	r2,zero
   41d08:	31400236 	bltu	r6,r5,41d14 <__divsi3+0x4c>
   41d0c:	314dc83a 	sub	r6,r6,r5
   41d10:	10c4b03a 	or	r2,r2,r3
   41d14:	1806d07a 	srli	r3,r3,1
   41d18:	280ad07a 	srli	r5,r5,1
   41d1c:	183ffa1e 	bne	r3,zero,41d08 <__alt_data_end+0xfffd0fc8>
   41d20:	38000126 	beq	r7,zero,41d28 <__divsi3+0x60>
   41d24:	0085c83a 	sub	r2,zero,r2
   41d28:	f800283a 	ret
   41d2c:	014bc83a 	sub	r5,zero,r5
   41d30:	39c0005c 	xori	r7,r7,1
   41d34:	003fe706 	br	41cd4 <__alt_data_end+0xfffd0f94>
   41d38:	0109c83a 	sub	r4,zero,r4
   41d3c:	01c00044 	movi	r7,1
   41d40:	003fe306 	br	41cd0 <__alt_data_end+0xfffd0f90>
   41d44:	00c00044 	movi	r3,1
   41d48:	003fee06 	br	41d04 <__alt_data_end+0xfffd0fc4>

00041d4c <__modsi3>:
   41d4c:	20001716 	blt	r4,zero,41dac <__modsi3+0x60>
   41d50:	000f883a 	mov	r7,zero
   41d54:	2005883a 	mov	r2,r4
   41d58:	28001216 	blt	r5,zero,41da4 <__modsi3+0x58>
   41d5c:	2900162e 	bgeu	r5,r4,41db8 <__modsi3+0x6c>
   41d60:	01800804 	movi	r6,32
   41d64:	00c00044 	movi	r3,1
   41d68:	00000106 	br	41d70 <__modsi3+0x24>
   41d6c:	30000a26 	beq	r6,zero,41d98 <__modsi3+0x4c>
   41d70:	294b883a 	add	r5,r5,r5
   41d74:	31bfffc4 	addi	r6,r6,-1
   41d78:	18c7883a 	add	r3,r3,r3
   41d7c:	293ffb36 	bltu	r5,r4,41d6c <__alt_data_end+0xfffd102c>
   41d80:	18000526 	beq	r3,zero,41d98 <__modsi3+0x4c>
   41d84:	1806d07a 	srli	r3,r3,1
   41d88:	11400136 	bltu	r2,r5,41d90 <__modsi3+0x44>
   41d8c:	1145c83a 	sub	r2,r2,r5
   41d90:	280ad07a 	srli	r5,r5,1
   41d94:	183ffb1e 	bne	r3,zero,41d84 <__alt_data_end+0xfffd1044>
   41d98:	38000126 	beq	r7,zero,41da0 <__modsi3+0x54>
   41d9c:	0085c83a 	sub	r2,zero,r2
   41da0:	f800283a 	ret
   41da4:	014bc83a 	sub	r5,zero,r5
   41da8:	003fec06 	br	41d5c <__alt_data_end+0xfffd101c>
   41dac:	0109c83a 	sub	r4,zero,r4
   41db0:	01c00044 	movi	r7,1
   41db4:	003fe706 	br	41d54 <__alt_data_end+0xfffd1014>
   41db8:	00c00044 	movi	r3,1
   41dbc:	003ff106 	br	41d84 <__alt_data_end+0xfffd1044>

00041dc0 <__udivsi3>:
   41dc0:	200d883a 	mov	r6,r4
   41dc4:	2900152e 	bgeu	r5,r4,41e1c <__udivsi3+0x5c>
   41dc8:	28001416 	blt	r5,zero,41e1c <__udivsi3+0x5c>
   41dcc:	00800804 	movi	r2,32
   41dd0:	00c00044 	movi	r3,1
   41dd4:	00000206 	br	41de0 <__udivsi3+0x20>
   41dd8:	10000e26 	beq	r2,zero,41e14 <__udivsi3+0x54>
   41ddc:	28000516 	blt	r5,zero,41df4 <__udivsi3+0x34>
   41de0:	294b883a 	add	r5,r5,r5
   41de4:	10bfffc4 	addi	r2,r2,-1
   41de8:	18c7883a 	add	r3,r3,r3
   41dec:	293ffa36 	bltu	r5,r4,41dd8 <__alt_data_end+0xfffd1098>
   41df0:	18000826 	beq	r3,zero,41e14 <__udivsi3+0x54>
   41df4:	0005883a 	mov	r2,zero
   41df8:	31400236 	bltu	r6,r5,41e04 <__udivsi3+0x44>
   41dfc:	314dc83a 	sub	r6,r6,r5
   41e00:	10c4b03a 	or	r2,r2,r3
   41e04:	1806d07a 	srli	r3,r3,1
   41e08:	280ad07a 	srli	r5,r5,1
   41e0c:	183ffa1e 	bne	r3,zero,41df8 <__alt_data_end+0xfffd10b8>
   41e10:	f800283a 	ret
   41e14:	0005883a 	mov	r2,zero
   41e18:	f800283a 	ret
   41e1c:	00c00044 	movi	r3,1
   41e20:	003ff406 	br	41df4 <__alt_data_end+0xfffd10b4>

00041e24 <__umodsi3>:
   41e24:	2005883a 	mov	r2,r4
   41e28:	2900122e 	bgeu	r5,r4,41e74 <__umodsi3+0x50>
   41e2c:	28001116 	blt	r5,zero,41e74 <__umodsi3+0x50>
   41e30:	01800804 	movi	r6,32
   41e34:	00c00044 	movi	r3,1
   41e38:	00000206 	br	41e44 <__umodsi3+0x20>
   41e3c:	30000c26 	beq	r6,zero,41e70 <__umodsi3+0x4c>
   41e40:	28000516 	blt	r5,zero,41e58 <__umodsi3+0x34>
   41e44:	294b883a 	add	r5,r5,r5
   41e48:	31bfffc4 	addi	r6,r6,-1
   41e4c:	18c7883a 	add	r3,r3,r3
   41e50:	293ffa36 	bltu	r5,r4,41e3c <__alt_data_end+0xfffd10fc>
   41e54:	18000626 	beq	r3,zero,41e70 <__umodsi3+0x4c>
   41e58:	1806d07a 	srli	r3,r3,1
   41e5c:	11400136 	bltu	r2,r5,41e64 <__umodsi3+0x40>
   41e60:	1145c83a 	sub	r2,r2,r5
   41e64:	280ad07a 	srli	r5,r5,1
   41e68:	183ffb1e 	bne	r3,zero,41e58 <__alt_data_end+0xfffd1118>
   41e6c:	f800283a 	ret
   41e70:	f800283a 	ret
   41e74:	00c00044 	movi	r3,1
   41e78:	003ff706 	br	41e58 <__alt_data_end+0xfffd1118>

00041e7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   41e7c:	defffc04 	addi	sp,sp,-16
   41e80:	df000315 	stw	fp,12(sp)
   41e84:	df000304 	addi	fp,sp,12
   41e88:	e13ffd15 	stw	r4,-12(fp)
   41e8c:	e17ffe15 	stw	r5,-8(fp)
   41e90:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   41e94:	e0fffe17 	ldw	r3,-8(fp)
   41e98:	e0bffd17 	ldw	r2,-12(fp)
   41e9c:	18800c26 	beq	r3,r2,41ed0 <alt_load_section+0x54>
  {
    while( to != end )
   41ea0:	00000806 	br	41ec4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   41ea4:	e0bffe17 	ldw	r2,-8(fp)
   41ea8:	10c00104 	addi	r3,r2,4
   41eac:	e0fffe15 	stw	r3,-8(fp)
   41eb0:	e0fffd17 	ldw	r3,-12(fp)
   41eb4:	19000104 	addi	r4,r3,4
   41eb8:	e13ffd15 	stw	r4,-12(fp)
   41ebc:	18c00017 	ldw	r3,0(r3)
   41ec0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   41ec4:	e0fffe17 	ldw	r3,-8(fp)
   41ec8:	e0bfff17 	ldw	r2,-4(fp)
   41ecc:	18bff51e 	bne	r3,r2,41ea4 <__alt_data_end+0xfffd1164>
    {
      *to++ = *from++;
    }
  }
}
   41ed0:	0001883a 	nop
   41ed4:	e037883a 	mov	sp,fp
   41ed8:	df000017 	ldw	fp,0(sp)
   41edc:	dec00104 	addi	sp,sp,4
   41ee0:	f800283a 	ret

00041ee4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   41ee4:	defffe04 	addi	sp,sp,-8
   41ee8:	dfc00115 	stw	ra,4(sp)
   41eec:	df000015 	stw	fp,0(sp)
   41ef0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   41ef4:	01800134 	movhi	r6,4
   41ef8:	31950b04 	addi	r6,r6,21548
   41efc:	01400134 	movhi	r5,4
   41f00:	29501204 	addi	r5,r5,16456
   41f04:	01000134 	movhi	r4,4
   41f08:	21150b04 	addi	r4,r4,21548
   41f0c:	0041e7c0 	call	41e7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   41f10:	01800134 	movhi	r6,4
   41f14:	31809104 	addi	r6,r6,580
   41f18:	01400134 	movhi	r5,4
   41f1c:	29400804 	addi	r5,r5,32
   41f20:	01000134 	movhi	r4,4
   41f24:	21000804 	addi	r4,r4,32
   41f28:	0041e7c0 	call	41e7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   41f2c:	01800134 	movhi	r6,4
   41f30:	31901204 	addi	r6,r6,16456
   41f34:	01400134 	movhi	r5,4
   41f38:	294fcc04 	addi	r5,r5,16176
   41f3c:	01000134 	movhi	r4,4
   41f40:	210fcc04 	addi	r4,r4,16176
   41f44:	0041e7c0 	call	41e7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   41f48:	0042ef40 	call	42ef4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   41f4c:	004305c0 	call	4305c <alt_icache_flush_all>
}
   41f50:	0001883a 	nop
   41f54:	e037883a 	mov	sp,fp
   41f58:	dfc00117 	ldw	ra,4(sp)
   41f5c:	df000017 	ldw	fp,0(sp)
   41f60:	dec00204 	addi	sp,sp,8
   41f64:	f800283a 	ret

00041f68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   41f68:	defffd04 	addi	sp,sp,-12
   41f6c:	dfc00215 	stw	ra,8(sp)
   41f70:	df000115 	stw	fp,4(sp)
   41f74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   41f78:	0009883a 	mov	r4,zero
   41f7c:	00421980 	call	42198 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   41f80:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   41f84:	00421d00 	call	421d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   41f88:	01800134 	movhi	r6,4
   41f8c:	31900504 	addi	r6,r6,16404
   41f90:	01400134 	movhi	r5,4
   41f94:	29500504 	addi	r5,r5,16404
   41f98:	01000134 	movhi	r4,4
   41f9c:	21100504 	addi	r4,r4,16404
   41fa0:	00434240 	call	43424 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   41fa4:	d0a50b17 	ldw	r2,-27604(gp)
   41fa8:	d0e50c17 	ldw	r3,-27600(gp)
   41fac:	d1250d17 	ldw	r4,-27596(gp)
   41fb0:	200d883a 	mov	r6,r4
   41fb4:	180b883a 	mov	r5,r3
   41fb8:	1009883a 	mov	r4,r2
   41fbc:	0040c640 	call	40c64 <main>
   41fc0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   41fc4:	01000044 	movi	r4,1
   41fc8:	0042e240 	call	42e24 <close>
  exit (result);
   41fcc:	e13fff17 	ldw	r4,-4(fp)
   41fd0:	0043cc40 	call	43cc4 <exit>

00041fd4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   41fd4:	defffd04 	addi	sp,sp,-12
   41fd8:	dfc00215 	stw	ra,8(sp)
   41fdc:	df000115 	stw	fp,4(sp)
   41fe0:	df000104 	addi	fp,sp,4
   41fe4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   41fe8:	00800134 	movhi	r2,4
   41fec:	10950104 	addi	r2,r2,21508
   41ff0:	10800017 	ldw	r2,0(r2)
   41ff4:	10800217 	ldw	r2,8(r2)
   41ff8:	100b883a 	mov	r5,r2
   41ffc:	e13fff17 	ldw	r4,-4(fp)
   42000:	0043ce40 	call	43ce4 <fputs>
#endif
#endif
}
   42004:	e037883a 	mov	sp,fp
   42008:	dfc00117 	ldw	ra,4(sp)
   4200c:	df000017 	ldw	fp,0(sp)
   42010:	dec00204 	addi	sp,sp,8
   42014:	f800283a 	ret

00042018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42018:	defffe04 	addi	sp,sp,-8
   4201c:	dfc00115 	stw	ra,4(sp)
   42020:	df000015 	stw	fp,0(sp)
   42024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42028:	00800134 	movhi	r2,4
   4202c:	10950704 	addi	r2,r2,21532
   42030:	10800017 	ldw	r2,0(r2)
   42034:	10000526 	beq	r2,zero,4204c <alt_get_errno+0x34>
   42038:	00800134 	movhi	r2,4
   4203c:	10950704 	addi	r2,r2,21532
   42040:	10800017 	ldw	r2,0(r2)
   42044:	103ee83a 	callr	r2
   42048:	00000206 	br	42054 <alt_get_errno+0x3c>
   4204c:	00800134 	movhi	r2,4
   42050:	109a0904 	addi	r2,r2,26660
}
   42054:	e037883a 	mov	sp,fp
   42058:	dfc00117 	ldw	ra,4(sp)
   4205c:	df000017 	ldw	fp,0(sp)
   42060:	dec00204 	addi	sp,sp,8
   42064:	f800283a 	ret

00042068 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   42068:	defff904 	addi	sp,sp,-28
   4206c:	dfc00615 	stw	ra,24(sp)
   42070:	df000515 	stw	fp,20(sp)
   42074:	df000504 	addi	fp,sp,20
   42078:	e13ffd15 	stw	r4,-12(fp)
   4207c:	e17ffe15 	stw	r5,-8(fp)
   42080:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42084:	e0bffd17 	ldw	r2,-12(fp)
   42088:	10000616 	blt	r2,zero,420a4 <write+0x3c>
   4208c:	e0bffd17 	ldw	r2,-12(fp)
   42090:	10c00324 	muli	r3,r2,12
   42094:	00800134 	movhi	r2,4
   42098:	10949f04 	addi	r2,r2,21116
   4209c:	1885883a 	add	r2,r3,r2
   420a0:	00000106 	br	420a8 <write+0x40>
   420a4:	0005883a 	mov	r2,zero
   420a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   420ac:	e0bffb17 	ldw	r2,-20(fp)
   420b0:	10002126 	beq	r2,zero,42138 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   420b4:	e0bffb17 	ldw	r2,-20(fp)
   420b8:	10800217 	ldw	r2,8(r2)
   420bc:	108000cc 	andi	r2,r2,3
   420c0:	10001826 	beq	r2,zero,42124 <write+0xbc>
   420c4:	e0bffb17 	ldw	r2,-20(fp)
   420c8:	10800017 	ldw	r2,0(r2)
   420cc:	10800617 	ldw	r2,24(r2)
   420d0:	10001426 	beq	r2,zero,42124 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   420d4:	e0bffb17 	ldw	r2,-20(fp)
   420d8:	10800017 	ldw	r2,0(r2)
   420dc:	10800617 	ldw	r2,24(r2)
   420e0:	e0ffff17 	ldw	r3,-4(fp)
   420e4:	180d883a 	mov	r6,r3
   420e8:	e17ffe17 	ldw	r5,-8(fp)
   420ec:	e13ffb17 	ldw	r4,-20(fp)
   420f0:	103ee83a 	callr	r2
   420f4:	e0bffc15 	stw	r2,-16(fp)
   420f8:	e0bffc17 	ldw	r2,-16(fp)
   420fc:	1000070e 	bge	r2,zero,4211c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   42100:	00420180 	call	42018 <alt_get_errno>
   42104:	1007883a 	mov	r3,r2
   42108:	e0bffc17 	ldw	r2,-16(fp)
   4210c:	0085c83a 	sub	r2,zero,r2
   42110:	18800015 	stw	r2,0(r3)
        return -1;
   42114:	00bfffc4 	movi	r2,-1
   42118:	00000c06 	br	4214c <write+0xe4>
      }
      return rval;
   4211c:	e0bffc17 	ldw	r2,-16(fp)
   42120:	00000a06 	br	4214c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   42124:	00420180 	call	42018 <alt_get_errno>
   42128:	1007883a 	mov	r3,r2
   4212c:	00800344 	movi	r2,13
   42130:	18800015 	stw	r2,0(r3)
   42134:	00000406 	br	42148 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   42138:	00420180 	call	42018 <alt_get_errno>
   4213c:	1007883a 	mov	r3,r2
   42140:	00801444 	movi	r2,81
   42144:	18800015 	stw	r2,0(r3)
  }
  return -1;
   42148:	00bfffc4 	movi	r2,-1
}
   4214c:	e037883a 	mov	sp,fp
   42150:	dfc00117 	ldw	ra,4(sp)
   42154:	df000017 	ldw	fp,0(sp)
   42158:	dec00204 	addi	sp,sp,8
   4215c:	f800283a 	ret

00042160 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   42160:	defffd04 	addi	sp,sp,-12
   42164:	dfc00215 	stw	ra,8(sp)
   42168:	df000115 	stw	fp,4(sp)
   4216c:	df000104 	addi	fp,sp,4
   42170:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   42174:	01400134 	movhi	r5,4
   42178:	29550404 	addi	r5,r5,21520
   4217c:	e13fff17 	ldw	r4,-4(fp)
   42180:	0042fb80 	call	42fb8 <alt_dev_llist_insert>
}
   42184:	e037883a 	mov	sp,fp
   42188:	dfc00117 	ldw	ra,4(sp)
   4218c:	df000017 	ldw	fp,0(sp)
   42190:	dec00204 	addi	sp,sp,8
   42194:	f800283a 	ret

00042198 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   42198:	defffd04 	addi	sp,sp,-12
   4219c:	dfc00215 	stw	ra,8(sp)
   421a0:	df000115 	stw	fp,4(sp)
   421a4:	df000104 	addi	fp,sp,4
   421a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   421ac:	004391c0 	call	4391c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   421b0:	00800044 	movi	r2,1
   421b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   421b8:	0001883a 	nop
   421bc:	e037883a 	mov	sp,fp
   421c0:	dfc00117 	ldw	ra,4(sp)
   421c4:	df000017 	ldw	fp,0(sp)
   421c8:	dec00204 	addi	sp,sp,8
   421cc:	f800283a 	ret

000421d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   421d0:	defffe04 	addi	sp,sp,-8
   421d4:	dfc00115 	stw	ra,4(sp)
   421d8:	df000015 	stw	fp,0(sp)
   421dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   421e0:	000d883a 	mov	r6,zero
   421e4:	000b883a 	mov	r5,zero
   421e8:	01000134 	movhi	r4,4
   421ec:	21108704 	addi	r4,r4,16924
   421f0:	00423800 	call	42380 <altera_avalon_jtag_uart_init>
   421f4:	01000134 	movhi	r4,4
   421f8:	21107d04 	addi	r4,r4,16884
   421fc:	00421600 	call	42160 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   42200:	0001883a 	nop
}
   42204:	0001883a 	nop
   42208:	e037883a 	mov	sp,fp
   4220c:	dfc00117 	ldw	ra,4(sp)
   42210:	df000017 	ldw	fp,0(sp)
   42214:	dec00204 	addi	sp,sp,8
   42218:	f800283a 	ret

0004221c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4221c:	defffa04 	addi	sp,sp,-24
   42220:	dfc00515 	stw	ra,20(sp)
   42224:	df000415 	stw	fp,16(sp)
   42228:	df000404 	addi	fp,sp,16
   4222c:	e13ffd15 	stw	r4,-12(fp)
   42230:	e17ffe15 	stw	r5,-8(fp)
   42234:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   42238:	e0bffd17 	ldw	r2,-12(fp)
   4223c:	10800017 	ldw	r2,0(r2)
   42240:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   42244:	e0bffc17 	ldw	r2,-16(fp)
   42248:	10c00a04 	addi	r3,r2,40
   4224c:	e0bffd17 	ldw	r2,-12(fp)
   42250:	10800217 	ldw	r2,8(r2)
   42254:	100f883a 	mov	r7,r2
   42258:	e1bfff17 	ldw	r6,-4(fp)
   4225c:	e17ffe17 	ldw	r5,-8(fp)
   42260:	1809883a 	mov	r4,r3
   42264:	00428540 	call	42854 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   42268:	e037883a 	mov	sp,fp
   4226c:	dfc00117 	ldw	ra,4(sp)
   42270:	df000017 	ldw	fp,0(sp)
   42274:	dec00204 	addi	sp,sp,8
   42278:	f800283a 	ret

0004227c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4227c:	defffa04 	addi	sp,sp,-24
   42280:	dfc00515 	stw	ra,20(sp)
   42284:	df000415 	stw	fp,16(sp)
   42288:	df000404 	addi	fp,sp,16
   4228c:	e13ffd15 	stw	r4,-12(fp)
   42290:	e17ffe15 	stw	r5,-8(fp)
   42294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   42298:	e0bffd17 	ldw	r2,-12(fp)
   4229c:	10800017 	ldw	r2,0(r2)
   422a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   422a4:	e0bffc17 	ldw	r2,-16(fp)
   422a8:	10c00a04 	addi	r3,r2,40
   422ac:	e0bffd17 	ldw	r2,-12(fp)
   422b0:	10800217 	ldw	r2,8(r2)
   422b4:	100f883a 	mov	r7,r2
   422b8:	e1bfff17 	ldw	r6,-4(fp)
   422bc:	e17ffe17 	ldw	r5,-8(fp)
   422c0:	1809883a 	mov	r4,r3
   422c4:	0042a700 	call	42a70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   422c8:	e037883a 	mov	sp,fp
   422cc:	dfc00117 	ldw	ra,4(sp)
   422d0:	df000017 	ldw	fp,0(sp)
   422d4:	dec00204 	addi	sp,sp,8
   422d8:	f800283a 	ret

000422dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   422dc:	defffc04 	addi	sp,sp,-16
   422e0:	dfc00315 	stw	ra,12(sp)
   422e4:	df000215 	stw	fp,8(sp)
   422e8:	df000204 	addi	fp,sp,8
   422ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   422f0:	e0bfff17 	ldw	r2,-4(fp)
   422f4:	10800017 	ldw	r2,0(r2)
   422f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   422fc:	e0bffe17 	ldw	r2,-8(fp)
   42300:	10c00a04 	addi	r3,r2,40
   42304:	e0bfff17 	ldw	r2,-4(fp)
   42308:	10800217 	ldw	r2,8(r2)
   4230c:	100b883a 	mov	r5,r2
   42310:	1809883a 	mov	r4,r3
   42314:	00426fc0 	call	426fc <altera_avalon_jtag_uart_close>
}
   42318:	e037883a 	mov	sp,fp
   4231c:	dfc00117 	ldw	ra,4(sp)
   42320:	df000017 	ldw	fp,0(sp)
   42324:	dec00204 	addi	sp,sp,8
   42328:	f800283a 	ret

0004232c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4232c:	defffa04 	addi	sp,sp,-24
   42330:	dfc00515 	stw	ra,20(sp)
   42334:	df000415 	stw	fp,16(sp)
   42338:	df000404 	addi	fp,sp,16
   4233c:	e13ffd15 	stw	r4,-12(fp)
   42340:	e17ffe15 	stw	r5,-8(fp)
   42344:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   42348:	e0bffd17 	ldw	r2,-12(fp)
   4234c:	10800017 	ldw	r2,0(r2)
   42350:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   42354:	e0bffc17 	ldw	r2,-16(fp)
   42358:	10800a04 	addi	r2,r2,40
   4235c:	e1bfff17 	ldw	r6,-4(fp)
   42360:	e17ffe17 	ldw	r5,-8(fp)
   42364:	1009883a 	mov	r4,r2
   42368:	00427640 	call	42764 <altera_avalon_jtag_uart_ioctl>
}
   4236c:	e037883a 	mov	sp,fp
   42370:	dfc00117 	ldw	ra,4(sp)
   42374:	df000017 	ldw	fp,0(sp)
   42378:	dec00204 	addi	sp,sp,8
   4237c:	f800283a 	ret

00042380 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   42380:	defffa04 	addi	sp,sp,-24
   42384:	dfc00515 	stw	ra,20(sp)
   42388:	df000415 	stw	fp,16(sp)
   4238c:	df000404 	addi	fp,sp,16
   42390:	e13ffd15 	stw	r4,-12(fp)
   42394:	e17ffe15 	stw	r5,-8(fp)
   42398:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4239c:	e0bffd17 	ldw	r2,-12(fp)
   423a0:	00c00044 	movi	r3,1
   423a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   423a8:	e0bffd17 	ldw	r2,-12(fp)
   423ac:	10800017 	ldw	r2,0(r2)
   423b0:	10800104 	addi	r2,r2,4
   423b4:	1007883a 	mov	r3,r2
   423b8:	e0bffd17 	ldw	r2,-12(fp)
   423bc:	10800817 	ldw	r2,32(r2)
   423c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   423c4:	e0bffe17 	ldw	r2,-8(fp)
   423c8:	e0ffff17 	ldw	r3,-4(fp)
   423cc:	d8000015 	stw	zero,0(sp)
   423d0:	e1fffd17 	ldw	r7,-12(fp)
   423d4:	01800134 	movhi	r6,4
   423d8:	31891204 	addi	r6,r6,9288
   423dc:	180b883a 	mov	r5,r3
   423e0:	1009883a 	mov	r4,r2
   423e4:	00430900 	call	43090 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   423e8:	e0bffd17 	ldw	r2,-12(fp)
   423ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   423f0:	e0bffd17 	ldw	r2,-12(fp)
   423f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   423f8:	00800134 	movhi	r2,4
   423fc:	109a0e04 	addi	r2,r2,26680
   42400:	10800017 	ldw	r2,0(r2)
   42404:	e1fffd17 	ldw	r7,-12(fp)
   42408:	01800134 	movhi	r6,4
   4240c:	31899504 	addi	r6,r6,9812
   42410:	100b883a 	mov	r5,r2
   42414:	1809883a 	mov	r4,r3
   42418:	0042c940 	call	42c94 <alt_alarm_start>
   4241c:	1000040e 	bge	r2,zero,42430 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   42420:	e0fffd17 	ldw	r3,-12(fp)
   42424:	00a00034 	movhi	r2,32768
   42428:	10bfffc4 	addi	r2,r2,-1
   4242c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   42430:	0001883a 	nop
   42434:	e037883a 	mov	sp,fp
   42438:	dfc00117 	ldw	ra,4(sp)
   4243c:	df000017 	ldw	fp,0(sp)
   42440:	dec00204 	addi	sp,sp,8
   42444:	f800283a 	ret

00042448 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   42448:	defff804 	addi	sp,sp,-32
   4244c:	df000715 	stw	fp,28(sp)
   42450:	df000704 	addi	fp,sp,28
   42454:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   42458:	e0bfff17 	ldw	r2,-4(fp)
   4245c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   42460:	e0bffb17 	ldw	r2,-20(fp)
   42464:	10800017 	ldw	r2,0(r2)
   42468:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4246c:	e0bffc17 	ldw	r2,-16(fp)
   42470:	10800104 	addi	r2,r2,4
   42474:	10800037 	ldwio	r2,0(r2)
   42478:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4247c:	e0bffd17 	ldw	r2,-12(fp)
   42480:	1080c00c 	andi	r2,r2,768
   42484:	10006d26 	beq	r2,zero,4263c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   42488:	e0bffd17 	ldw	r2,-12(fp)
   4248c:	1080400c 	andi	r2,r2,256
   42490:	10003526 	beq	r2,zero,42568 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   42494:	00800074 	movhi	r2,1
   42498:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4249c:	e0bffb17 	ldw	r2,-20(fp)
   424a0:	10800a17 	ldw	r2,40(r2)
   424a4:	10800044 	addi	r2,r2,1
   424a8:	1081ffcc 	andi	r2,r2,2047
   424ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   424b0:	e0bffb17 	ldw	r2,-20(fp)
   424b4:	10c00b17 	ldw	r3,44(r2)
   424b8:	e0bffe17 	ldw	r2,-8(fp)
   424bc:	18801526 	beq	r3,r2,42514 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   424c0:	e0bffc17 	ldw	r2,-16(fp)
   424c4:	10800037 	ldwio	r2,0(r2)
   424c8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   424cc:	e0bff917 	ldw	r2,-28(fp)
   424d0:	10a0000c 	andi	r2,r2,32768
   424d4:	10001126 	beq	r2,zero,4251c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   424d8:	e0bffb17 	ldw	r2,-20(fp)
   424dc:	10800a17 	ldw	r2,40(r2)
   424e0:	e0fff917 	ldw	r3,-28(fp)
   424e4:	1809883a 	mov	r4,r3
   424e8:	e0fffb17 	ldw	r3,-20(fp)
   424ec:	1885883a 	add	r2,r3,r2
   424f0:	10800e04 	addi	r2,r2,56
   424f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   424f8:	e0bffb17 	ldw	r2,-20(fp)
   424fc:	10800a17 	ldw	r2,40(r2)
   42500:	10800044 	addi	r2,r2,1
   42504:	10c1ffcc 	andi	r3,r2,2047
   42508:	e0bffb17 	ldw	r2,-20(fp)
   4250c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   42510:	003fe206 	br	4249c <__alt_data_end+0xfffd175c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   42514:	0001883a 	nop
   42518:	00000106 	br	42520 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4251c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   42520:	e0bff917 	ldw	r2,-28(fp)
   42524:	10bfffec 	andhi	r2,r2,65535
   42528:	10000f26 	beq	r2,zero,42568 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4252c:	e0bffb17 	ldw	r2,-20(fp)
   42530:	10c00817 	ldw	r3,32(r2)
   42534:	00bfff84 	movi	r2,-2
   42538:	1886703a 	and	r3,r3,r2
   4253c:	e0bffb17 	ldw	r2,-20(fp)
   42540:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   42544:	e0bffc17 	ldw	r2,-16(fp)
   42548:	10800104 	addi	r2,r2,4
   4254c:	1007883a 	mov	r3,r2
   42550:	e0bffb17 	ldw	r2,-20(fp)
   42554:	10800817 	ldw	r2,32(r2)
   42558:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4255c:	e0bffc17 	ldw	r2,-16(fp)
   42560:	10800104 	addi	r2,r2,4
   42564:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   42568:	e0bffd17 	ldw	r2,-12(fp)
   4256c:	1080800c 	andi	r2,r2,512
   42570:	103fbe26 	beq	r2,zero,4246c <__alt_data_end+0xfffd172c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   42574:	e0bffd17 	ldw	r2,-12(fp)
   42578:	1004d43a 	srli	r2,r2,16
   4257c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   42580:	00001406 	br	425d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   42584:	e0bffc17 	ldw	r2,-16(fp)
   42588:	e0fffb17 	ldw	r3,-20(fp)
   4258c:	18c00d17 	ldw	r3,52(r3)
   42590:	e13ffb17 	ldw	r4,-20(fp)
   42594:	20c7883a 	add	r3,r4,r3
   42598:	18c20e04 	addi	r3,r3,2104
   4259c:	18c00003 	ldbu	r3,0(r3)
   425a0:	18c03fcc 	andi	r3,r3,255
   425a4:	18c0201c 	xori	r3,r3,128
   425a8:	18ffe004 	addi	r3,r3,-128
   425ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   425b0:	e0bffb17 	ldw	r2,-20(fp)
   425b4:	10800d17 	ldw	r2,52(r2)
   425b8:	10800044 	addi	r2,r2,1
   425bc:	10c1ffcc 	andi	r3,r2,2047
   425c0:	e0bffb17 	ldw	r2,-20(fp)
   425c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   425c8:	e0bffa17 	ldw	r2,-24(fp)
   425cc:	10bfffc4 	addi	r2,r2,-1
   425d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   425d4:	e0bffa17 	ldw	r2,-24(fp)
   425d8:	10000526 	beq	r2,zero,425f0 <altera_avalon_jtag_uart_irq+0x1a8>
   425dc:	e0bffb17 	ldw	r2,-20(fp)
   425e0:	10c00d17 	ldw	r3,52(r2)
   425e4:	e0bffb17 	ldw	r2,-20(fp)
   425e8:	10800c17 	ldw	r2,48(r2)
   425ec:	18bfe51e 	bne	r3,r2,42584 <__alt_data_end+0xfffd1844>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   425f0:	e0bffa17 	ldw	r2,-24(fp)
   425f4:	103f9d26 	beq	r2,zero,4246c <__alt_data_end+0xfffd172c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   425f8:	e0bffb17 	ldw	r2,-20(fp)
   425fc:	10c00817 	ldw	r3,32(r2)
   42600:	00bfff44 	movi	r2,-3
   42604:	1886703a 	and	r3,r3,r2
   42608:	e0bffb17 	ldw	r2,-20(fp)
   4260c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   42610:	e0bffb17 	ldw	r2,-20(fp)
   42614:	10800017 	ldw	r2,0(r2)
   42618:	10800104 	addi	r2,r2,4
   4261c:	1007883a 	mov	r3,r2
   42620:	e0bffb17 	ldw	r2,-20(fp)
   42624:	10800817 	ldw	r2,32(r2)
   42628:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4262c:	e0bffc17 	ldw	r2,-16(fp)
   42630:	10800104 	addi	r2,r2,4
   42634:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   42638:	003f8c06 	br	4246c <__alt_data_end+0xfffd172c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4263c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   42640:	0001883a 	nop
   42644:	e037883a 	mov	sp,fp
   42648:	df000017 	ldw	fp,0(sp)
   4264c:	dec00104 	addi	sp,sp,4
   42650:	f800283a 	ret

00042654 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   42654:	defff804 	addi	sp,sp,-32
   42658:	df000715 	stw	fp,28(sp)
   4265c:	df000704 	addi	fp,sp,28
   42660:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   42664:	e0bffb17 	ldw	r2,-20(fp)
   42668:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4266c:	e0bff917 	ldw	r2,-28(fp)
   42670:	10800017 	ldw	r2,0(r2)
   42674:	10800104 	addi	r2,r2,4
   42678:	10800037 	ldwio	r2,0(r2)
   4267c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   42680:	e0bffa17 	ldw	r2,-24(fp)
   42684:	1081000c 	andi	r2,r2,1024
   42688:	10000b26 	beq	r2,zero,426b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4268c:	e0bff917 	ldw	r2,-28(fp)
   42690:	10800017 	ldw	r2,0(r2)
   42694:	10800104 	addi	r2,r2,4
   42698:	1007883a 	mov	r3,r2
   4269c:	e0bff917 	ldw	r2,-28(fp)
   426a0:	10800817 	ldw	r2,32(r2)
   426a4:	10810014 	ori	r2,r2,1024
   426a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   426ac:	e0bff917 	ldw	r2,-28(fp)
   426b0:	10000915 	stw	zero,36(r2)
   426b4:	00000a06 	br	426e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   426b8:	e0bff917 	ldw	r2,-28(fp)
   426bc:	10c00917 	ldw	r3,36(r2)
   426c0:	00a00034 	movhi	r2,32768
   426c4:	10bfff04 	addi	r2,r2,-4
   426c8:	10c00536 	bltu	r2,r3,426e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   426cc:	e0bff917 	ldw	r2,-28(fp)
   426d0:	10800917 	ldw	r2,36(r2)
   426d4:	10c00044 	addi	r3,r2,1
   426d8:	e0bff917 	ldw	r2,-28(fp)
   426dc:	10c00915 	stw	r3,36(r2)
   426e0:	00800134 	movhi	r2,4
   426e4:	109a0e04 	addi	r2,r2,26680
   426e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   426ec:	e037883a 	mov	sp,fp
   426f0:	df000017 	ldw	fp,0(sp)
   426f4:	dec00104 	addi	sp,sp,4
   426f8:	f800283a 	ret

000426fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   426fc:	defffd04 	addi	sp,sp,-12
   42700:	df000215 	stw	fp,8(sp)
   42704:	df000204 	addi	fp,sp,8
   42708:	e13ffe15 	stw	r4,-8(fp)
   4270c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   42710:	00000506 	br	42728 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   42714:	e0bfff17 	ldw	r2,-4(fp)
   42718:	1090000c 	andi	r2,r2,16384
   4271c:	10000226 	beq	r2,zero,42728 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   42720:	00bffd44 	movi	r2,-11
   42724:	00000b06 	br	42754 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   42728:	e0bffe17 	ldw	r2,-8(fp)
   4272c:	10c00d17 	ldw	r3,52(r2)
   42730:	e0bffe17 	ldw	r2,-8(fp)
   42734:	10800c17 	ldw	r2,48(r2)
   42738:	18800526 	beq	r3,r2,42750 <altera_avalon_jtag_uart_close+0x54>
   4273c:	e0bffe17 	ldw	r2,-8(fp)
   42740:	10c00917 	ldw	r3,36(r2)
   42744:	e0bffe17 	ldw	r2,-8(fp)
   42748:	10800117 	ldw	r2,4(r2)
   4274c:	18bff136 	bltu	r3,r2,42714 <__alt_data_end+0xfffd19d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   42750:	0005883a 	mov	r2,zero
}
   42754:	e037883a 	mov	sp,fp
   42758:	df000017 	ldw	fp,0(sp)
   4275c:	dec00104 	addi	sp,sp,4
   42760:	f800283a 	ret

00042764 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   42764:	defffa04 	addi	sp,sp,-24
   42768:	df000515 	stw	fp,20(sp)
   4276c:	df000504 	addi	fp,sp,20
   42770:	e13ffd15 	stw	r4,-12(fp)
   42774:	e17ffe15 	stw	r5,-8(fp)
   42778:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4277c:	00bff9c4 	movi	r2,-25
   42780:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   42784:	e0bffe17 	ldw	r2,-8(fp)
   42788:	10da8060 	cmpeqi	r3,r2,27137
   4278c:	1800031e 	bne	r3,zero,4279c <altera_avalon_jtag_uart_ioctl+0x38>
   42790:	109a80a0 	cmpeqi	r2,r2,27138
   42794:	1000181e 	bne	r2,zero,427f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   42798:	00002906 	br	42840 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4279c:	e0bffd17 	ldw	r2,-12(fp)
   427a0:	10c00117 	ldw	r3,4(r2)
   427a4:	00a00034 	movhi	r2,32768
   427a8:	10bfffc4 	addi	r2,r2,-1
   427ac:	18802126 	beq	r3,r2,42834 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   427b0:	e0bfff17 	ldw	r2,-4(fp)
   427b4:	10800017 	ldw	r2,0(r2)
   427b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   427bc:	e0bffc17 	ldw	r2,-16(fp)
   427c0:	10800090 	cmplti	r2,r2,2
   427c4:	1000061e 	bne	r2,zero,427e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   427c8:	e0fffc17 	ldw	r3,-16(fp)
   427cc:	00a00034 	movhi	r2,32768
   427d0:	10bfffc4 	addi	r2,r2,-1
   427d4:	18800226 	beq	r3,r2,427e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   427d8:	e0bffc17 	ldw	r2,-16(fp)
   427dc:	00000206 	br	427e8 <altera_avalon_jtag_uart_ioctl+0x84>
   427e0:	00a00034 	movhi	r2,32768
   427e4:	10bfff84 	addi	r2,r2,-2
   427e8:	e0fffd17 	ldw	r3,-12(fp)
   427ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   427f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   427f4:	00000f06 	br	42834 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   427f8:	e0bffd17 	ldw	r2,-12(fp)
   427fc:	10c00117 	ldw	r3,4(r2)
   42800:	00a00034 	movhi	r2,32768
   42804:	10bfffc4 	addi	r2,r2,-1
   42808:	18800c26 	beq	r3,r2,4283c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4280c:	e0bffd17 	ldw	r2,-12(fp)
   42810:	10c00917 	ldw	r3,36(r2)
   42814:	e0bffd17 	ldw	r2,-12(fp)
   42818:	10800117 	ldw	r2,4(r2)
   4281c:	1885803a 	cmpltu	r2,r3,r2
   42820:	10c03fcc 	andi	r3,r2,255
   42824:	e0bfff17 	ldw	r2,-4(fp)
   42828:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4282c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   42830:	00000206 	br	4283c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   42834:	0001883a 	nop
   42838:	00000106 	br	42840 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4283c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   42840:	e0bffb17 	ldw	r2,-20(fp)
}
   42844:	e037883a 	mov	sp,fp
   42848:	df000017 	ldw	fp,0(sp)
   4284c:	dec00104 	addi	sp,sp,4
   42850:	f800283a 	ret

00042854 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   42854:	defff304 	addi	sp,sp,-52
   42858:	dfc00c15 	stw	ra,48(sp)
   4285c:	df000b15 	stw	fp,44(sp)
   42860:	df000b04 	addi	fp,sp,44
   42864:	e13ffc15 	stw	r4,-16(fp)
   42868:	e17ffd15 	stw	r5,-12(fp)
   4286c:	e1bffe15 	stw	r6,-8(fp)
   42870:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   42874:	e0bffd17 	ldw	r2,-12(fp)
   42878:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4287c:	00004706 	br	4299c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   42880:	e0bffc17 	ldw	r2,-16(fp)
   42884:	10800a17 	ldw	r2,40(r2)
   42888:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4288c:	e0bffc17 	ldw	r2,-16(fp)
   42890:	10800b17 	ldw	r2,44(r2)
   42894:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   42898:	e0fff717 	ldw	r3,-36(fp)
   4289c:	e0bff817 	ldw	r2,-32(fp)
   428a0:	18800536 	bltu	r3,r2,428b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   428a4:	e0fff717 	ldw	r3,-36(fp)
   428a8:	e0bff817 	ldw	r2,-32(fp)
   428ac:	1885c83a 	sub	r2,r3,r2
   428b0:	e0bff615 	stw	r2,-40(fp)
   428b4:	00000406 	br	428c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   428b8:	00c20004 	movi	r3,2048
   428bc:	e0bff817 	ldw	r2,-32(fp)
   428c0:	1885c83a 	sub	r2,r3,r2
   428c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   428c8:	e0bff617 	ldw	r2,-40(fp)
   428cc:	10001e26 	beq	r2,zero,42948 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   428d0:	e0fffe17 	ldw	r3,-8(fp)
   428d4:	e0bff617 	ldw	r2,-40(fp)
   428d8:	1880022e 	bgeu	r3,r2,428e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   428dc:	e0bffe17 	ldw	r2,-8(fp)
   428e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   428e4:	e0bffc17 	ldw	r2,-16(fp)
   428e8:	10c00e04 	addi	r3,r2,56
   428ec:	e0bff817 	ldw	r2,-32(fp)
   428f0:	1885883a 	add	r2,r3,r2
   428f4:	e1bff617 	ldw	r6,-40(fp)
   428f8:	100b883a 	mov	r5,r2
   428fc:	e13ff517 	ldw	r4,-44(fp)
   42900:	004163c0 	call	4163c <memcpy>
      ptr   += n;
   42904:	e0fff517 	ldw	r3,-44(fp)
   42908:	e0bff617 	ldw	r2,-40(fp)
   4290c:	1885883a 	add	r2,r3,r2
   42910:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   42914:	e0fffe17 	ldw	r3,-8(fp)
   42918:	e0bff617 	ldw	r2,-40(fp)
   4291c:	1885c83a 	sub	r2,r3,r2
   42920:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42924:	e0fff817 	ldw	r3,-32(fp)
   42928:	e0bff617 	ldw	r2,-40(fp)
   4292c:	1885883a 	add	r2,r3,r2
   42930:	10c1ffcc 	andi	r3,r2,2047
   42934:	e0bffc17 	ldw	r2,-16(fp)
   42938:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4293c:	e0bffe17 	ldw	r2,-8(fp)
   42940:	00bfcf16 	blt	zero,r2,42880 <__alt_data_end+0xfffd1b40>
   42944:	00000106 	br	4294c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   42948:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4294c:	e0fff517 	ldw	r3,-44(fp)
   42950:	e0bffd17 	ldw	r2,-12(fp)
   42954:	1880141e 	bne	r3,r2,429a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   42958:	e0bfff17 	ldw	r2,-4(fp)
   4295c:	1090000c 	andi	r2,r2,16384
   42960:	1000131e 	bne	r2,zero,429b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   42964:	0001883a 	nop
   42968:	e0bffc17 	ldw	r2,-16(fp)
   4296c:	10c00a17 	ldw	r3,40(r2)
   42970:	e0bff717 	ldw	r2,-36(fp)
   42974:	1880051e 	bne	r3,r2,4298c <altera_avalon_jtag_uart_read+0x138>
   42978:	e0bffc17 	ldw	r2,-16(fp)
   4297c:	10c00917 	ldw	r3,36(r2)
   42980:	e0bffc17 	ldw	r2,-16(fp)
   42984:	10800117 	ldw	r2,4(r2)
   42988:	18bff736 	bltu	r3,r2,42968 <__alt_data_end+0xfffd1c28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4298c:	e0bffc17 	ldw	r2,-16(fp)
   42990:	10c00a17 	ldw	r3,40(r2)
   42994:	e0bff717 	ldw	r2,-36(fp)
   42998:	18800726 	beq	r3,r2,429b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4299c:	e0bffe17 	ldw	r2,-8(fp)
   429a0:	00bfb716 	blt	zero,r2,42880 <__alt_data_end+0xfffd1b40>
   429a4:	00000506 	br	429bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   429a8:	0001883a 	nop
   429ac:	00000306 	br	429bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   429b0:	0001883a 	nop
   429b4:	00000106 	br	429bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   429b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   429bc:	e0fff517 	ldw	r3,-44(fp)
   429c0:	e0bffd17 	ldw	r2,-12(fp)
   429c4:	18801826 	beq	r3,r2,42a28 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   429c8:	0005303a 	rdctl	r2,status
   429cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   429d0:	e0fffb17 	ldw	r3,-20(fp)
   429d4:	00bfff84 	movi	r2,-2
   429d8:	1884703a 	and	r2,r3,r2
   429dc:	1001703a 	wrctl	status,r2
  
  return context;
   429e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   429e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   429e8:	e0bffc17 	ldw	r2,-16(fp)
   429ec:	10800817 	ldw	r2,32(r2)
   429f0:	10c00054 	ori	r3,r2,1
   429f4:	e0bffc17 	ldw	r2,-16(fp)
   429f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   429fc:	e0bffc17 	ldw	r2,-16(fp)
   42a00:	10800017 	ldw	r2,0(r2)
   42a04:	10800104 	addi	r2,r2,4
   42a08:	1007883a 	mov	r3,r2
   42a0c:	e0bffc17 	ldw	r2,-16(fp)
   42a10:	10800817 	ldw	r2,32(r2)
   42a14:	18800035 	stwio	r2,0(r3)
   42a18:	e0bffa17 	ldw	r2,-24(fp)
   42a1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42a20:	e0bff917 	ldw	r2,-28(fp)
   42a24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   42a28:	e0fff517 	ldw	r3,-44(fp)
   42a2c:	e0bffd17 	ldw	r2,-12(fp)
   42a30:	18800426 	beq	r3,r2,42a44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   42a34:	e0fff517 	ldw	r3,-44(fp)
   42a38:	e0bffd17 	ldw	r2,-12(fp)
   42a3c:	1885c83a 	sub	r2,r3,r2
   42a40:	00000606 	br	42a5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   42a44:	e0bfff17 	ldw	r2,-4(fp)
   42a48:	1090000c 	andi	r2,r2,16384
   42a4c:	10000226 	beq	r2,zero,42a58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   42a50:	00bffd44 	movi	r2,-11
   42a54:	00000106 	br	42a5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   42a58:	00bffec4 	movi	r2,-5
}
   42a5c:	e037883a 	mov	sp,fp
   42a60:	dfc00117 	ldw	ra,4(sp)
   42a64:	df000017 	ldw	fp,0(sp)
   42a68:	dec00204 	addi	sp,sp,8
   42a6c:	f800283a 	ret

00042a70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   42a70:	defff304 	addi	sp,sp,-52
   42a74:	dfc00c15 	stw	ra,48(sp)
   42a78:	df000b15 	stw	fp,44(sp)
   42a7c:	df000b04 	addi	fp,sp,44
   42a80:	e13ffc15 	stw	r4,-16(fp)
   42a84:	e17ffd15 	stw	r5,-12(fp)
   42a88:	e1bffe15 	stw	r6,-8(fp)
   42a8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   42a90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   42a94:	e0bffd17 	ldw	r2,-12(fp)
   42a98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   42a9c:	00003706 	br	42b7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   42aa0:	e0bffc17 	ldw	r2,-16(fp)
   42aa4:	10800c17 	ldw	r2,48(r2)
   42aa8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   42aac:	e0bffc17 	ldw	r2,-16(fp)
   42ab0:	10800d17 	ldw	r2,52(r2)
   42ab4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   42ab8:	e0fff917 	ldw	r3,-28(fp)
   42abc:	e0bff517 	ldw	r2,-44(fp)
   42ac0:	1880062e 	bgeu	r3,r2,42adc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   42ac4:	e0fff517 	ldw	r3,-44(fp)
   42ac8:	e0bff917 	ldw	r2,-28(fp)
   42acc:	1885c83a 	sub	r2,r3,r2
   42ad0:	10bfffc4 	addi	r2,r2,-1
   42ad4:	e0bff615 	stw	r2,-40(fp)
   42ad8:	00000b06 	br	42b08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   42adc:	e0bff517 	ldw	r2,-44(fp)
   42ae0:	10000526 	beq	r2,zero,42af8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   42ae4:	00c20004 	movi	r3,2048
   42ae8:	e0bff917 	ldw	r2,-28(fp)
   42aec:	1885c83a 	sub	r2,r3,r2
   42af0:	e0bff615 	stw	r2,-40(fp)
   42af4:	00000406 	br	42b08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   42af8:	00c1ffc4 	movi	r3,2047
   42afc:	e0bff917 	ldw	r2,-28(fp)
   42b00:	1885c83a 	sub	r2,r3,r2
   42b04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   42b08:	e0bff617 	ldw	r2,-40(fp)
   42b0c:	10001e26 	beq	r2,zero,42b88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   42b10:	e0fffe17 	ldw	r3,-8(fp)
   42b14:	e0bff617 	ldw	r2,-40(fp)
   42b18:	1880022e 	bgeu	r3,r2,42b24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   42b1c:	e0bffe17 	ldw	r2,-8(fp)
   42b20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   42b24:	e0bffc17 	ldw	r2,-16(fp)
   42b28:	10c20e04 	addi	r3,r2,2104
   42b2c:	e0bff917 	ldw	r2,-28(fp)
   42b30:	1885883a 	add	r2,r3,r2
   42b34:	e1bff617 	ldw	r6,-40(fp)
   42b38:	e17ffd17 	ldw	r5,-12(fp)
   42b3c:	1009883a 	mov	r4,r2
   42b40:	004163c0 	call	4163c <memcpy>
      ptr   += n;
   42b44:	e0fffd17 	ldw	r3,-12(fp)
   42b48:	e0bff617 	ldw	r2,-40(fp)
   42b4c:	1885883a 	add	r2,r3,r2
   42b50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   42b54:	e0fffe17 	ldw	r3,-8(fp)
   42b58:	e0bff617 	ldw	r2,-40(fp)
   42b5c:	1885c83a 	sub	r2,r3,r2
   42b60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42b64:	e0fff917 	ldw	r3,-28(fp)
   42b68:	e0bff617 	ldw	r2,-40(fp)
   42b6c:	1885883a 	add	r2,r3,r2
   42b70:	10c1ffcc 	andi	r3,r2,2047
   42b74:	e0bffc17 	ldw	r2,-16(fp)
   42b78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   42b7c:	e0bffe17 	ldw	r2,-8(fp)
   42b80:	00bfc716 	blt	zero,r2,42aa0 <__alt_data_end+0xfffd1d60>
   42b84:	00000106 	br	42b8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   42b88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42b8c:	0005303a 	rdctl	r2,status
   42b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42b94:	e0fffb17 	ldw	r3,-20(fp)
   42b98:	00bfff84 	movi	r2,-2
   42b9c:	1884703a 	and	r2,r3,r2
   42ba0:	1001703a 	wrctl	status,r2
  
  return context;
   42ba4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   42ba8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   42bac:	e0bffc17 	ldw	r2,-16(fp)
   42bb0:	10800817 	ldw	r2,32(r2)
   42bb4:	10c00094 	ori	r3,r2,2
   42bb8:	e0bffc17 	ldw	r2,-16(fp)
   42bbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   42bc0:	e0bffc17 	ldw	r2,-16(fp)
   42bc4:	10800017 	ldw	r2,0(r2)
   42bc8:	10800104 	addi	r2,r2,4
   42bcc:	1007883a 	mov	r3,r2
   42bd0:	e0bffc17 	ldw	r2,-16(fp)
   42bd4:	10800817 	ldw	r2,32(r2)
   42bd8:	18800035 	stwio	r2,0(r3)
   42bdc:	e0bffa17 	ldw	r2,-24(fp)
   42be0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42be4:	e0bff817 	ldw	r2,-32(fp)
   42be8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   42bec:	e0bffe17 	ldw	r2,-8(fp)
   42bf0:	0080100e 	bge	zero,r2,42c34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   42bf4:	e0bfff17 	ldw	r2,-4(fp)
   42bf8:	1090000c 	andi	r2,r2,16384
   42bfc:	1000101e 	bne	r2,zero,42c40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   42c00:	0001883a 	nop
   42c04:	e0bffc17 	ldw	r2,-16(fp)
   42c08:	10c00d17 	ldw	r3,52(r2)
   42c0c:	e0bff517 	ldw	r2,-44(fp)
   42c10:	1880051e 	bne	r3,r2,42c28 <altera_avalon_jtag_uart_write+0x1b8>
   42c14:	e0bffc17 	ldw	r2,-16(fp)
   42c18:	10c00917 	ldw	r3,36(r2)
   42c1c:	e0bffc17 	ldw	r2,-16(fp)
   42c20:	10800117 	ldw	r2,4(r2)
   42c24:	18bff736 	bltu	r3,r2,42c04 <__alt_data_end+0xfffd1ec4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   42c28:	e0bffc17 	ldw	r2,-16(fp)
   42c2c:	10800917 	ldw	r2,36(r2)
   42c30:	1000051e 	bne	r2,zero,42c48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   42c34:	e0bffe17 	ldw	r2,-8(fp)
   42c38:	00bfd016 	blt	zero,r2,42b7c <__alt_data_end+0xfffd1e3c>
   42c3c:	00000306 	br	42c4c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   42c40:	0001883a 	nop
   42c44:	00000106 	br	42c4c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   42c48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   42c4c:	e0fffd17 	ldw	r3,-12(fp)
   42c50:	e0bff717 	ldw	r2,-36(fp)
   42c54:	18800426 	beq	r3,r2,42c68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   42c58:	e0fffd17 	ldw	r3,-12(fp)
   42c5c:	e0bff717 	ldw	r2,-36(fp)
   42c60:	1885c83a 	sub	r2,r3,r2
   42c64:	00000606 	br	42c80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   42c68:	e0bfff17 	ldw	r2,-4(fp)
   42c6c:	1090000c 	andi	r2,r2,16384
   42c70:	10000226 	beq	r2,zero,42c7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   42c74:	00bffd44 	movi	r2,-11
   42c78:	00000106 	br	42c80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   42c7c:	00bffec4 	movi	r2,-5
}
   42c80:	e037883a 	mov	sp,fp
   42c84:	dfc00117 	ldw	ra,4(sp)
   42c88:	df000017 	ldw	fp,0(sp)
   42c8c:	dec00204 	addi	sp,sp,8
   42c90:	f800283a 	ret

00042c94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   42c94:	defff504 	addi	sp,sp,-44
   42c98:	df000a15 	stw	fp,40(sp)
   42c9c:	df000a04 	addi	fp,sp,40
   42ca0:	e13ffc15 	stw	r4,-16(fp)
   42ca4:	e17ffd15 	stw	r5,-12(fp)
   42ca8:	e1bffe15 	stw	r6,-8(fp)
   42cac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   42cb0:	e03ff615 	stw	zero,-40(fp)
   42cb4:	00800134 	movhi	r2,4
   42cb8:	109a0e04 	addi	r2,r2,26680
   42cbc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   42cc0:	10003f26 	beq	r2,zero,42dc0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   42cc4:	e0bffc17 	ldw	r2,-16(fp)
   42cc8:	10003b26 	beq	r2,zero,42db8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   42ccc:	e0bffc17 	ldw	r2,-16(fp)
   42cd0:	e0fffe17 	ldw	r3,-8(fp)
   42cd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   42cd8:	e0bffc17 	ldw	r2,-16(fp)
   42cdc:	e0ffff17 	ldw	r3,-4(fp)
   42ce0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42ce4:	0005303a 	rdctl	r2,status
   42ce8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42cec:	e0fff917 	ldw	r3,-28(fp)
   42cf0:	00bfff84 	movi	r2,-2
   42cf4:	1884703a 	and	r2,r3,r2
   42cf8:	1001703a 	wrctl	status,r2
  
  return context;
   42cfc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   42d00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   42d04:	00800134 	movhi	r2,4
   42d08:	109a0f04 	addi	r2,r2,26684
   42d0c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   42d10:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   42d14:	e0fffd17 	ldw	r3,-12(fp)
   42d18:	e0bff617 	ldw	r2,-40(fp)
   42d1c:	1885883a 	add	r2,r3,r2
   42d20:	10c00044 	addi	r3,r2,1
   42d24:	e0bffc17 	ldw	r2,-16(fp)
   42d28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   42d2c:	e0bffc17 	ldw	r2,-16(fp)
   42d30:	10c00217 	ldw	r3,8(r2)
   42d34:	e0bff617 	ldw	r2,-40(fp)
   42d38:	1880042e 	bgeu	r3,r2,42d4c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   42d3c:	e0bffc17 	ldw	r2,-16(fp)
   42d40:	00c00044 	movi	r3,1
   42d44:	10c00405 	stb	r3,16(r2)
   42d48:	00000206 	br	42d54 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   42d4c:	e0bffc17 	ldw	r2,-16(fp)
   42d50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   42d54:	e0fffc17 	ldw	r3,-16(fp)
   42d58:	00800134 	movhi	r2,4
   42d5c:	10950904 	addi	r2,r2,21540
   42d60:	e0bffa15 	stw	r2,-24(fp)
   42d64:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   42d68:	e0bffb17 	ldw	r2,-20(fp)
   42d6c:	e0fffa17 	ldw	r3,-24(fp)
   42d70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   42d74:	e0bffa17 	ldw	r2,-24(fp)
   42d78:	10c00017 	ldw	r3,0(r2)
   42d7c:	e0bffb17 	ldw	r2,-20(fp)
   42d80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   42d84:	e0bffa17 	ldw	r2,-24(fp)
   42d88:	10800017 	ldw	r2,0(r2)
   42d8c:	e0fffb17 	ldw	r3,-20(fp)
   42d90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   42d94:	e0bffa17 	ldw	r2,-24(fp)
   42d98:	e0fffb17 	ldw	r3,-20(fp)
   42d9c:	10c00015 	stw	r3,0(r2)
   42da0:	e0bff817 	ldw	r2,-32(fp)
   42da4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42da8:	e0bff717 	ldw	r2,-36(fp)
   42dac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   42db0:	0005883a 	mov	r2,zero
   42db4:	00000306 	br	42dc4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   42db8:	00bffa84 	movi	r2,-22
   42dbc:	00000106 	br	42dc4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   42dc0:	00bfde84 	movi	r2,-134
  }
}
   42dc4:	e037883a 	mov	sp,fp
   42dc8:	df000017 	ldw	fp,0(sp)
   42dcc:	dec00104 	addi	sp,sp,4
   42dd0:	f800283a 	ret

00042dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42dd4:	defffe04 	addi	sp,sp,-8
   42dd8:	dfc00115 	stw	ra,4(sp)
   42ddc:	df000015 	stw	fp,0(sp)
   42de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42de4:	00800134 	movhi	r2,4
   42de8:	10950704 	addi	r2,r2,21532
   42dec:	10800017 	ldw	r2,0(r2)
   42df0:	10000526 	beq	r2,zero,42e08 <alt_get_errno+0x34>
   42df4:	00800134 	movhi	r2,4
   42df8:	10950704 	addi	r2,r2,21532
   42dfc:	10800017 	ldw	r2,0(r2)
   42e00:	103ee83a 	callr	r2
   42e04:	00000206 	br	42e10 <alt_get_errno+0x3c>
   42e08:	00800134 	movhi	r2,4
   42e0c:	109a0904 	addi	r2,r2,26660
}
   42e10:	e037883a 	mov	sp,fp
   42e14:	dfc00117 	ldw	ra,4(sp)
   42e18:	df000017 	ldw	fp,0(sp)
   42e1c:	dec00204 	addi	sp,sp,8
   42e20:	f800283a 	ret

00042e24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42e24:	defffb04 	addi	sp,sp,-20
   42e28:	dfc00415 	stw	ra,16(sp)
   42e2c:	df000315 	stw	fp,12(sp)
   42e30:	df000304 	addi	fp,sp,12
   42e34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42e38:	e0bfff17 	ldw	r2,-4(fp)
   42e3c:	10000616 	blt	r2,zero,42e58 <close+0x34>
   42e40:	e0bfff17 	ldw	r2,-4(fp)
   42e44:	10c00324 	muli	r3,r2,12
   42e48:	00800134 	movhi	r2,4
   42e4c:	10949f04 	addi	r2,r2,21116
   42e50:	1885883a 	add	r2,r3,r2
   42e54:	00000106 	br	42e5c <close+0x38>
   42e58:	0005883a 	mov	r2,zero
   42e5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42e60:	e0bffd17 	ldw	r2,-12(fp)
   42e64:	10001926 	beq	r2,zero,42ecc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42e68:	e0bffd17 	ldw	r2,-12(fp)
   42e6c:	10800017 	ldw	r2,0(r2)
   42e70:	10800417 	ldw	r2,16(r2)
   42e74:	10000626 	beq	r2,zero,42e90 <close+0x6c>
   42e78:	e0bffd17 	ldw	r2,-12(fp)
   42e7c:	10800017 	ldw	r2,0(r2)
   42e80:	10800417 	ldw	r2,16(r2)
   42e84:	e13ffd17 	ldw	r4,-12(fp)
   42e88:	103ee83a 	callr	r2
   42e8c:	00000106 	br	42e94 <close+0x70>
   42e90:	0005883a 	mov	r2,zero
   42e94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42e98:	e13fff17 	ldw	r4,-4(fp)
   42e9c:	00437140 	call	43714 <alt_release_fd>
    if (rval < 0)
   42ea0:	e0bffe17 	ldw	r2,-8(fp)
   42ea4:	1000070e 	bge	r2,zero,42ec4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   42ea8:	0042dd40 	call	42dd4 <alt_get_errno>
   42eac:	1007883a 	mov	r3,r2
   42eb0:	e0bffe17 	ldw	r2,-8(fp)
   42eb4:	0085c83a 	sub	r2,zero,r2
   42eb8:	18800015 	stw	r2,0(r3)
      return -1;
   42ebc:	00bfffc4 	movi	r2,-1
   42ec0:	00000706 	br	42ee0 <close+0xbc>
    }
    return 0;
   42ec4:	0005883a 	mov	r2,zero
   42ec8:	00000506 	br	42ee0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42ecc:	0042dd40 	call	42dd4 <alt_get_errno>
   42ed0:	1007883a 	mov	r3,r2
   42ed4:	00801444 	movi	r2,81
   42ed8:	18800015 	stw	r2,0(r3)
    return -1;
   42edc:	00bfffc4 	movi	r2,-1
  }
}
   42ee0:	e037883a 	mov	sp,fp
   42ee4:	dfc00117 	ldw	ra,4(sp)
   42ee8:	df000017 	ldw	fp,0(sp)
   42eec:	dec00204 	addi	sp,sp,8
   42ef0:	f800283a 	ret

00042ef4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   42ef4:	defffe04 	addi	sp,sp,-8
   42ef8:	df000115 	stw	fp,4(sp)
   42efc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   42f00:	e03fff15 	stw	zero,-4(fp)
   42f04:	00000506 	br	42f1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   42f08:	e0bfff17 	ldw	r2,-4(fp)
   42f0c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   42f10:	e0bfff17 	ldw	r2,-4(fp)
   42f14:	10800804 	addi	r2,r2,32
   42f18:	e0bfff15 	stw	r2,-4(fp)
   42f1c:	e0bfff17 	ldw	r2,-4(fp)
   42f20:	10820030 	cmpltui	r2,r2,2048
   42f24:	103ff81e 	bne	r2,zero,42f08 <__alt_data_end+0xfffd21c8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   42f28:	0001883a 	nop
   42f2c:	e037883a 	mov	sp,fp
   42f30:	df000017 	ldw	fp,0(sp)
   42f34:	dec00104 	addi	sp,sp,4
   42f38:	f800283a 	ret

00042f3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42f3c:	defffc04 	addi	sp,sp,-16
   42f40:	df000315 	stw	fp,12(sp)
   42f44:	df000304 	addi	fp,sp,12
   42f48:	e13ffd15 	stw	r4,-12(fp)
   42f4c:	e17ffe15 	stw	r5,-8(fp)
   42f50:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42f54:	e0bfff17 	ldw	r2,-4(fp)
}
   42f58:	e037883a 	mov	sp,fp
   42f5c:	df000017 	ldw	fp,0(sp)
   42f60:	dec00104 	addi	sp,sp,4
   42f64:	f800283a 	ret

00042f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42f68:	defffe04 	addi	sp,sp,-8
   42f6c:	dfc00115 	stw	ra,4(sp)
   42f70:	df000015 	stw	fp,0(sp)
   42f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42f78:	00800134 	movhi	r2,4
   42f7c:	10950704 	addi	r2,r2,21532
   42f80:	10800017 	ldw	r2,0(r2)
   42f84:	10000526 	beq	r2,zero,42f9c <alt_get_errno+0x34>
   42f88:	00800134 	movhi	r2,4
   42f8c:	10950704 	addi	r2,r2,21532
   42f90:	10800017 	ldw	r2,0(r2)
   42f94:	103ee83a 	callr	r2
   42f98:	00000206 	br	42fa4 <alt_get_errno+0x3c>
   42f9c:	00800134 	movhi	r2,4
   42fa0:	109a0904 	addi	r2,r2,26660
}
   42fa4:	e037883a 	mov	sp,fp
   42fa8:	dfc00117 	ldw	ra,4(sp)
   42fac:	df000017 	ldw	fp,0(sp)
   42fb0:	dec00204 	addi	sp,sp,8
   42fb4:	f800283a 	ret

00042fb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   42fb8:	defffa04 	addi	sp,sp,-24
   42fbc:	dfc00515 	stw	ra,20(sp)
   42fc0:	df000415 	stw	fp,16(sp)
   42fc4:	df000404 	addi	fp,sp,16
   42fc8:	e13ffe15 	stw	r4,-8(fp)
   42fcc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   42fd0:	e0bffe17 	ldw	r2,-8(fp)
   42fd4:	10000326 	beq	r2,zero,42fe4 <alt_dev_llist_insert+0x2c>
   42fd8:	e0bffe17 	ldw	r2,-8(fp)
   42fdc:	10800217 	ldw	r2,8(r2)
   42fe0:	1000061e 	bne	r2,zero,42ffc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   42fe4:	0042f680 	call	42f68 <alt_get_errno>
   42fe8:	1007883a 	mov	r3,r2
   42fec:	00800584 	movi	r2,22
   42ff0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   42ff4:	00bffa84 	movi	r2,-22
   42ff8:	00001306 	br	43048 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   42ffc:	e0bffe17 	ldw	r2,-8(fp)
   43000:	e0ffff17 	ldw	r3,-4(fp)
   43004:	e0fffc15 	stw	r3,-16(fp)
   43008:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4300c:	e0bffd17 	ldw	r2,-12(fp)
   43010:	e0fffc17 	ldw	r3,-16(fp)
   43014:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   43018:	e0bffc17 	ldw	r2,-16(fp)
   4301c:	10c00017 	ldw	r3,0(r2)
   43020:	e0bffd17 	ldw	r2,-12(fp)
   43024:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   43028:	e0bffc17 	ldw	r2,-16(fp)
   4302c:	10800017 	ldw	r2,0(r2)
   43030:	e0fffd17 	ldw	r3,-12(fp)
   43034:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   43038:	e0bffc17 	ldw	r2,-16(fp)
   4303c:	e0fffd17 	ldw	r3,-12(fp)
   43040:	10c00015 	stw	r3,0(r2)

  return 0;  
   43044:	0005883a 	mov	r2,zero
}
   43048:	e037883a 	mov	sp,fp
   4304c:	dfc00117 	ldw	ra,4(sp)
   43050:	df000017 	ldw	fp,0(sp)
   43054:	dec00204 	addi	sp,sp,8
   43058:	f800283a 	ret

0004305c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4305c:	defffe04 	addi	sp,sp,-8
   43060:	dfc00115 	stw	ra,4(sp)
   43064:	df000015 	stw	fp,0(sp)
   43068:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4306c:	01440004 	movi	r5,4096
   43070:	0009883a 	mov	r4,zero
   43074:	0043b980 	call	43b98 <alt_icache_flush>
#endif
}
   43078:	0001883a 	nop
   4307c:	e037883a 	mov	sp,fp
   43080:	dfc00117 	ldw	ra,4(sp)
   43084:	df000017 	ldw	fp,0(sp)
   43088:	dec00204 	addi	sp,sp,8
   4308c:	f800283a 	ret

00043090 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   43090:	defff904 	addi	sp,sp,-28
   43094:	dfc00615 	stw	ra,24(sp)
   43098:	df000515 	stw	fp,20(sp)
   4309c:	df000504 	addi	fp,sp,20
   430a0:	e13ffc15 	stw	r4,-16(fp)
   430a4:	e17ffd15 	stw	r5,-12(fp)
   430a8:	e1bffe15 	stw	r6,-8(fp)
   430ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   430b0:	e0800217 	ldw	r2,8(fp)
   430b4:	d8800015 	stw	r2,0(sp)
   430b8:	e1ffff17 	ldw	r7,-4(fp)
   430bc:	e1bffe17 	ldw	r6,-8(fp)
   430c0:	e17ffd17 	ldw	r5,-12(fp)
   430c4:	e13ffc17 	ldw	r4,-16(fp)
   430c8:	00432700 	call	43270 <alt_iic_isr_register>
}  
   430cc:	e037883a 	mov	sp,fp
   430d0:	dfc00117 	ldw	ra,4(sp)
   430d4:	df000017 	ldw	fp,0(sp)
   430d8:	dec00204 	addi	sp,sp,8
   430dc:	f800283a 	ret

000430e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   430e0:	defff904 	addi	sp,sp,-28
   430e4:	df000615 	stw	fp,24(sp)
   430e8:	df000604 	addi	fp,sp,24
   430ec:	e13ffe15 	stw	r4,-8(fp)
   430f0:	e17fff15 	stw	r5,-4(fp)
   430f4:	e0bfff17 	ldw	r2,-4(fp)
   430f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   430fc:	0005303a 	rdctl	r2,status
   43100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43104:	e0fffb17 	ldw	r3,-20(fp)
   43108:	00bfff84 	movi	r2,-2
   4310c:	1884703a 	and	r2,r3,r2
   43110:	1001703a 	wrctl	status,r2
  
  return context;
   43114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   43118:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4311c:	00c00044 	movi	r3,1
   43120:	e0bffa17 	ldw	r2,-24(fp)
   43124:	1884983a 	sll	r2,r3,r2
   43128:	1007883a 	mov	r3,r2
   4312c:	00800134 	movhi	r2,4
   43130:	109a0d04 	addi	r2,r2,26676
   43134:	10800017 	ldw	r2,0(r2)
   43138:	1886b03a 	or	r3,r3,r2
   4313c:	00800134 	movhi	r2,4
   43140:	109a0d04 	addi	r2,r2,26676
   43144:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   43148:	00800134 	movhi	r2,4
   4314c:	109a0d04 	addi	r2,r2,26676
   43150:	10800017 	ldw	r2,0(r2)
   43154:	100170fa 	wrctl	ienable,r2
   43158:	e0bffc17 	ldw	r2,-16(fp)
   4315c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43160:	e0bffd17 	ldw	r2,-12(fp)
   43164:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   43168:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4316c:	0001883a 	nop
}
   43170:	e037883a 	mov	sp,fp
   43174:	df000017 	ldw	fp,0(sp)
   43178:	dec00104 	addi	sp,sp,4
   4317c:	f800283a 	ret

00043180 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   43180:	defff904 	addi	sp,sp,-28
   43184:	df000615 	stw	fp,24(sp)
   43188:	df000604 	addi	fp,sp,24
   4318c:	e13ffe15 	stw	r4,-8(fp)
   43190:	e17fff15 	stw	r5,-4(fp)
   43194:	e0bfff17 	ldw	r2,-4(fp)
   43198:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4319c:	0005303a 	rdctl	r2,status
   431a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   431a4:	e0fffb17 	ldw	r3,-20(fp)
   431a8:	00bfff84 	movi	r2,-2
   431ac:	1884703a 	and	r2,r3,r2
   431b0:	1001703a 	wrctl	status,r2
  
  return context;
   431b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   431b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   431bc:	00c00044 	movi	r3,1
   431c0:	e0bffa17 	ldw	r2,-24(fp)
   431c4:	1884983a 	sll	r2,r3,r2
   431c8:	0084303a 	nor	r2,zero,r2
   431cc:	1007883a 	mov	r3,r2
   431d0:	00800134 	movhi	r2,4
   431d4:	109a0d04 	addi	r2,r2,26676
   431d8:	10800017 	ldw	r2,0(r2)
   431dc:	1886703a 	and	r3,r3,r2
   431e0:	00800134 	movhi	r2,4
   431e4:	109a0d04 	addi	r2,r2,26676
   431e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   431ec:	00800134 	movhi	r2,4
   431f0:	109a0d04 	addi	r2,r2,26676
   431f4:	10800017 	ldw	r2,0(r2)
   431f8:	100170fa 	wrctl	ienable,r2
   431fc:	e0bffc17 	ldw	r2,-16(fp)
   43200:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43204:	e0bffd17 	ldw	r2,-12(fp)
   43208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4320c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   43210:	0001883a 	nop
}
   43214:	e037883a 	mov	sp,fp
   43218:	df000017 	ldw	fp,0(sp)
   4321c:	dec00104 	addi	sp,sp,4
   43220:	f800283a 	ret

00043224 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   43224:	defffc04 	addi	sp,sp,-16
   43228:	df000315 	stw	fp,12(sp)
   4322c:	df000304 	addi	fp,sp,12
   43230:	e13ffe15 	stw	r4,-8(fp)
   43234:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   43238:	000530fa 	rdctl	r2,ienable
   4323c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   43240:	00c00044 	movi	r3,1
   43244:	e0bfff17 	ldw	r2,-4(fp)
   43248:	1884983a 	sll	r2,r3,r2
   4324c:	1007883a 	mov	r3,r2
   43250:	e0bffd17 	ldw	r2,-12(fp)
   43254:	1884703a 	and	r2,r3,r2
   43258:	1004c03a 	cmpne	r2,r2,zero
   4325c:	10803fcc 	andi	r2,r2,255
}
   43260:	e037883a 	mov	sp,fp
   43264:	df000017 	ldw	fp,0(sp)
   43268:	dec00104 	addi	sp,sp,4
   4326c:	f800283a 	ret

00043270 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   43270:	defff504 	addi	sp,sp,-44
   43274:	dfc00a15 	stw	ra,40(sp)
   43278:	df000915 	stw	fp,36(sp)
   4327c:	df000904 	addi	fp,sp,36
   43280:	e13ffc15 	stw	r4,-16(fp)
   43284:	e17ffd15 	stw	r5,-12(fp)
   43288:	e1bffe15 	stw	r6,-8(fp)
   4328c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   43290:	00bffa84 	movi	r2,-22
   43294:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   43298:	e0bffd17 	ldw	r2,-12(fp)
   4329c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   432a0:	e0bff817 	ldw	r2,-32(fp)
   432a4:	10800808 	cmpgei	r2,r2,32
   432a8:	1000271e 	bne	r2,zero,43348 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   432ac:	0005303a 	rdctl	r2,status
   432b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   432b4:	e0fffb17 	ldw	r3,-20(fp)
   432b8:	00bfff84 	movi	r2,-2
   432bc:	1884703a 	and	r2,r3,r2
   432c0:	1001703a 	wrctl	status,r2
  
  return context;
   432c4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   432c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   432cc:	00800134 	movhi	r2,4
   432d0:	109a1104 	addi	r2,r2,26692
   432d4:	e0fff817 	ldw	r3,-32(fp)
   432d8:	180690fa 	slli	r3,r3,3
   432dc:	10c5883a 	add	r2,r2,r3
   432e0:	e0fffe17 	ldw	r3,-8(fp)
   432e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   432e8:	00800134 	movhi	r2,4
   432ec:	109a1104 	addi	r2,r2,26692
   432f0:	e0fff817 	ldw	r3,-32(fp)
   432f4:	180690fa 	slli	r3,r3,3
   432f8:	10c5883a 	add	r2,r2,r3
   432fc:	10800104 	addi	r2,r2,4
   43300:	e0ffff17 	ldw	r3,-4(fp)
   43304:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   43308:	e0bffe17 	ldw	r2,-8(fp)
   4330c:	10000526 	beq	r2,zero,43324 <alt_iic_isr_register+0xb4>
   43310:	e0bff817 	ldw	r2,-32(fp)
   43314:	100b883a 	mov	r5,r2
   43318:	e13ffc17 	ldw	r4,-16(fp)
   4331c:	00430e00 	call	430e0 <alt_ic_irq_enable>
   43320:	00000406 	br	43334 <alt_iic_isr_register+0xc4>
   43324:	e0bff817 	ldw	r2,-32(fp)
   43328:	100b883a 	mov	r5,r2
   4332c:	e13ffc17 	ldw	r4,-16(fp)
   43330:	00431800 	call	43180 <alt_ic_irq_disable>
   43334:	e0bff715 	stw	r2,-36(fp)
   43338:	e0bffa17 	ldw	r2,-24(fp)
   4333c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43340:	e0bff917 	ldw	r2,-28(fp)
   43344:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   43348:	e0bff717 	ldw	r2,-36(fp)
}
   4334c:	e037883a 	mov	sp,fp
   43350:	dfc00117 	ldw	ra,4(sp)
   43354:	df000017 	ldw	fp,0(sp)
   43358:	dec00204 	addi	sp,sp,8
   4335c:	f800283a 	ret

00043360 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43360:	defff904 	addi	sp,sp,-28
   43364:	dfc00615 	stw	ra,24(sp)
   43368:	df000515 	stw	fp,20(sp)
   4336c:	df000504 	addi	fp,sp,20
   43370:	e13ffc15 	stw	r4,-16(fp)
   43374:	e17ffd15 	stw	r5,-12(fp)
   43378:	e1bffe15 	stw	r6,-8(fp)
   4337c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   43380:	e1bfff17 	ldw	r6,-4(fp)
   43384:	e17ffe17 	ldw	r5,-8(fp)
   43388:	e13ffd17 	ldw	r4,-12(fp)
   4338c:	00435bc0 	call	435bc <open>
   43390:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   43394:	e0bffb17 	ldw	r2,-20(fp)
   43398:	10001c16 	blt	r2,zero,4340c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4339c:	00800134 	movhi	r2,4
   433a0:	10949f04 	addi	r2,r2,21116
   433a4:	e0fffb17 	ldw	r3,-20(fp)
   433a8:	18c00324 	muli	r3,r3,12
   433ac:	10c5883a 	add	r2,r2,r3
   433b0:	10c00017 	ldw	r3,0(r2)
   433b4:	e0bffc17 	ldw	r2,-16(fp)
   433b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   433bc:	00800134 	movhi	r2,4
   433c0:	10949f04 	addi	r2,r2,21116
   433c4:	e0fffb17 	ldw	r3,-20(fp)
   433c8:	18c00324 	muli	r3,r3,12
   433cc:	10c5883a 	add	r2,r2,r3
   433d0:	10800104 	addi	r2,r2,4
   433d4:	10c00017 	ldw	r3,0(r2)
   433d8:	e0bffc17 	ldw	r2,-16(fp)
   433dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   433e0:	00800134 	movhi	r2,4
   433e4:	10949f04 	addi	r2,r2,21116
   433e8:	e0fffb17 	ldw	r3,-20(fp)
   433ec:	18c00324 	muli	r3,r3,12
   433f0:	10c5883a 	add	r2,r2,r3
   433f4:	10800204 	addi	r2,r2,8
   433f8:	10c00017 	ldw	r3,0(r2)
   433fc:	e0bffc17 	ldw	r2,-16(fp)
   43400:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   43404:	e13ffb17 	ldw	r4,-20(fp)
   43408:	00437140 	call	43714 <alt_release_fd>
  }
} 
   4340c:	0001883a 	nop
   43410:	e037883a 	mov	sp,fp
   43414:	dfc00117 	ldw	ra,4(sp)
   43418:	df000017 	ldw	fp,0(sp)
   4341c:	dec00204 	addi	sp,sp,8
   43420:	f800283a 	ret

00043424 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   43424:	defffb04 	addi	sp,sp,-20
   43428:	dfc00415 	stw	ra,16(sp)
   4342c:	df000315 	stw	fp,12(sp)
   43430:	df000304 	addi	fp,sp,12
   43434:	e13ffd15 	stw	r4,-12(fp)
   43438:	e17ffe15 	stw	r5,-8(fp)
   4343c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   43440:	01c07fc4 	movi	r7,511
   43444:	01800044 	movi	r6,1
   43448:	e17ffd17 	ldw	r5,-12(fp)
   4344c:	01000134 	movhi	r4,4
   43450:	2114a204 	addi	r4,r4,21128
   43454:	00433600 	call	43360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   43458:	01c07fc4 	movi	r7,511
   4345c:	000d883a 	mov	r6,zero
   43460:	e17ffe17 	ldw	r5,-8(fp)
   43464:	01000134 	movhi	r4,4
   43468:	21149f04 	addi	r4,r4,21116
   4346c:	00433600 	call	43360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   43470:	01c07fc4 	movi	r7,511
   43474:	01800044 	movi	r6,1
   43478:	e17fff17 	ldw	r5,-4(fp)
   4347c:	01000134 	movhi	r4,4
   43480:	2114a504 	addi	r4,r4,21140
   43484:	00433600 	call	43360 <alt_open_fd>
}  
   43488:	0001883a 	nop
   4348c:	e037883a 	mov	sp,fp
   43490:	dfc00117 	ldw	ra,4(sp)
   43494:	df000017 	ldw	fp,0(sp)
   43498:	dec00204 	addi	sp,sp,8
   4349c:	f800283a 	ret

000434a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   434a0:	defffe04 	addi	sp,sp,-8
   434a4:	dfc00115 	stw	ra,4(sp)
   434a8:	df000015 	stw	fp,0(sp)
   434ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   434b0:	00800134 	movhi	r2,4
   434b4:	10950704 	addi	r2,r2,21532
   434b8:	10800017 	ldw	r2,0(r2)
   434bc:	10000526 	beq	r2,zero,434d4 <alt_get_errno+0x34>
   434c0:	00800134 	movhi	r2,4
   434c4:	10950704 	addi	r2,r2,21532
   434c8:	10800017 	ldw	r2,0(r2)
   434cc:	103ee83a 	callr	r2
   434d0:	00000206 	br	434dc <alt_get_errno+0x3c>
   434d4:	00800134 	movhi	r2,4
   434d8:	109a0904 	addi	r2,r2,26660
}
   434dc:	e037883a 	mov	sp,fp
   434e0:	dfc00117 	ldw	ra,4(sp)
   434e4:	df000017 	ldw	fp,0(sp)
   434e8:	dec00204 	addi	sp,sp,8
   434ec:	f800283a 	ret

000434f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   434f0:	defffd04 	addi	sp,sp,-12
   434f4:	df000215 	stw	fp,8(sp)
   434f8:	df000204 	addi	fp,sp,8
   434fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   43500:	e0bfff17 	ldw	r2,-4(fp)
   43504:	10800217 	ldw	r2,8(r2)
   43508:	10d00034 	orhi	r3,r2,16384
   4350c:	e0bfff17 	ldw	r2,-4(fp)
   43510:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43514:	e03ffe15 	stw	zero,-8(fp)
   43518:	00001d06 	br	43590 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4351c:	00800134 	movhi	r2,4
   43520:	10949f04 	addi	r2,r2,21116
   43524:	e0fffe17 	ldw	r3,-8(fp)
   43528:	18c00324 	muli	r3,r3,12
   4352c:	10c5883a 	add	r2,r2,r3
   43530:	10c00017 	ldw	r3,0(r2)
   43534:	e0bfff17 	ldw	r2,-4(fp)
   43538:	10800017 	ldw	r2,0(r2)
   4353c:	1880111e 	bne	r3,r2,43584 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43540:	00800134 	movhi	r2,4
   43544:	10949f04 	addi	r2,r2,21116
   43548:	e0fffe17 	ldw	r3,-8(fp)
   4354c:	18c00324 	muli	r3,r3,12
   43550:	10c5883a 	add	r2,r2,r3
   43554:	10800204 	addi	r2,r2,8
   43558:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4355c:	1000090e 	bge	r2,zero,43584 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   43560:	e0bffe17 	ldw	r2,-8(fp)
   43564:	10c00324 	muli	r3,r2,12
   43568:	00800134 	movhi	r2,4
   4356c:	10949f04 	addi	r2,r2,21116
   43570:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43574:	e0bfff17 	ldw	r2,-4(fp)
   43578:	18800226 	beq	r3,r2,43584 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4357c:	00bffcc4 	movi	r2,-13
   43580:	00000a06 	br	435ac <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43584:	e0bffe17 	ldw	r2,-8(fp)
   43588:	10800044 	addi	r2,r2,1
   4358c:	e0bffe15 	stw	r2,-8(fp)
   43590:	00800134 	movhi	r2,4
   43594:	10950604 	addi	r2,r2,21528
   43598:	10800017 	ldw	r2,0(r2)
   4359c:	1007883a 	mov	r3,r2
   435a0:	e0bffe17 	ldw	r2,-8(fp)
   435a4:	18bfdd2e 	bgeu	r3,r2,4351c <__alt_data_end+0xfffd27dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   435a8:	0005883a 	mov	r2,zero
}
   435ac:	e037883a 	mov	sp,fp
   435b0:	df000017 	ldw	fp,0(sp)
   435b4:	dec00104 	addi	sp,sp,4
   435b8:	f800283a 	ret

000435bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   435bc:	defff604 	addi	sp,sp,-40
   435c0:	dfc00915 	stw	ra,36(sp)
   435c4:	df000815 	stw	fp,32(sp)
   435c8:	df000804 	addi	fp,sp,32
   435cc:	e13ffd15 	stw	r4,-12(fp)
   435d0:	e17ffe15 	stw	r5,-8(fp)
   435d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   435d8:	00bfffc4 	movi	r2,-1
   435dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   435e0:	00bffb44 	movi	r2,-19
   435e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   435e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   435ec:	01400134 	movhi	r5,4
   435f0:	29550404 	addi	r5,r5,21520
   435f4:	e13ffd17 	ldw	r4,-12(fp)
   435f8:	00439400 	call	43940 <alt_find_dev>
   435fc:	e0bff815 	stw	r2,-32(fp)
   43600:	e0bff817 	ldw	r2,-32(fp)
   43604:	1000051e 	bne	r2,zero,4361c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   43608:	e13ffd17 	ldw	r4,-12(fp)
   4360c:	00439d00 	call	439d0 <alt_find_file>
   43610:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   43614:	00800044 	movi	r2,1
   43618:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4361c:	e0bff817 	ldw	r2,-32(fp)
   43620:	10002926 	beq	r2,zero,436c8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   43624:	e13ff817 	ldw	r4,-32(fp)
   43628:	0043ae40 	call	43ae4 <alt_get_fd>
   4362c:	e0bff915 	stw	r2,-28(fp)
   43630:	e0bff917 	ldw	r2,-28(fp)
   43634:	1000030e 	bge	r2,zero,43644 <open+0x88>
    {
      status = index;
   43638:	e0bff917 	ldw	r2,-28(fp)
   4363c:	e0bffa15 	stw	r2,-24(fp)
   43640:	00002306 	br	436d0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   43644:	e0bff917 	ldw	r2,-28(fp)
   43648:	10c00324 	muli	r3,r2,12
   4364c:	00800134 	movhi	r2,4
   43650:	10949f04 	addi	r2,r2,21116
   43654:	1885883a 	add	r2,r3,r2
   43658:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4365c:	e0fffe17 	ldw	r3,-8(fp)
   43660:	00900034 	movhi	r2,16384
   43664:	10bfffc4 	addi	r2,r2,-1
   43668:	1886703a 	and	r3,r3,r2
   4366c:	e0bffc17 	ldw	r2,-16(fp)
   43670:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   43674:	e0bffb17 	ldw	r2,-20(fp)
   43678:	1000051e 	bne	r2,zero,43690 <open+0xd4>
   4367c:	e13ffc17 	ldw	r4,-16(fp)
   43680:	00434f00 	call	434f0 <alt_file_locked>
   43684:	e0bffa15 	stw	r2,-24(fp)
   43688:	e0bffa17 	ldw	r2,-24(fp)
   4368c:	10001016 	blt	r2,zero,436d0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   43690:	e0bff817 	ldw	r2,-32(fp)
   43694:	10800317 	ldw	r2,12(r2)
   43698:	10000826 	beq	r2,zero,436bc <open+0x100>
   4369c:	e0bff817 	ldw	r2,-32(fp)
   436a0:	10800317 	ldw	r2,12(r2)
   436a4:	e1ffff17 	ldw	r7,-4(fp)
   436a8:	e1bffe17 	ldw	r6,-8(fp)
   436ac:	e17ffd17 	ldw	r5,-12(fp)
   436b0:	e13ffc17 	ldw	r4,-16(fp)
   436b4:	103ee83a 	callr	r2
   436b8:	00000106 	br	436c0 <open+0x104>
   436bc:	0005883a 	mov	r2,zero
   436c0:	e0bffa15 	stw	r2,-24(fp)
   436c4:	00000206 	br	436d0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   436c8:	00bffb44 	movi	r2,-19
   436cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   436d0:	e0bffa17 	ldw	r2,-24(fp)
   436d4:	1000090e 	bge	r2,zero,436fc <open+0x140>
  {
    alt_release_fd (index);  
   436d8:	e13ff917 	ldw	r4,-28(fp)
   436dc:	00437140 	call	43714 <alt_release_fd>
    ALT_ERRNO = -status;
   436e0:	00434a00 	call	434a0 <alt_get_errno>
   436e4:	1007883a 	mov	r3,r2
   436e8:	e0bffa17 	ldw	r2,-24(fp)
   436ec:	0085c83a 	sub	r2,zero,r2
   436f0:	18800015 	stw	r2,0(r3)
    return -1;
   436f4:	00bfffc4 	movi	r2,-1
   436f8:	00000106 	br	43700 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   436fc:	e0bff917 	ldw	r2,-28(fp)
}
   43700:	e037883a 	mov	sp,fp
   43704:	dfc00117 	ldw	ra,4(sp)
   43708:	df000017 	ldw	fp,0(sp)
   4370c:	dec00204 	addi	sp,sp,8
   43710:	f800283a 	ret

00043714 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43714:	defffe04 	addi	sp,sp,-8
   43718:	df000115 	stw	fp,4(sp)
   4371c:	df000104 	addi	fp,sp,4
   43720:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43724:	e0bfff17 	ldw	r2,-4(fp)
   43728:	108000d0 	cmplti	r2,r2,3
   4372c:	10000d1e 	bne	r2,zero,43764 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43730:	00800134 	movhi	r2,4
   43734:	10949f04 	addi	r2,r2,21116
   43738:	e0ffff17 	ldw	r3,-4(fp)
   4373c:	18c00324 	muli	r3,r3,12
   43740:	10c5883a 	add	r2,r2,r3
   43744:	10800204 	addi	r2,r2,8
   43748:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4374c:	00800134 	movhi	r2,4
   43750:	10949f04 	addi	r2,r2,21116
   43754:	e0ffff17 	ldw	r3,-4(fp)
   43758:	18c00324 	muli	r3,r3,12
   4375c:	10c5883a 	add	r2,r2,r3
   43760:	10000015 	stw	zero,0(r2)
  }
}
   43764:	0001883a 	nop
   43768:	e037883a 	mov	sp,fp
   4376c:	df000017 	ldw	fp,0(sp)
   43770:	dec00104 	addi	sp,sp,4
   43774:	f800283a 	ret

00043778 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   43778:	defffa04 	addi	sp,sp,-24
   4377c:	df000515 	stw	fp,20(sp)
   43780:	df000504 	addi	fp,sp,20
   43784:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43788:	0005303a 	rdctl	r2,status
   4378c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43790:	e0fffc17 	ldw	r3,-16(fp)
   43794:	00bfff84 	movi	r2,-2
   43798:	1884703a 	and	r2,r3,r2
   4379c:	1001703a 	wrctl	status,r2
  
  return context;
   437a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   437a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   437a8:	e0bfff17 	ldw	r2,-4(fp)
   437ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   437b0:	e0bffd17 	ldw	r2,-12(fp)
   437b4:	10800017 	ldw	r2,0(r2)
   437b8:	e0fffd17 	ldw	r3,-12(fp)
   437bc:	18c00117 	ldw	r3,4(r3)
   437c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   437c4:	e0bffd17 	ldw	r2,-12(fp)
   437c8:	10800117 	ldw	r2,4(r2)
   437cc:	e0fffd17 	ldw	r3,-12(fp)
   437d0:	18c00017 	ldw	r3,0(r3)
   437d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   437d8:	e0bffd17 	ldw	r2,-12(fp)
   437dc:	e0fffd17 	ldw	r3,-12(fp)
   437e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   437e4:	e0bffd17 	ldw	r2,-12(fp)
   437e8:	e0fffd17 	ldw	r3,-12(fp)
   437ec:	10c00015 	stw	r3,0(r2)
   437f0:	e0bffb17 	ldw	r2,-20(fp)
   437f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   437f8:	e0bffe17 	ldw	r2,-8(fp)
   437fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   43800:	0001883a 	nop
   43804:	e037883a 	mov	sp,fp
   43808:	df000017 	ldw	fp,0(sp)
   4380c:	dec00104 	addi	sp,sp,4
   43810:	f800283a 	ret

00043814 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   43814:	defffb04 	addi	sp,sp,-20
   43818:	dfc00415 	stw	ra,16(sp)
   4381c:	df000315 	stw	fp,12(sp)
   43820:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   43824:	d0a00a17 	ldw	r2,-32728(gp)
   43828:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4382c:	d0a51017 	ldw	r2,-27584(gp)
   43830:	10800044 	addi	r2,r2,1
   43834:	d0a51015 	stw	r2,-27584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43838:	00002e06 	br	438f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4383c:	e0bffd17 	ldw	r2,-12(fp)
   43840:	10800017 	ldw	r2,0(r2)
   43844:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   43848:	e0bffd17 	ldw	r2,-12(fp)
   4384c:	10800403 	ldbu	r2,16(r2)
   43850:	10803fcc 	andi	r2,r2,255
   43854:	10000426 	beq	r2,zero,43868 <alt_tick+0x54>
   43858:	d0a51017 	ldw	r2,-27584(gp)
   4385c:	1000021e 	bne	r2,zero,43868 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   43860:	e0bffd17 	ldw	r2,-12(fp)
   43864:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   43868:	e0bffd17 	ldw	r2,-12(fp)
   4386c:	10800217 	ldw	r2,8(r2)
   43870:	d0e51017 	ldw	r3,-27584(gp)
   43874:	18801d36 	bltu	r3,r2,438ec <alt_tick+0xd8>
   43878:	e0bffd17 	ldw	r2,-12(fp)
   4387c:	10800403 	ldbu	r2,16(r2)
   43880:	10803fcc 	andi	r2,r2,255
   43884:	1000191e 	bne	r2,zero,438ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   43888:	e0bffd17 	ldw	r2,-12(fp)
   4388c:	10800317 	ldw	r2,12(r2)
   43890:	e0fffd17 	ldw	r3,-12(fp)
   43894:	18c00517 	ldw	r3,20(r3)
   43898:	1809883a 	mov	r4,r3
   4389c:	103ee83a 	callr	r2
   438a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   438a4:	e0bfff17 	ldw	r2,-4(fp)
   438a8:	1000031e 	bne	r2,zero,438b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   438ac:	e13ffd17 	ldw	r4,-12(fp)
   438b0:	00437780 	call	43778 <alt_alarm_stop>
   438b4:	00000d06 	br	438ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   438b8:	e0bffd17 	ldw	r2,-12(fp)
   438bc:	10c00217 	ldw	r3,8(r2)
   438c0:	e0bfff17 	ldw	r2,-4(fp)
   438c4:	1887883a 	add	r3,r3,r2
   438c8:	e0bffd17 	ldw	r2,-12(fp)
   438cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   438d0:	e0bffd17 	ldw	r2,-12(fp)
   438d4:	10c00217 	ldw	r3,8(r2)
   438d8:	d0a51017 	ldw	r2,-27584(gp)
   438dc:	1880032e 	bgeu	r3,r2,438ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   438e0:	e0bffd17 	ldw	r2,-12(fp)
   438e4:	00c00044 	movi	r3,1
   438e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   438ec:	e0bffe17 	ldw	r2,-8(fp)
   438f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   438f4:	e0fffd17 	ldw	r3,-12(fp)
   438f8:	d0a00a04 	addi	r2,gp,-32728
   438fc:	18bfcf1e 	bne	r3,r2,4383c <__alt_data_end+0xfffd2afc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   43900:	0001883a 	nop
}
   43904:	0001883a 	nop
   43908:	e037883a 	mov	sp,fp
   4390c:	dfc00117 	ldw	ra,4(sp)
   43910:	df000017 	ldw	fp,0(sp)
   43914:	dec00204 	addi	sp,sp,8
   43918:	f800283a 	ret

0004391c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4391c:	deffff04 	addi	sp,sp,-4
   43920:	df000015 	stw	fp,0(sp)
   43924:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   43928:	000170fa 	wrctl	ienable,zero
}
   4392c:	0001883a 	nop
   43930:	e037883a 	mov	sp,fp
   43934:	df000017 	ldw	fp,0(sp)
   43938:	dec00104 	addi	sp,sp,4
   4393c:	f800283a 	ret

00043940 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   43940:	defffa04 	addi	sp,sp,-24
   43944:	dfc00515 	stw	ra,20(sp)
   43948:	df000415 	stw	fp,16(sp)
   4394c:	df000404 	addi	fp,sp,16
   43950:	e13ffe15 	stw	r4,-8(fp)
   43954:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   43958:	e0bfff17 	ldw	r2,-4(fp)
   4395c:	10800017 	ldw	r2,0(r2)
   43960:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   43964:	e13ffe17 	ldw	r4,-8(fp)
   43968:	0040d9c0 	call	40d9c <strlen>
   4396c:	10800044 	addi	r2,r2,1
   43970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43974:	00000d06 	br	439ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43978:	e0bffc17 	ldw	r2,-16(fp)
   4397c:	10800217 	ldw	r2,8(r2)
   43980:	e0fffd17 	ldw	r3,-12(fp)
   43984:	180d883a 	mov	r6,r3
   43988:	e17ffe17 	ldw	r5,-8(fp)
   4398c:	1009883a 	mov	r4,r2
   43990:	0043d3c0 	call	43d3c <memcmp>
   43994:	1000021e 	bne	r2,zero,439a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   43998:	e0bffc17 	ldw	r2,-16(fp)
   4399c:	00000706 	br	439bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   439a0:	e0bffc17 	ldw	r2,-16(fp)
   439a4:	10800017 	ldw	r2,0(r2)
   439a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   439ac:	e0fffc17 	ldw	r3,-16(fp)
   439b0:	e0bfff17 	ldw	r2,-4(fp)
   439b4:	18bff01e 	bne	r3,r2,43978 <__alt_data_end+0xfffd2c38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   439b8:	0005883a 	mov	r2,zero
}
   439bc:	e037883a 	mov	sp,fp
   439c0:	dfc00117 	ldw	ra,4(sp)
   439c4:	df000017 	ldw	fp,0(sp)
   439c8:	dec00204 	addi	sp,sp,8
   439cc:	f800283a 	ret

000439d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   439d0:	defffb04 	addi	sp,sp,-20
   439d4:	dfc00415 	stw	ra,16(sp)
   439d8:	df000315 	stw	fp,12(sp)
   439dc:	df000304 	addi	fp,sp,12
   439e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   439e4:	00800134 	movhi	r2,4
   439e8:	10950204 	addi	r2,r2,21512
   439ec:	10800017 	ldw	r2,0(r2)
   439f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   439f4:	00003106 	br	43abc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   439f8:	e0bffd17 	ldw	r2,-12(fp)
   439fc:	10800217 	ldw	r2,8(r2)
   43a00:	1009883a 	mov	r4,r2
   43a04:	0040d9c0 	call	40d9c <strlen>
   43a08:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   43a0c:	e0bffd17 	ldw	r2,-12(fp)
   43a10:	10c00217 	ldw	r3,8(r2)
   43a14:	e0bffe17 	ldw	r2,-8(fp)
   43a18:	10bfffc4 	addi	r2,r2,-1
   43a1c:	1885883a 	add	r2,r3,r2
   43a20:	10800003 	ldbu	r2,0(r2)
   43a24:	10803fcc 	andi	r2,r2,255
   43a28:	1080201c 	xori	r2,r2,128
   43a2c:	10bfe004 	addi	r2,r2,-128
   43a30:	10800bd8 	cmpnei	r2,r2,47
   43a34:	1000031e 	bne	r2,zero,43a44 <alt_find_file+0x74>
    {
      len -= 1;
   43a38:	e0bffe17 	ldw	r2,-8(fp)
   43a3c:	10bfffc4 	addi	r2,r2,-1
   43a40:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43a44:	e0bffe17 	ldw	r2,-8(fp)
   43a48:	e0ffff17 	ldw	r3,-4(fp)
   43a4c:	1885883a 	add	r2,r3,r2
   43a50:	10800003 	ldbu	r2,0(r2)
   43a54:	10803fcc 	andi	r2,r2,255
   43a58:	1080201c 	xori	r2,r2,128
   43a5c:	10bfe004 	addi	r2,r2,-128
   43a60:	10800be0 	cmpeqi	r2,r2,47
   43a64:	1000081e 	bne	r2,zero,43a88 <alt_find_file+0xb8>
   43a68:	e0bffe17 	ldw	r2,-8(fp)
   43a6c:	e0ffff17 	ldw	r3,-4(fp)
   43a70:	1885883a 	add	r2,r3,r2
   43a74:	10800003 	ldbu	r2,0(r2)
   43a78:	10803fcc 	andi	r2,r2,255
   43a7c:	1080201c 	xori	r2,r2,128
   43a80:	10bfe004 	addi	r2,r2,-128
   43a84:	10000a1e 	bne	r2,zero,43ab0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   43a88:	e0bffd17 	ldw	r2,-12(fp)
   43a8c:	10800217 	ldw	r2,8(r2)
   43a90:	e0fffe17 	ldw	r3,-8(fp)
   43a94:	180d883a 	mov	r6,r3
   43a98:	e17fff17 	ldw	r5,-4(fp)
   43a9c:	1009883a 	mov	r4,r2
   43aa0:	0043d3c0 	call	43d3c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43aa4:	1000021e 	bne	r2,zero,43ab0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   43aa8:	e0bffd17 	ldw	r2,-12(fp)
   43aac:	00000806 	br	43ad0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   43ab0:	e0bffd17 	ldw	r2,-12(fp)
   43ab4:	10800017 	ldw	r2,0(r2)
   43ab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43abc:	e0fffd17 	ldw	r3,-12(fp)
   43ac0:	00800134 	movhi	r2,4
   43ac4:	10950204 	addi	r2,r2,21512
   43ac8:	18bfcb1e 	bne	r3,r2,439f8 <__alt_data_end+0xfffd2cb8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   43acc:	0005883a 	mov	r2,zero
}
   43ad0:	e037883a 	mov	sp,fp
   43ad4:	dfc00117 	ldw	ra,4(sp)
   43ad8:	df000017 	ldw	fp,0(sp)
   43adc:	dec00204 	addi	sp,sp,8
   43ae0:	f800283a 	ret

00043ae4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43ae4:	defffc04 	addi	sp,sp,-16
   43ae8:	df000315 	stw	fp,12(sp)
   43aec:	df000304 	addi	fp,sp,12
   43af0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   43af4:	00bffa04 	movi	r2,-24
   43af8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43afc:	e03ffd15 	stw	zero,-12(fp)
   43b00:	00001d06 	br	43b78 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   43b04:	00800134 	movhi	r2,4
   43b08:	10949f04 	addi	r2,r2,21116
   43b0c:	e0fffd17 	ldw	r3,-12(fp)
   43b10:	18c00324 	muli	r3,r3,12
   43b14:	10c5883a 	add	r2,r2,r3
   43b18:	10800017 	ldw	r2,0(r2)
   43b1c:	1000131e 	bne	r2,zero,43b6c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   43b20:	00800134 	movhi	r2,4
   43b24:	10949f04 	addi	r2,r2,21116
   43b28:	e0fffd17 	ldw	r3,-12(fp)
   43b2c:	18c00324 	muli	r3,r3,12
   43b30:	10c5883a 	add	r2,r2,r3
   43b34:	e0ffff17 	ldw	r3,-4(fp)
   43b38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   43b3c:	00800134 	movhi	r2,4
   43b40:	10950604 	addi	r2,r2,21528
   43b44:	10c00017 	ldw	r3,0(r2)
   43b48:	e0bffd17 	ldw	r2,-12(fp)
   43b4c:	1880040e 	bge	r3,r2,43b60 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   43b50:	00800134 	movhi	r2,4
   43b54:	10950604 	addi	r2,r2,21528
   43b58:	e0fffd17 	ldw	r3,-12(fp)
   43b5c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   43b60:	e0bffd17 	ldw	r2,-12(fp)
   43b64:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   43b68:	00000606 	br	43b84 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43b6c:	e0bffd17 	ldw	r2,-12(fp)
   43b70:	10800044 	addi	r2,r2,1
   43b74:	e0bffd15 	stw	r2,-12(fp)
   43b78:	e0bffd17 	ldw	r2,-12(fp)
   43b7c:	10800810 	cmplti	r2,r2,32
   43b80:	103fe01e 	bne	r2,zero,43b04 <__alt_data_end+0xfffd2dc4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   43b84:	e0bffe17 	ldw	r2,-8(fp)
}
   43b88:	e037883a 	mov	sp,fp
   43b8c:	df000017 	ldw	fp,0(sp)
   43b90:	dec00104 	addi	sp,sp,4
   43b94:	f800283a 	ret

00043b98 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   43b98:	defffb04 	addi	sp,sp,-20
   43b9c:	df000415 	stw	fp,16(sp)
   43ba0:	df000404 	addi	fp,sp,16
   43ba4:	e13ffe15 	stw	r4,-8(fp)
   43ba8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   43bac:	e0bfff17 	ldw	r2,-4(fp)
   43bb0:	10840070 	cmpltui	r2,r2,4097
   43bb4:	1000021e 	bne	r2,zero,43bc0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   43bb8:	00840004 	movi	r2,4096
   43bbc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   43bc0:	e0fffe17 	ldw	r3,-8(fp)
   43bc4:	e0bfff17 	ldw	r2,-4(fp)
   43bc8:	1885883a 	add	r2,r3,r2
   43bcc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43bd0:	e0bffe17 	ldw	r2,-8(fp)
   43bd4:	e0bffc15 	stw	r2,-16(fp)
   43bd8:	00000506 	br	43bf0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   43bdc:	e0bffc17 	ldw	r2,-16(fp)
   43be0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43be4:	e0bffc17 	ldw	r2,-16(fp)
   43be8:	10800804 	addi	r2,r2,32
   43bec:	e0bffc15 	stw	r2,-16(fp)
   43bf0:	e0fffc17 	ldw	r3,-16(fp)
   43bf4:	e0bffd17 	ldw	r2,-12(fp)
   43bf8:	18bff836 	bltu	r3,r2,43bdc <__alt_data_end+0xfffd2e9c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   43bfc:	e0bffe17 	ldw	r2,-8(fp)
   43c00:	108007cc 	andi	r2,r2,31
   43c04:	10000226 	beq	r2,zero,43c10 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   43c08:	e0bffc17 	ldw	r2,-16(fp)
   43c0c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   43c10:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   43c14:	0001883a 	nop
   43c18:	e037883a 	mov	sp,fp
   43c1c:	df000017 	ldw	fp,0(sp)
   43c20:	dec00104 	addi	sp,sp,4
   43c24:	f800283a 	ret

00043c28 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   43c28:	defffe04 	addi	sp,sp,-8
   43c2c:	df000115 	stw	fp,4(sp)
   43c30:	df000104 	addi	fp,sp,4
   43c34:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   43c38:	e0bfff17 	ldw	r2,-4(fp)
   43c3c:	10bffe84 	addi	r2,r2,-6
   43c40:	10c00428 	cmpgeui	r3,r2,16
   43c44:	18001a1e 	bne	r3,zero,43cb0 <alt_exception_cause_generated_bad_addr+0x88>
   43c48:	100690ba 	slli	r3,r2,2
   43c4c:	00800134 	movhi	r2,4
   43c50:	108f1804 	addi	r2,r2,15456
   43c54:	1885883a 	add	r2,r3,r2
   43c58:	10800017 	ldw	r2,0(r2)
   43c5c:	1000683a 	jmp	r2
   43c60:	00043ca0 	cmpeqi	zero,zero,4338
   43c64:	00043ca0 	cmpeqi	zero,zero,4338
   43c68:	00043cb0 	cmpltui	zero,zero,4338
   43c6c:	00043cb0 	cmpltui	zero,zero,4338
   43c70:	00043cb0 	cmpltui	zero,zero,4338
   43c74:	00043ca0 	cmpeqi	zero,zero,4338
   43c78:	00043ca8 	cmpgeui	zero,zero,4338
   43c7c:	00043cb0 	cmpltui	zero,zero,4338
   43c80:	00043ca0 	cmpeqi	zero,zero,4338
   43c84:	00043ca0 	cmpeqi	zero,zero,4338
   43c88:	00043cb0 	cmpltui	zero,zero,4338
   43c8c:	00043ca0 	cmpeqi	zero,zero,4338
   43c90:	00043ca8 	cmpgeui	zero,zero,4338
   43c94:	00043cb0 	cmpltui	zero,zero,4338
   43c98:	00043cb0 	cmpltui	zero,zero,4338
   43c9c:	00043ca0 	cmpeqi	zero,zero,4338
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   43ca0:	00800044 	movi	r2,1
   43ca4:	00000306 	br	43cb4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   43ca8:	0005883a 	mov	r2,zero
   43cac:	00000106 	br	43cb4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   43cb0:	0005883a 	mov	r2,zero
  }
}
   43cb4:	e037883a 	mov	sp,fp
   43cb8:	df000017 	ldw	fp,0(sp)
   43cbc:	dec00104 	addi	sp,sp,4
   43cc0:	f800283a 	ret

00043cc4 <exit>:
   43cc4:	defffe04 	addi	sp,sp,-8
   43cc8:	000b883a 	mov	r5,zero
   43ccc:	dc000015 	stw	r16,0(sp)
   43cd0:	dfc00115 	stw	ra,4(sp)
   43cd4:	2021883a 	mov	r16,r4
   43cd8:	0043d6c0 	call	43d6c <__call_exitprocs>
   43cdc:	8009883a 	mov	r4,r16
   43ce0:	0043efc0 	call	43efc <_exit>

00043ce4 <fputs>:
   43ce4:	defffd04 	addi	sp,sp,-12
   43ce8:	dfc00215 	stw	ra,8(sp)
   43cec:	dc000115 	stw	r16,4(sp)
   43cf0:	d9400015 	stw	r5,0(sp)
   43cf4:	2021883a 	mov	r16,r4
   43cf8:	0040d9c0 	call	40d9c <strlen>
   43cfc:	100f883a 	mov	r7,r2
   43d00:	00800134 	movhi	r2,4
   43d04:	d9400017 	ldw	r5,0(sp)
   43d08:	10950104 	addi	r2,r2,21508
   43d0c:	11000017 	ldw	r4,0(r2)
   43d10:	00c00134 	movhi	r3,4
   43d14:	18c53704 	addi	r3,r3,5340
   43d18:	28c00115 	stw	r3,4(r5)
   43d1c:	800d883a 	mov	r6,r16
   43d20:	00414dc0 	call	414dc <__sfvwrite_small_dev>
   43d24:	10bfffe0 	cmpeqi	r2,r2,-1
   43d28:	0085c83a 	sub	r2,zero,r2
   43d2c:	dfc00217 	ldw	ra,8(sp)
   43d30:	dc000117 	ldw	r16,4(sp)
   43d34:	dec00304 	addi	sp,sp,12
   43d38:	f800283a 	ret

00043d3c <memcmp>:
   43d3c:	218d883a 	add	r6,r4,r6
   43d40:	21800826 	beq	r4,r6,43d64 <memcmp+0x28>
   43d44:	20800003 	ldbu	r2,0(r4)
   43d48:	28c00003 	ldbu	r3,0(r5)
   43d4c:	10c00226 	beq	r2,r3,43d58 <memcmp+0x1c>
   43d50:	10c5c83a 	sub	r2,r2,r3
   43d54:	f800283a 	ret
   43d58:	21000044 	addi	r4,r4,1
   43d5c:	29400044 	addi	r5,r5,1
   43d60:	003ff706 	br	43d40 <__alt_data_end+0xfffd3000>
   43d64:	0005883a 	mov	r2,zero
   43d68:	f800283a 	ret

00043d6c <__call_exitprocs>:
   43d6c:	defff504 	addi	sp,sp,-44
   43d70:	dd000515 	stw	r20,20(sp)
   43d74:	05000134 	movhi	r20,4
   43d78:	dc800315 	stw	r18,12(sp)
   43d7c:	dfc00a15 	stw	ra,40(sp)
   43d80:	df000915 	stw	fp,36(sp)
   43d84:	ddc00815 	stw	r23,32(sp)
   43d88:	dd800715 	stw	r22,28(sp)
   43d8c:	dd400615 	stw	r21,24(sp)
   43d90:	dcc00415 	stw	r19,16(sp)
   43d94:	dc400215 	stw	r17,8(sp)
   43d98:	dc000115 	stw	r16,4(sp)
   43d9c:	d9000015 	stw	r4,0(sp)
   43da0:	2825883a 	mov	r18,r5
   43da4:	a5150004 	addi	r20,r20,21504
   43da8:	a4400017 	ldw	r17,0(r20)
   43dac:	8cc00c17 	ldw	r19,48(r17)
   43db0:	8c400c04 	addi	r17,r17,48
   43db4:	98004526 	beq	r19,zero,43ecc <__call_exitprocs+0x160>
   43db8:	9c000117 	ldw	r16,4(r19)
   43dbc:	00900034 	movhi	r2,16384
   43dc0:	10bfffc4 	addi	r2,r2,-1
   43dc4:	9d402217 	ldw	r21,136(r19)
   43dc8:	85bfffc4 	addi	r22,r16,-1
   43dcc:	80a1883a 	add	r16,r16,r2
   43dd0:	8421883a 	add	r16,r16,r16
   43dd4:	8421883a 	add	r16,r16,r16
   43dd8:	ac2f883a 	add	r23,r21,r16
   43ddc:	84000204 	addi	r16,r16,8
   43de0:	9c21883a 	add	r16,r19,r16
   43de4:	b0002716 	blt	r22,zero,43e84 <__call_exitprocs+0x118>
   43de8:	90000726 	beq	r18,zero,43e08 <__call_exitprocs+0x9c>
   43dec:	a800041e 	bne	r21,zero,43e00 <__call_exitprocs+0x94>
   43df0:	b5bfffc4 	addi	r22,r22,-1
   43df4:	bdffff04 	addi	r23,r23,-4
   43df8:	843fff04 	addi	r16,r16,-4
   43dfc:	003ff906 	br	43de4 <__alt_data_end+0xfffd30a4>
   43e00:	b9002017 	ldw	r4,128(r23)
   43e04:	913ffa1e 	bne	r18,r4,43df0 <__alt_data_end+0xfffd30b0>
   43e08:	99000117 	ldw	r4,4(r19)
   43e0c:	82000017 	ldw	r8,0(r16)
   43e10:	213fffc4 	addi	r4,r4,-1
   43e14:	b100021e 	bne	r22,r4,43e20 <__call_exitprocs+0xb4>
   43e18:	9d800115 	stw	r22,4(r19)
   43e1c:	00000106 	br	43e24 <__call_exitprocs+0xb8>
   43e20:	80000015 	stw	zero,0(r16)
   43e24:	403ff226 	beq	r8,zero,43df0 <__alt_data_end+0xfffd30b0>
   43e28:	9f000117 	ldw	fp,4(r19)
   43e2c:	a8000526 	beq	r21,zero,43e44 <__call_exitprocs+0xd8>
   43e30:	00800044 	movi	r2,1
   43e34:	1592983a 	sll	r9,r2,r22
   43e38:	a9404017 	ldw	r5,256(r21)
   43e3c:	494a703a 	and	r5,r9,r5
   43e40:	2800021e 	bne	r5,zero,43e4c <__call_exitprocs+0xe0>
   43e44:	403ee83a 	callr	r8
   43e48:	00000906 	br	43e70 <__call_exitprocs+0x104>
   43e4c:	a9004117 	ldw	r4,260(r21)
   43e50:	4908703a 	and	r4,r9,r4
   43e54:	2000041e 	bne	r4,zero,43e68 <__call_exitprocs+0xfc>
   43e58:	b9400017 	ldw	r5,0(r23)
   43e5c:	d9000017 	ldw	r4,0(sp)
   43e60:	403ee83a 	callr	r8
   43e64:	00000206 	br	43e70 <__call_exitprocs+0x104>
   43e68:	b9000017 	ldw	r4,0(r23)
   43e6c:	403ee83a 	callr	r8
   43e70:	99000117 	ldw	r4,4(r19)
   43e74:	e13fcc1e 	bne	fp,r4,43da8 <__alt_data_end+0xfffd3068>
   43e78:	89000017 	ldw	r4,0(r17)
   43e7c:	993fdc26 	beq	r19,r4,43df0 <__alt_data_end+0xfffd30b0>
   43e80:	003fc906 	br	43da8 <__alt_data_end+0xfffd3068>
   43e84:	00800034 	movhi	r2,0
   43e88:	10800004 	addi	r2,r2,0
   43e8c:	10000f26 	beq	r2,zero,43ecc <__call_exitprocs+0x160>
   43e90:	99400117 	ldw	r5,4(r19)
   43e94:	99000017 	ldw	r4,0(r19)
   43e98:	2800091e 	bne	r5,zero,43ec0 <__call_exitprocs+0x154>
   43e9c:	20000826 	beq	r4,zero,43ec0 <__call_exitprocs+0x154>
   43ea0:	89000015 	stw	r4,0(r17)
   43ea4:	a8000226 	beq	r21,zero,43eb0 <__call_exitprocs+0x144>
   43ea8:	a809883a 	mov	r4,r21
   43eac:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   43eb0:	9809883a 	mov	r4,r19
   43eb4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   43eb8:	8cc00017 	ldw	r19,0(r17)
   43ebc:	003fbd06 	br	43db4 <__alt_data_end+0xfffd3074>
   43ec0:	9823883a 	mov	r17,r19
   43ec4:	2027883a 	mov	r19,r4
   43ec8:	003fba06 	br	43db4 <__alt_data_end+0xfffd3074>
   43ecc:	dfc00a17 	ldw	ra,40(sp)
   43ed0:	df000917 	ldw	fp,36(sp)
   43ed4:	ddc00817 	ldw	r23,32(sp)
   43ed8:	dd800717 	ldw	r22,28(sp)
   43edc:	dd400617 	ldw	r21,24(sp)
   43ee0:	dd000517 	ldw	r20,20(sp)
   43ee4:	dcc00417 	ldw	r19,16(sp)
   43ee8:	dc800317 	ldw	r18,12(sp)
   43eec:	dc400217 	ldw	r17,8(sp)
   43ef0:	dc000117 	ldw	r16,4(sp)
   43ef4:	dec00b04 	addi	sp,sp,44
   43ef8:	f800283a 	ret

00043efc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   43efc:	defffd04 	addi	sp,sp,-12
   43f00:	df000215 	stw	fp,8(sp)
   43f04:	df000204 	addi	fp,sp,8
   43f08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   43f0c:	0001883a 	nop
   43f10:	e0bfff17 	ldw	r2,-4(fp)
   43f14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   43f18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   43f1c:	10000226 	beq	r2,zero,43f28 <_exit+0x2c>
    ALT_SIM_FAIL();
   43f20:	002af070 	cmpltui	zero,zero,43969
   43f24:	00000106 	br	43f2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   43f28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   43f2c:	003fff06 	br	43f2c <__alt_data_end+0xfffd31ec>
