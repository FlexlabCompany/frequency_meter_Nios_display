
freq_meter_nios.elf:     file format elf32-littlenios2
freq_meter_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000037e4 memsz 0x000037e4 flags r-x
    LOAD off    0x00004804 vaddr 0x00083804 paddr 0x00084be4 align 2**12
         filesz 0x000013e0 memsz 0x000013e0 flags rw-
    LOAD off    0x00005fc4 vaddr 0x00085fc4 paddr 0x00085fc4 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000034c8  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  0008370c  0008370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013e0  00083804  00084be4  00004804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00085fc4  00085fc4  00005fc4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000860e8  000860e8  00005be4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006e0  00000000  00000000  00005c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a183  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036b3  00000000  00000000  0001046b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003ae3  00000000  00000000  00013b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f58  00000000  00000000  00017604  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021a0  00000000  00000000  0001855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a7b  00000000  00000000  0001a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001c178  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000328  00000000  00000000  0001c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e366  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001e369  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e375  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e376  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001e377  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001e37b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001e37f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001e383  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001e38e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001e399  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  0001e3a4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  0001e3b7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a9d  00000000  00000000  0001e411  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00065dee  00000000  00000000  00023eae  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
0008370c l    d  .rodata	00000000 .rodata
00083804 l    d  .rwdata	00000000 .rwdata
00085fc4 l    d  .bss	00000000 .bss
000860e8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../freq_meter_nios_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00080290 l     F .text	0000004c set_output
000802dc l     F .text	0000008c enable
00080368 l     F .text	00000094 read_busy
000803fc l     F .text	00000080 hd44780_write
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
000838d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080de8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00081548 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000816e4 l     F .text	00000038 alt_dev_reg
000839b0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000819cc l     F .text	0000020c altera_avalon_jtag_uart_irq
00081bd8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00082358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000824c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000824ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000828e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00082a24 l     F .text	00000050 alt_get_errno
00082a74 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
000835c4 l     F .text	00000050 alt_get_errno
00085fe0 g     O .bss	00000004 alt_instruction_exception_handler
00081634 g     F .text	0000006c alt_main
00085fe8 g     O .bss	00000100 alt_irq
00084be4 g       *ABS*	00000000 __flash_rwdata_start
00080c9c g     F .text	0000001c vsprintf
000804c4 g     F .text	00000048 hd44780_home
00080d88 g     F .text	00000060 memmove
00085fc4 g     O .bss	00000004 n
000816a0 g     F .text	00000044 alt_putstr
00082ea0 g     F .text	00000024 altera_nios2_gen2_irq_init
00080cb8 g     F .text	000000a8 __sfvwrite_small_str
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00085fe4 g     O .bss	00000004 errno
00085fcc g     O .bss	00000004 alt_argv
0008cbb8 g       *ABS*	00000000 _gp
00080888 g     F .text	000000fc hd44780_init
00084a38 g     O .rwdata	00000180 alt_fd_list
0008050c g     F .text	00000090 hd44780_display
00082ec4 g     F .text	00000090 alt_find_dev
00080d60 g     F .text	00000028 memcpy
000829a8 g     F .text	0000007c alt_io_redirect
000831ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
00081dd8 g     F .text	0000021c altera_avalon_jtag_uart_read
00080754 g     F .text	00000084 hd44780_print
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008148c g     F .text	00000064 .hidden __udivsi3
0008311c g     F .text	00000090 alt_icache_flush
00080984 g     F .text	00000118 freq_to_lcd
00080b20 g     F .text	00000004 itoa
00083804 g     O .rwdata	00000042 rus_code_mas
00084bd0 g     O .rwdata	00000004 alt_max_fd
00084bb8 g     O .rwdata	00000004 _global_impure_ptr
000860e8 g       *ABS*	00000000 __bss_end
000827f4 g     F .text	000000f0 alt_iic_isr_register
00082d98 g     F .text	00000108 alt_tick
000827a8 g     F .text	0000004c alt_ic_irq_enabled
00082cfc g     F .text	0000009c alt_alarm_stop
00085fd4 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00084a10 g     O .rwdata	00000028 alt_dev_null
0008047c g     F .text	00000048 hd44780_clear
00082478 g     F .text	00000048 alt_dcache_flush_all
00080c3c g     F .text	00000004 utoa
00084be4 g       *ABS*	00000000 __ram_rwdata_end
00084bc8 g     O .rwdata	00000008 alt_dev_list
00083614 g     F .text	000000f8 write
00083804 g       *ABS*	00000000 __ram_rodata_end
000814f0 g     F .text	00000058 .hidden __umodsi3
000860e8 g       *ABS*	00000000 end
00080ab8 g     F .text	00000068 __itoa
00081904 g     F .text	000000c8 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000b0d40 g       *ABS*	00000000 __alt_stack_pointer
00081ff4 g     F .text	00000224 altera_avalon_jtag_uart_write
00083400 g     F .text	00000190 __call_exitprocs
00080244 g     F .text	0000004c _start
0008063c g     F .text	000000cc hd44780_cgram
00085fd8 g     O .bss	00000004 _alt_tick_rate
00083848 g     O .rwdata	00000085 rus_letter_mas
00085fdc g     O .bss	00000004 _alt_nticks
00081754 g     F .text	0000004c alt_sys_init
00081c80 g     F .text	00000068 altera_avalon_jtag_uart_close
00083804 g       *ABS*	00000000 __ram_rwdata_start
0008370c g       *ABS*	00000000 __ram_rodata_start
000817a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00083068 g     F .text	000000b4 alt_get_fd
00083378 g     F .text	00000030 memcmp
00081860 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000860e8 g       *ABS*	00000000 __alt_stack_base
000818b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082f54 g     F .text	00000114 alt_find_file
0008253c g     F .text	000000a4 alt_dev_llist_insert
00080e54 g     F .text	00000524 ___svfprintf_internal_r
00080b40 g     F .text	000000fc __utoa
000832c0 g     F .text	000000b8 __sfvwrite_small_dev
00085fc4 g       *ABS*	00000000 __bss_start
00080708 g     F .text	0000004c hd44780_put
00080a9c g     F .text	0000001c main
00085fd0 g     O .bss	00000004 alt_envp
00081800 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00084bd4 g     O .rwdata	00000004 alt_errno
00081394 g     F .text	00000084 .hidden __divsi3
0008370c g       *ABS*	00000000 __flash_rodata_start
0008171c g     F .text	00000038 alt_irq_init
00082c98 g     F .text	00000064 alt_release_fd
000833a8 g     F .text	00000058 _write_r
00080c40 g     F .text	0000005c _vsprintf_r
00084bbc g     O .rwdata	00000004 _impure_ptr
00085fc8 g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00084bc0 g     O .rwdata	00000008 alt_fs_list
00081378 g     F .text	0000001c __vfprintf_internal_unused
00080020 g       *ABS*	00000000 __ram_exceptions_start
000807d8 g     F .text	000000b0 hd44780_printf
00082614 g     F .text	00000050 alt_ic_isr_register
00084be4 g       *ABS*	00000000 _edata
000860e8 g       *ABS*	00000000 _end
00080244 g       *ABS*	00000000 __ram_exceptions_end
00081ce8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00082704 g     F .text	000000a4 alt_ic_irq_disable
00083248 g     F .text	00000020 exit
00081418 g     F .text	00000074 .hidden __modsi3
000b0d40 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00083590 g     F .text	00000034 _exit
00082218 g     F .text	00000140 alt_alarm_start
00080b24 g     F .text	0000001c strlen
00082b40 g     F .text	00000158 open
0008059c g     F .text	000000a0 hd44780_position
000825e0 g     F .text	00000034 alt_icache_flush_all
00083268 g     F .text	00000058 fputs
00084bd8 g     O .rwdata	00000004 alt_priority_mask
00082664 g     F .text	000000a0 alt_ic_irq_enable
00084bdc g     O .rwdata	00000008 alt_alarm_list
000823a8 g     F .text	000000d0 close
000815b0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffcf2c4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800234 	movhi	r2,8
   80140:	1097fa04 	addi	r2,r2,24552
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800234 	movhi	r2,8
   80158:	1097fa04 	addi	r2,r2,24552
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffcf3ec>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffcf3e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a50a17 	ldw	r2,-27608(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a50a17 	ldw	r2,-27608(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfffcf508>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   8025c:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80260:	d6b2ee14 	ori	gp,gp,52152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80268:	1097f114 	ori	r2,r2,24516

    movhi r3, %hi(__bss_end)
   8026c:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80270:	18d83a14 	ori	r3,r3,24808

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfffcf538>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	00815b00 	call	815b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	00816340 	call	81634 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfffcf54c>

00080290 <set_output>:
char rus_letter_mas[] = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
//char rus_letter_mas[] = {'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е','ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'};
//char rus_letter_mas[] = {"А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я", "а", "б", "в", "г", "д", "е","ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"};

static void set_output(const bool output)
{
   80290:	defffe04 	addi	sp,sp,-8
   80294:	df000115 	stw	fp,4(sp)
   80298:	df000104 	addi	fp,sp,4
   8029c:	e13fff15 	stw	r4,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD_DATA_BASE, 0);
   802a0:	0007883a 	mov	r3,zero
   802a4:	00800434 	movhi	r2,16
   802a8:	10841104 	addi	r2,r2,4164
   802ac:	10c00035 	stwio	r3,0(r2)
	if (output)
   802b0:	e0bfff17 	ldw	r2,-4(fp)
   802b4:	10000426 	beq	r2,zero,802c8 <set_output+0x38>
		IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD_DATA_BASE, 0xFF);
   802b8:	00c03fc4 	movi	r3,255
   802bc:	00800434 	movhi	r2,16
   802c0:	10841104 	addi	r2,r2,4164
   802c4:	10c00035 	stwio	r3,0(r2)
}
   802c8:	0001883a 	nop
   802cc:	e037883a 	mov	sp,fp
   802d0:	df000017 	ldw	fp,0(sp)
   802d4:	dec00104 	addi	sp,sp,4
   802d8:	f800283a 	ret

000802dc <enable>:

static void enable(const bool pulse)
{
   802dc:	defffc04 	addi	sp,sp,-16
   802e0:	df000315 	stw	fp,12(sp)
   802e4:	df000304 	addi	fp,sp,12
   802e8:	e13fff15 	stw	r4,-4(fp)
	if (pulse)
   802ec:	e0bfff17 	ldw	r2,-4(fp)
   802f0:	10000c26 	beq	r2,zero,80324 <enable+0x48>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_E_BASE, 0x01);
   802f4:	00c00044 	movi	r3,1
   802f8:	00800434 	movhi	r2,16
   802fc:	10840404 	addi	r2,r2,4112
   80300:	10c00035 	stwio	r3,0(r2)
		for(int i = 0; i < 5000; i++);
   80304:	e03ffd15 	stw	zero,-12(fp)
   80308:	00000306 	br	80318 <enable+0x3c>
   8030c:	e0bffd17 	ldw	r2,-12(fp)
   80310:	10800044 	addi	r2,r2,1
   80314:	e0bffd15 	stw	r2,-12(fp)
   80318:	e0bffd17 	ldw	r2,-12(fp)
   8031c:	1084e210 	cmplti	r2,r2,5000
   80320:	103ffa1e 	bne	r2,zero,8030c <__alt_data_end+0xfffcf5cc>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_E_BASE, 0);
   80324:	0007883a 	mov	r3,zero
   80328:	00800434 	movhi	r2,16
   8032c:	10840404 	addi	r2,r2,4112
   80330:	10c00035 	stwio	r3,0(r2)
	for(int i = 0; i < 5000; i++);
   80334:	e03ffe15 	stw	zero,-8(fp)
   80338:	00000306 	br	80348 <enable+0x6c>
   8033c:	e0bffe17 	ldw	r2,-8(fp)
   80340:	10800044 	addi	r2,r2,1
   80344:	e0bffe15 	stw	r2,-8(fp)
   80348:	e0bffe17 	ldw	r2,-8(fp)
   8034c:	1084e210 	cmplti	r2,r2,5000
   80350:	103ffa1e 	bne	r2,zero,8033c <__alt_data_end+0xfffcf5fc>
}
   80354:	0001883a 	nop
   80358:	e037883a 	mov	sp,fp
   8035c:	df000017 	ldw	fp,0(sp)
   80360:	dec00104 	addi	sp,sp,4
   80364:	f800283a 	ret

00080368 <read_busy>:

static bool read_busy(void)
{
   80368:	defffd04 	addi	sp,sp,-12
   8036c:	dfc00215 	stw	ra,8(sp)
   80370:	df000115 	stw	fp,4(sp)
   80374:	df000104 	addi	fp,sp,4
	alt_u8 data;

	set_output(FALSE);
   80378:	0009883a 	mov	r4,zero
   8037c:	00802900 	call	80290 <set_output>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
   80380:	0007883a 	mov	r3,zero
   80384:	00800434 	movhi	r2,16
   80388:	10840c04 	addi	r2,r2,4144
   8038c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0x01);
   80390:	00c00044 	movi	r3,1
   80394:	00800434 	movhi	r2,16
   80398:	10840804 	addi	r2,r2,4128
   8039c:	10c00035 	stwio	r3,0(r2)
	enable(FALSE);
   803a0:	0009883a 	mov	r4,zero
   803a4:	00802dc0 	call	802dc <enable>
	data = IORD_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE);
   803a8:	00800434 	movhi	r2,16
   803ac:	10841004 	addi	r2,r2,4160
   803b0:	10800037 	ldwio	r2,0(r2)
   803b4:	e0bfff05 	stb	r2,-4(fp)
	enable(FALSE);
   803b8:	0009883a 	mov	r4,zero
   803bc:	00802dc0 	call	802dc <enable>
	enable(TRUE);
   803c0:	01000044 	movi	r4,1
   803c4:	00802dc0 	call	802dc <enable>

	if (data >> 7 == 1)
   803c8:	e0bfff03 	ldbu	r2,-4(fp)
   803cc:	1004d1fa 	srli	r2,r2,7
   803d0:	10803fcc 	andi	r2,r2,255
   803d4:	10800058 	cmpnei	r2,r2,1
   803d8:	1000021e 	bne	r2,zero,803e4 <read_busy+0x7c>
		return (TRUE);
   803dc:	00800044 	movi	r2,1
   803e0:	00000106 	br	803e8 <read_busy+0x80>

	return (FALSE);
   803e4:	0005883a 	mov	r2,zero

}
   803e8:	e037883a 	mov	sp,fp
   803ec:	dfc00117 	ldw	ra,4(sp)
   803f0:	df000017 	ldw	fp,0(sp)
   803f4:	dec00204 	addi	sp,sp,8
   803f8:	f800283a 	ret

000803fc <hd44780_write>:

static void hd44780_write(const alt_u8 data, const bool reg)
{
   803fc:	defffc04 	addi	sp,sp,-16
   80400:	dfc00315 	stw	ra,12(sp)
   80404:	df000215 	stw	fp,8(sp)
   80408:	df000204 	addi	fp,sp,8
   8040c:	2005883a 	mov	r2,r4
   80410:	e17fff15 	stw	r5,-4(fp)
   80414:	e0bffe05 	stb	r2,-8(fp)
	set_output(TRUE);
   80418:	01000044 	movi	r4,1
   8041c:	00802900 	call	80290 <set_output>
	//alt_putstr("set_output TRUE\n");
	
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0);
   80420:	0007883a 	mov	r3,zero
   80424:	00800434 	movhi	r2,16
   80428:	10840804 	addi	r2,r2,4128
   8042c:	10c00035 	stwio	r3,0(r2)
	//alt_putstr("RW 0\n");
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, reg);
   80430:	00800434 	movhi	r2,16
   80434:	10840c04 	addi	r2,r2,4144
   80438:	e0ffff17 	ldw	r3,-4(fp)
   8043c:	10c00035 	stwio	r3,0(r2)
	//alt_putstr("RS installed\n");
	
	if (MODE_8_OR_4 == 8) IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data);
   80440:	e0fffe03 	ldbu	r3,-8(fp)
   80444:	00800434 	movhi	r2,16
   80448:	10841004 	addi	r2,r2,4160
   8044c:	10c00035 	stwio	r3,0(r2)
	else IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data << 4);
	//alt_putstr("data installed\n");
	//printf("%x\n", data);
	
	enable(TRUE);
   80450:	01000044 	movi	r4,1
   80454:	00802dc0 	call	802dc <enable>
	//alt_putstr("enable\n");
	while(!read_busy());
   80458:	0001883a 	nop
   8045c:	00803680 	call	80368 <read_busy>
   80460:	103ffe26 	beq	r2,zero,8045c <__alt_data_end+0xfffcf71c>
}
   80464:	0001883a 	nop
   80468:	e037883a 	mov	sp,fp
   8046c:	dfc00117 	ldw	ra,4(sp)
   80470:	df000017 	ldw	fp,0(sp)
   80474:	dec00204 	addi	sp,sp,8
   80478:	f800283a 	ret

0008047c <hd44780_clear>:

/**
 * Clear the LCD
 */
void hd44780_clear()
{
   8047c:	defffc04 	addi	sp,sp,-16
   80480:	dfc00315 	stw	ra,12(sp)
   80484:	df000215 	stw	fp,8(sp)
   80488:	df000204 	addi	fp,sp,8
	int data = 0x01;
   8048c:	00800044 	movi	r2,1
   80490:	e0bffe15 	stw	r2,-8(fp)
	int rs = 0;
   80494:	e03fff15 	stw	zero,-4(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(data, rs);
   80498:	e0bffe17 	ldw	r2,-8(fp)
   8049c:	10803fcc 	andi	r2,r2,255
   804a0:	e17fff17 	ldw	r5,-4(fp)
   804a4:	1009883a 	mov	r4,r2
   804a8:	00803fc0 	call	803fc <hd44780_write>
}
   804ac:	0001883a 	nop
   804b0:	e037883a 	mov	sp,fp
   804b4:	dfc00117 	ldw	ra,4(sp)
   804b8:	df000017 	ldw	fp,0(sp)
   804bc:	dec00204 	addi	sp,sp,8
   804c0:	f800283a 	ret

000804c4 <hd44780_home>:

/**
 * Move cursor home
 */
void hd44780_home()
{
   804c4:	defffc04 	addi	sp,sp,-16
   804c8:	dfc00315 	stw	ra,12(sp)
   804cc:	df000215 	stw	fp,8(sp)
   804d0:	df000204 	addi	fp,sp,8
	int data = 0x02;
   804d4:	00800084 	movi	r2,2
   804d8:	e0bffe15 	stw	r2,-8(fp)
	int rs = 0;
   804dc:	e03fff15 	stw	zero,-4(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(data, rs);
   804e0:	e0bffe17 	ldw	r2,-8(fp)
   804e4:	10803fcc 	andi	r2,r2,255
   804e8:	e17fff17 	ldw	r5,-4(fp)
   804ec:	1009883a 	mov	r4,r2
   804f0:	00803fc0 	call	803fc <hd44780_write>
}
   804f4:	0001883a 	nop
   804f8:	e037883a 	mov	sp,fp
   804fc:	dfc00117 	ldw	ra,4(sp)
   80500:	df000017 	ldw	fp,0(sp)
   80504:	dec00204 	addi	sp,sp,8
   80508:	f800283a 	ret

0008050c <hd44780_display>:
 * @param cursor	Cursor on/off
 * @param blink		Blinking cursor on/off
 *
 */
void hd44780_display(const bool enable, const bool cursor, const bool blink)
{
   8050c:	defff904 	addi	sp,sp,-28
   80510:	dfc00615 	stw	ra,24(sp)
   80514:	df000515 	stw	fp,20(sp)
   80518:	df000504 	addi	fp,sp,20
   8051c:	e13ffd15 	stw	r4,-12(fp)
   80520:	e17ffe15 	stw	r5,-8(fp)
   80524:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 command = HD44780_DISPLAY;
   80528:	00800204 	movi	r2,8
   8052c:	e0bffb0d 	sth	r2,-20(fp)

	if (enable)
   80530:	e0bffd17 	ldw	r2,-12(fp)
   80534:	10000326 	beq	r2,zero,80544 <hd44780_display+0x38>
		command |= HD44780_DISPLAY_ON;
   80538:	e0bffb0b 	ldhu	r2,-20(fp)
   8053c:	10800114 	ori	r2,r2,4
   80540:	e0bffb0d 	sth	r2,-20(fp)
	if (cursor)
   80544:	e0bffe17 	ldw	r2,-8(fp)
   80548:	10000326 	beq	r2,zero,80558 <hd44780_display+0x4c>
		command |= HD44780_CURSOR_ON;
   8054c:	e0bffb0b 	ldhu	r2,-20(fp)
   80550:	10800094 	ori	r2,r2,2
   80554:	e0bffb0d 	sth	r2,-20(fp)
	if (blink)
   80558:	e0bfff17 	ldw	r2,-4(fp)
   8055c:	10000326 	beq	r2,zero,8056c <hd44780_display+0x60>
		command |= HD44780_BLINK_ON;
   80560:	e0bffb0b 	ldhu	r2,-20(fp)
   80564:	10800054 	ori	r2,r2,1
   80568:	e0bffb0d 	sth	r2,-20(fp)

	int rs = 0;
   8056c:	e03ffc15 	stw	zero,-16(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(command, rs);
   80570:	e0bffb0b 	ldhu	r2,-20(fp)
   80574:	10803fcc 	andi	r2,r2,255
   80578:	e17ffc17 	ldw	r5,-16(fp)
   8057c:	1009883a 	mov	r4,r2
   80580:	00803fc0 	call	803fc <hd44780_write>
}
   80584:	0001883a 	nop
   80588:	e037883a 	mov	sp,fp
   8058c:	dfc00117 	ldw	ra,4(sp)
   80590:	df000017 	ldw	fp,0(sp)
   80594:	dec00204 	addi	sp,sp,8
   80598:	f800283a 	ret

0008059c <hd44780_position>:
 *
 * @param row	Row
 * @param col	Column
 */
void hd44780_position(const alt_u8 row, const alt_u8 col)
{
   8059c:	defff904 	addi	sp,sp,-28
   805a0:	dfc00615 	stw	ra,24(sp)
   805a4:	df000515 	stw	fp,20(sp)
   805a8:	df000504 	addi	fp,sp,20
   805ac:	2007883a 	mov	r3,r4
   805b0:	2805883a 	mov	r2,r5
   805b4:	e0fffe05 	stb	r3,-8(fp)
   805b8:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 command = HD44780_DGRAM;
   805bc:	00802004 	movi	r2,128
   805c0:	e0bffb0d 	sth	r2,-20(fp)
	const alt_u8 offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   805c4:	e03ffd05 	stb	zero,-12(fp)
   805c8:	00801004 	movi	r2,64
   805cc:	e0bffd45 	stb	r2,-11(fp)
   805d0:	00800504 	movi	r2,20
   805d4:	e0bffd85 	stb	r2,-10(fp)
   805d8:	00801504 	movi	r2,84
   805dc:	e0bffdc5 	stb	r2,-9(fp)

	command |= col + offsets[row];
   805e0:	e0ffff03 	ldbu	r3,-4(fp)
   805e4:	e0bffe03 	ldbu	r2,-8(fp)
   805e8:	e13ffd04 	addi	r4,fp,-12
   805ec:	2085883a 	add	r2,r4,r2
   805f0:	10800003 	ldbu	r2,0(r2)
   805f4:	10803fcc 	andi	r2,r2,255
   805f8:	1885883a 	add	r2,r3,r2
   805fc:	1007883a 	mov	r3,r2
   80600:	e0bffb0b 	ldhu	r2,-20(fp)
   80604:	1884b03a 	or	r2,r3,r2
   80608:	e0bffb0d 	sth	r2,-20(fp)
	int rs = 0;
   8060c:	e03ffc15 	stw	zero,-16(fp)
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
		xSemaphoreGive( Mutex_write_lcd );
	}*/
	hd44780_write(command, rs);
   80610:	e0bffb0b 	ldhu	r2,-20(fp)
   80614:	10803fcc 	andi	r2,r2,255
   80618:	e17ffc17 	ldw	r5,-16(fp)
   8061c:	1009883a 	mov	r4,r2
   80620:	00803fc0 	call	803fc <hd44780_write>
}
   80624:	0001883a 	nop
   80628:	e037883a 	mov	sp,fp
   8062c:	dfc00117 	ldw	ra,4(sp)
   80630:	df000017 	ldw	fp,0(sp)
   80634:	dec00204 	addi	sp,sp,8
   80638:	f800283a 	ret

0008063c <hd44780_cgram>:
 *
 * @param pos	UDG number
 * @param udg	UDG definition
 */
void hd44780_cgram(const alt_u8 pos, const char udg[8])
{
   8063c:	defffa04 	addi	sp,sp,-24
   80640:	dfc00515 	stw	ra,20(sp)
   80644:	df000415 	stw	fp,16(sp)
   80648:	df000404 	addi	fp,sp,16
   8064c:	2005883a 	mov	r2,r4
   80650:	e17fff15 	stw	r5,-4(fp)
   80654:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 i;
	alt_u16 command = HD44780_CGRAM;
   80658:	00801004 	movi	r2,64
   8065c:	e0bffc8d 	sth	r2,-14(fp)

	if (pos < 8) alt_putstr("pos cgram failed");
   80660:	e0bffe03 	ldbu	r2,-8(fp)
   80664:	10800228 	cmpgeui	r2,r2,8
   80668:	1000031e 	bne	r2,zero,80678 <hd44780_cgram+0x3c>
   8066c:	01000234 	movhi	r4,8
   80670:	210dc304 	addi	r4,r4,14092
   80674:	00816a00 	call	816a0 <alt_putstr>

	command |= pos * 8;
   80678:	e0bffe03 	ldbu	r2,-8(fp)
   8067c:	100490fa 	slli	r2,r2,3
   80680:	1007883a 	mov	r3,r2
   80684:	e0bffc8b 	ldhu	r2,-14(fp)
   80688:	1884b03a 	or	r2,r3,r2
   8068c:	e0bffc8d 	sth	r2,-14(fp)

	int rs = 0;
   80690:	e03ffd15 	stw	zero,-12(fp)
	/*if( xSemaphoreTake( Mutex_write_lcd, portMAX_DELAY ) == pdTRUE )
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(command, rs);
   80694:	e0bffc8b 	ldhu	r2,-14(fp)
   80698:	10803fcc 	andi	r2,r2,255
   8069c:	e17ffd17 	ldw	r5,-12(fp)
   806a0:	1009883a 	mov	r4,r2
   806a4:	00803fc0 	call	803fc <hd44780_write>
		rs = 1;
   806a8:	00800044 	movi	r2,1
   806ac:	e0bffd15 	stw	r2,-12(fp)
		for (i = 0; i < 8; i++)
   806b0:	e03ffc05 	stb	zero,-16(fp)
   806b4:	00000b06 	br	806e4 <hd44780_cgram+0xa8>
		{
				/*xQueueSendToBack(Queue_lcd_data, &udg[i], portMAX_DELAY);
				xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
				hd44780_write(udg[i], rs);
   806b8:	e0bffc03 	ldbu	r2,-16(fp)
   806bc:	e0ffff17 	ldw	r3,-4(fp)
   806c0:	1885883a 	add	r2,r3,r2
   806c4:	10800003 	ldbu	r2,0(r2)
   806c8:	10803fcc 	andi	r2,r2,255
   806cc:	e17ffd17 	ldw	r5,-12(fp)
   806d0:	1009883a 	mov	r4,r2
   806d4:	00803fc0 	call	803fc <hd44780_write>
	{
		xQueueSendToBack(Queue_lcd_data, &command, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(command, rs);
		rs = 1;
		for (i = 0; i < 8; i++)
   806d8:	e0bffc03 	ldbu	r2,-16(fp)
   806dc:	10800044 	addi	r2,r2,1
   806e0:	e0bffc05 	stb	r2,-16(fp)
   806e4:	e0bffc03 	ldbu	r2,-16(fp)
   806e8:	10800230 	cmpltui	r2,r2,8
   806ec:	103ff21e 	bne	r2,zero,806b8 <__alt_data_end+0xfffcf978>
				xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
				hd44780_write(udg[i], rs);
		}
		/*xSemaphoreGive( Mutex_write_lcd );
	}*/
}
   806f0:	0001883a 	nop
   806f4:	e037883a 	mov	sp,fp
   806f8:	dfc00117 	ldw	ra,4(sp)
   806fc:	df000017 	ldw	fp,0(sp)
   80700:	dec00204 	addi	sp,sp,8
   80704:	f800283a 	ret

00080708 <hd44780_put>:
 * Send a single character to the LCD
 *
 * @param chr	Character to send
 */
void hd44780_put(const char chr)
{
   80708:	defffc04 	addi	sp,sp,-16
   8070c:	dfc00315 	stw	ra,12(sp)
   80710:	df000215 	stw	fp,8(sp)
   80714:	df000204 	addi	fp,sp,8
   80718:	2005883a 	mov	r2,r4
   8071c:	e0bfff05 	stb	r2,-4(fp)
	int rs = 1;
   80720:	00800044 	movi	r2,1
   80724:	e0bffe15 	stw	r2,-8(fp)
			xQueueSendToBack(Queue_lcd_data, &chr, portMAX_DELAY);
			xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);
			xSemaphoreGive( Mutex_write_lcd );
	
	}*/
	hd44780_write(chr, rs);
   80728:	e0bfff03 	ldbu	r2,-4(fp)
   8072c:	10803fcc 	andi	r2,r2,255
   80730:	e17ffe17 	ldw	r5,-8(fp)
   80734:	1009883a 	mov	r4,r2
   80738:	00803fc0 	call	803fc <hd44780_write>
}
   8073c:	0001883a 	nop
   80740:	e037883a 	mov	sp,fp
   80744:	dfc00117 	ldw	ra,4(sp)
   80748:	df000017 	ldw	fp,0(sp)
   8074c:	dec00204 	addi	sp,sp,8
   80750:	f800283a 	ret

00080754 <hd44780_print>:
 * Send a string to the LCD
 *
 * @param string	String to send
 */
void hd44780_print(const char* string)
{
   80754:	defffa04 	addi	sp,sp,-24
   80758:	dfc00515 	stw	ra,20(sp)
   8075c:	df000415 	stw	fp,16(sp)
   80760:	dc000315 	stw	r16,12(sp)
   80764:	df000404 	addi	fp,sp,16
   80768:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 i = 0;
   8076c:	e03ffc05 	stb	zero,-16(fp)
	int rs = 1;
   80770:	00800044 	movi	r2,1
   80774:	e0bffd15 	stw	r2,-12(fp)
	
	for(; i < strlen(string); i++)
   80778:	00000c06 	br	807ac <hd44780_print+0x58>
	{
		hd44780_put(string[i]);
   8077c:	e0bffc03 	ldbu	r2,-16(fp)
   80780:	e0fffe17 	ldw	r3,-8(fp)
   80784:	1885883a 	add	r2,r3,r2
   80788:	10800003 	ldbu	r2,0(r2)
   8078c:	10803fcc 	andi	r2,r2,255
   80790:	1080201c 	xori	r2,r2,128
   80794:	10bfe004 	addi	r2,r2,-128
   80798:	1009883a 	mov	r4,r2
   8079c:	00807080 	call	80708 <hd44780_put>
void hd44780_print(const char* string)
{
	alt_u8 i = 0;
	int rs = 1;
	
	for(; i < strlen(string); i++)
   807a0:	e0bffc03 	ldbu	r2,-16(fp)
   807a4:	10800044 	addi	r2,r2,1
   807a8:	e0bffc05 	stb	r2,-16(fp)
   807ac:	e43ffc03 	ldbu	r16,-16(fp)
   807b0:	e13ffe17 	ldw	r4,-8(fp)
   807b4:	0080b240 	call	80b24 <strlen>
   807b8:	80bff036 	bltu	r16,r2,8077c <__alt_data_end+0xfffcfa3c>
	{
		hd44780_put(string[i]);
	}
}
   807bc:	0001883a 	nop
   807c0:	e6ffff04 	addi	sp,fp,-4
   807c4:	dfc00217 	ldw	ra,8(sp)
   807c8:	df000117 	ldw	fp,4(sp)
   807cc:	dc000017 	ldw	r16,0(sp)
   807d0:	dec00304 	addi	sp,sp,12
   807d4:	f800283a 	ret

000807d8 <hd44780_printf>:
 *
 * @param fmt	String format
 * @param ...	Variable arguments (see printf())
 */
void hd44780_printf(const char *fmt, ...)
{
   807d8:	deffee04 	addi	sp,sp,-72
   807dc:	dfc00e15 	stw	ra,56(sp)
   807e0:	df000d15 	stw	fp,52(sp)
   807e4:	df000d04 	addi	fp,sp,52
   807e8:	e13fff15 	stw	r4,-4(fp)
   807ec:	e1400215 	stw	r5,8(fp)
   807f0:	e1800315 	stw	r6,12(fp)
   807f4:	e1c00415 	stw	r7,16(fp)
	alt_u16 i;
	alt_u16 size;
	alt_u8 character;
	char buffer[32];
	va_list args;
	int rs = 1;
   807f8:	00800044 	movi	r2,1
   807fc:	e0bff415 	stw	r2,-48(fp)

	va_start(args, fmt);
   80800:	e0800204 	addi	r2,fp,8
   80804:	e0bffe15 	stw	r2,-8(fp)
	size = vsprintf(buffer, fmt, args);
   80808:	e0fffe17 	ldw	r3,-8(fp)
   8080c:	e0bff5c4 	addi	r2,fp,-41
   80810:	180d883a 	mov	r6,r3
   80814:	e17fff17 	ldw	r5,-4(fp)
   80818:	1009883a 	mov	r4,r2
   8081c:	0080c9c0 	call	80c9c <vsprintf>
   80820:	e0bff50d 	sth	r2,-44(fp)
	for (i = 0; i < size; i++)
   80824:	e03ff30d 	sth	zero,-52(fp)
   80828:	00000e06 	br	80864 <hd44780_printf+0x8c>
	{
		character = buffer[i];
   8082c:	e0bff30b 	ldhu	r2,-52(fp)
   80830:	e0fff5c4 	addi	r3,fp,-41
   80834:	1885883a 	add	r2,r3,r2
   80838:	10800003 	ldbu	r2,0(r2)
   8083c:	e0bff585 	stb	r2,-42(fp)
		hd44780_put(character);
   80840:	e0bff583 	ldbu	r2,-42(fp)
   80844:	10803fcc 	andi	r2,r2,255
   80848:	1080201c 	xori	r2,r2,128
   8084c:	10bfe004 	addi	r2,r2,-128
   80850:	1009883a 	mov	r4,r2
   80854:	00807080 	call	80708 <hd44780_put>
	va_list args;
	int rs = 1;

	va_start(args, fmt);
	size = vsprintf(buffer, fmt, args);
	for (i = 0; i < size; i++)
   80858:	e0bff30b 	ldhu	r2,-52(fp)
   8085c:	10800044 	addi	r2,r2,1
   80860:	e0bff30d 	sth	r2,-52(fp)
   80864:	e0fff30b 	ldhu	r3,-52(fp)
   80868:	e0bff50b 	ldhu	r2,-44(fp)
   8086c:	18bfef36 	bltu	r3,r2,8082c <__alt_data_end+0xfffcfaec>
	{
		character = buffer[i];
		hd44780_put(character);
	}
}
   80870:	0001883a 	nop
   80874:	e037883a 	mov	sp,fp
   80878:	dfc00117 	ldw	ra,4(sp)
   8087c:	df000017 	ldw	fp,0(sp)
   80880:	dec00504 	addi	sp,sp,20
   80884:	f800283a 	ret

00080888 <hd44780_init>:

/**
 * Initialise the LCD
 */
void hd44780_init()
{
   80888:	defffb04 	addi	sp,sp,-20
   8088c:	dfc00415 	stw	ra,16(sp)
   80890:	df000315 	stw	fp,12(sp)
   80894:	df000304 	addi	fp,sp,12
	int data, rs = 0;
   80898:	e03ffe15 	stw	zero,-8(fp)
	alt_putstr("initialisation start\n");
   8089c:	01000234 	movhi	r4,8
   808a0:	210dc804 	addi	r4,r4,14112
   808a4:	00816a00 	call	816a0 <alt_putstr>
	//function set
	/*if( xSemaphoreTake( Mutex_write_lcd, portMAX_DELAY ) == pdTRUE )
	{*/
		//vTaskDelay(35*10);
		for(int i = 0; i < 5000000; i++);
   808a8:	e03ffd15 	stw	zero,-12(fp)
   808ac:	00000306 	br	808bc <hd44780_init+0x34>
   808b0:	e0bffd17 	ldw	r2,-12(fp)
   808b4:	10800044 	addi	r2,r2,1
   808b8:	e0bffd15 	stw	r2,-12(fp)
   808bc:	e0fffd17 	ldw	r3,-12(fp)
   808c0:	00801334 	movhi	r2,76
   808c4:	1092cfc4 	addi	r2,r2,19263
   808c8:	10fff90e 	bge	r2,r3,808b0 <__alt_data_end+0xfffcfb70>
		data = 0x3C;
   808cc:	00800f04 	movi	r2,60
   808d0:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   808d4:	e0bfff17 	ldw	r2,-4(fp)
   808d8:	10803fcc 	andi	r2,r2,255
   808dc:	e17ffe17 	ldw	r5,-8(fp)
   808e0:	1009883a 	mov	r4,r2
   808e4:	00803fc0 	call	803fc <hd44780_write>
		alt_putstr("initialisation function\n");
   808e8:	01000234 	movhi	r4,8
   808ec:	210dce04 	addi	r4,r4,14136
   808f0:	00816a00 	call	816a0 <alt_putstr>
		//display and cursor control
		data = 0x0C;
   808f4:	00800304 	movi	r2,12
   808f8:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   808fc:	e0bfff17 	ldw	r2,-4(fp)
   80900:	10803fcc 	andi	r2,r2,255
   80904:	e17ffe17 	ldw	r5,-8(fp)
   80908:	1009883a 	mov	r4,r2
   8090c:	00803fc0 	call	803fc <hd44780_write>
		alt_putstr("initialisation display\n");
   80910:	01000234 	movhi	r4,8
   80914:	210dd504 	addi	r4,r4,14164
   80918:	00816a00 	call	816a0 <alt_putstr>
		//display clear
		data = 0x01;
   8091c:	00800044 	movi	r2,1
   80920:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   80924:	e0bfff17 	ldw	r2,-4(fp)
   80928:	10803fcc 	andi	r2,r2,255
   8092c:	e17ffe17 	ldw	r5,-8(fp)
   80930:	1009883a 	mov	r4,r2
   80934:	00803fc0 	call	803fc <hd44780_write>
		alt_putstr("clear display\n");
   80938:	01000234 	movhi	r4,8
   8093c:	210ddb04 	addi	r4,r4,14188
   80940:	00816a00 	call	816a0 <alt_putstr>
		//entry mode set
		data = 0x06;
   80944:	00800184 	movi	r2,6
   80948:	e0bfff15 	stw	r2,-4(fp)
		/*xQueueSendToBack(Queue_lcd_data, &data, portMAX_DELAY);
		xQueueSendToBack(Queue_lcd_rs, &rs, portMAX_DELAY);*/
		hd44780_write(data, rs);
   8094c:	e0bfff17 	ldw	r2,-4(fp)
   80950:	10803fcc 	andi	r2,r2,255
   80954:	e17ffe17 	ldw	r5,-8(fp)
   80958:	1009883a 	mov	r4,r2
   8095c:	00803fc0 	call	803fc <hd44780_write>
		
		//data = 0x18;
		//hd44780_write(data, rs);
		/*xSemaphoreGive( Mutex_write_lcd );
	}*/
	alt_putstr("initialisation finished\n");
   80960:	01000234 	movhi	r4,8
   80964:	210ddf04 	addi	r4,r4,14204
   80968:	00816a00 	call	816a0 <alt_putstr>
	/* hd44780_clear();
	hd44780_home(); */
}
   8096c:	0001883a 	nop
   80970:	e037883a 	mov	sp,fp
   80974:	dfc00117 	ldw	ra,4(sp)
   80978:	df000017 	ldw	fp,0(sp)
   8097c:	dec00204 	addi	sp,sp,8
   80980:	f800283a 	ret

00080984 <freq_to_lcd>:
#include "alt_types.h"

int n = 0;

void freq_to_lcd()
{
   80984:	defff604 	addi	sp,sp,-40
   80988:	dfc00915 	stw	ra,36(sp)
   8098c:	df000815 	stw	fp,32(sp)
   80990:	df000804 	addi	fp,sp,32
	int write_en = 0;
   80994:	e03ff815 	stw	zero,-32(fp)
	char zagolovok [] = {0xAB,0x61,0x63,0xBF,0x6F,0xBF,0x61}, znachenie [20];
   80998:	00bfeac4 	movi	r2,-85
   8099c:	e0bff905 	stb	r2,-28(fp)
   809a0:	00801844 	movi	r2,97
   809a4:	e0bff945 	stb	r2,-27(fp)
   809a8:	008018c4 	movi	r2,99
   809ac:	e0bff985 	stb	r2,-26(fp)
   809b0:	00bfefc4 	movi	r2,-65
   809b4:	e0bff9c5 	stb	r2,-25(fp)
   809b8:	00801bc4 	movi	r2,111
   809bc:	e0bffa05 	stb	r2,-24(fp)
   809c0:	00bfefc4 	movi	r2,-65
   809c4:	e0bffa45 	stb	r2,-23(fp)
   809c8:	00801844 	movi	r2,97
   809cc:	e0bffa85 	stb	r2,-22(fp)
	if(IORD_ALTERA_AVALON_PIO_DATA(FREQ_EN_BASE))
   809d0:	00800434 	movhi	r2,16
   809d4:	10840004 	addi	r2,r2,4096
   809d8:	10800037 	ldwio	r2,0(r2)
   809dc:	10002826 	beq	r2,zero,80a80 <freq_to_lcd+0xfc>
	{
		write_en++;
   809e0:	e0bff817 	ldw	r2,-32(fp)
   809e4:	10800044 	addi	r2,r2,1
   809e8:	e0bff815 	stw	r2,-32(fp)
		//printf("frequency enable\n");
		if (write_en == 1)
   809ec:	e0bff817 	ldw	r2,-32(fp)
   809f0:	10800058 	cmpnei	r2,r2,1
   809f4:	1000231e 	bne	r2,zero,80a84 <freq_to_lcd+0x100>
		{
			//printf("home\n");
			//hd44780_clear();
			itoa(IORD_ALTERA_AVALON_PIO_DATA(FREQ_BASE), znachenie, 10);
   809f8:	00800434 	movhi	r2,16
   809fc:	10841804 	addi	r2,r2,4192
   80a00:	10800037 	ldwio	r2,0(r2)
   80a04:	e0fffac4 	addi	r3,fp,-21
   80a08:	01800284 	movi	r6,10
   80a0c:	180b883a 	mov	r5,r3
   80a10:	1009883a 	mov	r4,r2
   80a14:	0080b200 	call	80b20 <itoa>
			hd44780_position(0, 0/*strlen(znachenie) + 12*/);
   80a18:	000b883a 	mov	r5,zero
   80a1c:	0009883a 	mov	r4,zero
   80a20:	008059c0 	call	8059c <hd44780_position>
			//hd44780_print(zagolovok);
			//printf("frequency\n");
			hd44780_print("frequency");
   80a24:	01000234 	movhi	r4,8
   80a28:	210de604 	addi	r4,r4,14232
   80a2c:	00807540 	call	80754 <hd44780_print>
			hd44780_print("=");
   80a30:	01000234 	movhi	r4,8
   80a34:	210de904 	addi	r4,r4,14244
   80a38:	00807540 	call	80754 <hd44780_print>
			//alt_putstr(znachenie);
			hd44780_print(znachenie);
   80a3c:	e0bffac4 	addi	r2,fp,-21
   80a40:	1009883a 	mov	r4,r2
   80a44:	00807540 	call	80754 <hd44780_print>

			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << n);
   80a48:	d0a50317 	ldw	r2,-27636(gp)
   80a4c:	00c00044 	movi	r3,1
   80a50:	1886983a 	sll	r3,r3,r2
   80a54:	00800434 	movhi	r2,16
   80a58:	10841c04 	addi	r2,r2,4208
   80a5c:	10c00035 	stwio	r3,0(r2)
			n++;
   80a60:	d0a50317 	ldw	r2,-27636(gp)
   80a64:	10800044 	addi	r2,r2,1
   80a68:	d0a50315 	stw	r2,-27636(gp)
			if (n == LED_DATA_WIDTH) n = 0;
   80a6c:	d0a50317 	ldw	r2,-27636(gp)
   80a70:	10800218 	cmpnei	r2,r2,8
   80a74:	1000031e 	bne	r2,zero,80a84 <freq_to_lcd+0x100>
   80a78:	d0250315 	stw	zero,-27636(gp)
		}
	}
	else write_en = 0;

}
   80a7c:	00000106 	br	80a84 <freq_to_lcd+0x100>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << n);
			n++;
			if (n == LED_DATA_WIDTH) n = 0;
		}
	}
	else write_en = 0;
   80a80:	e03ff815 	stw	zero,-32(fp)

}
   80a84:	0001883a 	nop
   80a88:	e037883a 	mov	sp,fp
   80a8c:	dfc00117 	ldw	ra,4(sp)
   80a90:	df000017 	ldw	fp,0(sp)
   80a94:	dec00204 	addi	sp,sp,8
   80a98:	f800283a 	ret

00080a9c <main>:

int main()
{
   80a9c:	defffe04 	addi	sp,sp,-8
   80aa0:	dfc00115 	stw	ra,4(sp)
   80aa4:	df000015 	stw	fp,0(sp)
   80aa8:	d839883a 	mov	fp,sp
	hd44780_init();
   80aac:	00808880 	call	80888 <hd44780_init>
	while(1)
	{
		freq_to_lcd();
   80ab0:	00809840 	call	80984 <freq_to_lcd>
	}
   80ab4:	003ffe06 	br	80ab0 <__alt_data_end+0xfffcfd70>

00080ab8 <__itoa>:
   80ab8:	30bfff84 	addi	r2,r6,-2
   80abc:	00c00884 	movi	r3,34
   80ac0:	1880032e 	bgeu	r3,r2,80ad0 <__itoa+0x18>
   80ac4:	28000005 	stb	zero,0(r5)
   80ac8:	0005883a 	mov	r2,zero
   80acc:	f800283a 	ret
   80ad0:	defffe04 	addi	sp,sp,-8
   80ad4:	dfc00115 	stw	ra,4(sp)
   80ad8:	dc000015 	stw	r16,0(sp)
   80adc:	00800284 	movi	r2,10
   80ae0:	3080061e 	bne	r6,r2,80afc <__itoa+0x44>
   80ae4:	2000050e 	bge	r4,zero,80afc <__itoa+0x44>
   80ae8:	00800b44 	movi	r2,45
   80aec:	28800005 	stb	r2,0(r5)
   80af0:	0109c83a 	sub	r4,zero,r4
   80af4:	00800044 	movi	r2,1
   80af8:	00000106 	br	80b00 <__itoa+0x48>
   80afc:	0005883a 	mov	r2,zero
   80b00:	2821883a 	mov	r16,r5
   80b04:	288b883a 	add	r5,r5,r2
   80b08:	0080b400 	call	80b40 <__utoa>
   80b0c:	8005883a 	mov	r2,r16
   80b10:	dfc00117 	ldw	ra,4(sp)
   80b14:	dc000017 	ldw	r16,0(sp)
   80b18:	dec00204 	addi	sp,sp,8
   80b1c:	f800283a 	ret

00080b20 <itoa>:
   80b20:	0080ab81 	jmpi	80ab8 <__itoa>

00080b24 <strlen>:
   80b24:	2005883a 	mov	r2,r4
   80b28:	10c00007 	ldb	r3,0(r2)
   80b2c:	18000226 	beq	r3,zero,80b38 <strlen+0x14>
   80b30:	10800044 	addi	r2,r2,1
   80b34:	003ffc06 	br	80b28 <__alt_data_end+0xfffcfde8>
   80b38:	1105c83a 	sub	r2,r2,r4
   80b3c:	f800283a 	ret

00080b40 <__utoa>:
   80b40:	deffef04 	addi	sp,sp,-68
   80b44:	dc000a15 	stw	r16,40(sp)
   80b48:	2821883a 	mov	r16,r5
   80b4c:	01400234 	movhi	r5,8
   80b50:	dd400f15 	stw	r21,60(sp)
   80b54:	dcc00d15 	stw	r19,52(sp)
   80b58:	302b883a 	mov	r21,r6
   80b5c:	2027883a 	mov	r19,r4
   80b60:	01800944 	movi	r6,37
   80b64:	294dea04 	addi	r5,r5,14248
   80b68:	d809883a 	mov	r4,sp
   80b6c:	dfc01015 	stw	ra,64(sp)
   80b70:	dd000e15 	stw	r20,56(sp)
   80b74:	dc800c15 	stw	r18,48(sp)
   80b78:	dc400b15 	stw	r17,44(sp)
   80b7c:	0080d600 	call	80d60 <memcpy>
   80b80:	a8bfff84 	addi	r2,r21,-2
   80b84:	00c00884 	movi	r3,34
   80b88:	1880032e 	bgeu	r3,r2,80b98 <__utoa+0x58>
   80b8c:	80000005 	stb	zero,0(r16)
   80b90:	0005883a 	mov	r2,zero
   80b94:	00002006 	br	80c18 <__utoa+0xd8>
   80b98:	8029883a 	mov	r20,r16
   80b9c:	0023883a 	mov	r17,zero
   80ba0:	9809883a 	mov	r4,r19
   80ba4:	a80b883a 	mov	r5,r21
   80ba8:	00814f00 	call	814f0 <__umodsi3>
   80bac:	d885883a 	add	r2,sp,r2
   80bb0:	10800003 	ldbu	r2,0(r2)
   80bb4:	9809883a 	mov	r4,r19
   80bb8:	a80b883a 	mov	r5,r21
   80bbc:	a0800005 	stb	r2,0(r20)
   80bc0:	008148c0 	call	8148c <__udivsi3>
   80bc4:	8c800044 	addi	r18,r17,1
   80bc8:	1027883a 	mov	r19,r2
   80bcc:	a5000044 	addi	r20,r20,1
   80bd0:	10000226 	beq	r2,zero,80bdc <__utoa+0x9c>
   80bd4:	9023883a 	mov	r17,r18
   80bd8:	003ff106 	br	80ba0 <__alt_data_end+0xfffcfe60>
   80bdc:	84a5883a 	add	r18,r16,r18
   80be0:	90000005 	stb	zero,0(r18)
   80be4:	8445883a 	add	r2,r16,r17
   80be8:	8007883a 	mov	r3,r16
   80bec:	1409c83a 	sub	r4,r2,r16
   80bf0:	1c0bc83a 	sub	r5,r3,r16
   80bf4:	2900070e 	bge	r5,r4,80c14 <__utoa+0xd4>
   80bf8:	11400003 	ldbu	r5,0(r2)
   80bfc:	19000003 	ldbu	r4,0(r3)
   80c00:	10bfffc4 	addi	r2,r2,-1
   80c04:	19400005 	stb	r5,0(r3)
   80c08:	11000045 	stb	r4,1(r2)
   80c0c:	18c00044 	addi	r3,r3,1
   80c10:	003ff606 	br	80bec <__alt_data_end+0xfffcfeac>
   80c14:	8005883a 	mov	r2,r16
   80c18:	dfc01017 	ldw	ra,64(sp)
   80c1c:	dd400f17 	ldw	r21,60(sp)
   80c20:	dd000e17 	ldw	r20,56(sp)
   80c24:	dcc00d17 	ldw	r19,52(sp)
   80c28:	dc800c17 	ldw	r18,48(sp)
   80c2c:	dc400b17 	ldw	r17,44(sp)
   80c30:	dc000a17 	ldw	r16,40(sp)
   80c34:	dec01104 	addi	sp,sp,68
   80c38:	f800283a 	ret

00080c3c <utoa>:
   80c3c:	0080b401 	jmpi	80b40 <__utoa>

00080c40 <_vsprintf_r>:
   80c40:	defff804 	addi	sp,sp,-32
   80c44:	00808204 	movi	r2,520
   80c48:	d880000d 	sth	r2,0(sp)
   80c4c:	00a00034 	movhi	r2,32768
   80c50:	10bfffc4 	addi	r2,r2,-1
   80c54:	d8800515 	stw	r2,20(sp)
   80c58:	d8800315 	stw	r2,12(sp)
   80c5c:	00bfffc4 	movi	r2,-1
   80c60:	d880008d 	sth	r2,2(sp)
   80c64:	00800234 	movhi	r2,8
   80c68:	d9400415 	stw	r5,16(sp)
   80c6c:	d9400215 	stw	r5,8(sp)
   80c70:	10832e04 	addi	r2,r2,3256
   80c74:	d80b883a 	mov	r5,sp
   80c78:	dfc00715 	stw	ra,28(sp)
   80c7c:	d8800115 	stw	r2,4(sp)
   80c80:	d8000615 	stw	zero,24(sp)
   80c84:	0080e540 	call	80e54 <___svfprintf_internal_r>
   80c88:	d8c00417 	ldw	r3,16(sp)
   80c8c:	18000005 	stb	zero,0(r3)
   80c90:	dfc00717 	ldw	ra,28(sp)
   80c94:	dec00804 	addi	sp,sp,32
   80c98:	f800283a 	ret

00080c9c <vsprintf>:
   80c9c:	00800234 	movhi	r2,8
   80ca0:	1092ef04 	addi	r2,r2,19388
   80ca4:	300f883a 	mov	r7,r6
   80ca8:	280d883a 	mov	r6,r5
   80cac:	200b883a 	mov	r5,r4
   80cb0:	11000017 	ldw	r4,0(r2)
   80cb4:	0080c401 	jmpi	80c40 <_vsprintf_r>

00080cb8 <__sfvwrite_small_str>:
   80cb8:	2880000b 	ldhu	r2,0(r5)
   80cbc:	10c0020c 	andi	r3,r2,8
   80cc0:	18002026 	beq	r3,zero,80d44 <__sfvwrite_small_str+0x8c>
   80cc4:	28c0008f 	ldh	r3,2(r5)
   80cc8:	defffd04 	addi	sp,sp,-12
   80ccc:	dc000015 	stw	r16,0(sp)
   80cd0:	dfc00215 	stw	ra,8(sp)
   80cd4:	dc400115 	stw	r17,4(sp)
   80cd8:	2821883a 	mov	r16,r5
   80cdc:	1800150e 	bge	r3,zero,80d34 <__sfvwrite_small_str+0x7c>
   80ce0:	10c0800c 	andi	r3,r2,512
   80ce4:	18001326 	beq	r3,zero,80d34 <__sfvwrite_small_str+0x7c>
   80ce8:	2c400517 	ldw	r17,20(r5)
   80cec:	89c0030e 	bge	r17,r7,80cfc <__sfvwrite_small_str+0x44>
   80cf0:	10c0200c 	andi	r3,r2,128
   80cf4:	18000326 	beq	r3,zero,80d04 <__sfvwrite_small_str+0x4c>
   80cf8:	00000e06 	br	80d34 <__sfvwrite_small_str+0x7c>
   80cfc:	3c40010e 	bge	r7,r17,80d04 <__sfvwrite_small_str+0x4c>
   80d00:	3823883a 	mov	r17,r7
   80d04:	81000417 	ldw	r4,16(r16)
   80d08:	300b883a 	mov	r5,r6
   80d0c:	880d883a 	mov	r6,r17
   80d10:	0080d880 	call	80d88 <memmove>
   80d14:	80800517 	ldw	r2,20(r16)
   80d18:	1445c83a 	sub	r2,r2,r17
   80d1c:	80800515 	stw	r2,20(r16)
   80d20:	80800417 	ldw	r2,16(r16)
   80d24:	1463883a 	add	r17,r2,r17
   80d28:	84400415 	stw	r17,16(r16)
   80d2c:	0005883a 	mov	r2,zero
   80d30:	00000606 	br	80d4c <__sfvwrite_small_str+0x94>
   80d34:	10801014 	ori	r2,r2,64
   80d38:	8080000d 	sth	r2,0(r16)
   80d3c:	00bfffc4 	movi	r2,-1
   80d40:	00000206 	br	80d4c <__sfvwrite_small_str+0x94>
   80d44:	00bfffc4 	movi	r2,-1
   80d48:	f800283a 	ret
   80d4c:	dfc00217 	ldw	ra,8(sp)
   80d50:	dc400117 	ldw	r17,4(sp)
   80d54:	dc000017 	ldw	r16,0(sp)
   80d58:	dec00304 	addi	sp,sp,12
   80d5c:	f800283a 	ret

00080d60 <memcpy>:
   80d60:	2005883a 	mov	r2,r4
   80d64:	2007883a 	mov	r3,r4
   80d68:	218d883a 	add	r6,r4,r6
   80d6c:	19800526 	beq	r3,r6,80d84 <memcpy+0x24>
   80d70:	29000003 	ldbu	r4,0(r5)
   80d74:	18c00044 	addi	r3,r3,1
   80d78:	29400044 	addi	r5,r5,1
   80d7c:	193fffc5 	stb	r4,-1(r3)
   80d80:	003ffa06 	br	80d6c <__alt_data_end+0xfffd002c>
   80d84:	f800283a 	ret

00080d88 <memmove>:
   80d88:	2005883a 	mov	r2,r4
   80d8c:	218f883a 	add	r7,r4,r6
   80d90:	29000236 	bltu	r5,r4,80d9c <memmove+0x14>
   80d94:	1007883a 	mov	r3,r2
   80d98:	00000c06 	br	80dcc <memmove+0x44>
   80d9c:	2987883a 	add	r3,r5,r6
   80da0:	20fffc2e 	bgeu	r4,r3,80d94 <__alt_data_end+0xfffd0054>
   80da4:	380b883a 	mov	r5,r7
   80da8:	30cdc83a 	sub	r6,r6,r3
   80dac:	1989883a 	add	r4,r3,r6
   80db0:	20000526 	beq	r4,zero,80dc8 <memmove+0x40>
   80db4:	18ffffc4 	addi	r3,r3,-1
   80db8:	19000003 	ldbu	r4,0(r3)
   80dbc:	297fffc4 	addi	r5,r5,-1
   80dc0:	29000005 	stb	r4,0(r5)
   80dc4:	003ff906 	br	80dac <__alt_data_end+0xfffd006c>
   80dc8:	f800283a 	ret
   80dcc:	19c00526 	beq	r3,r7,80de4 <memmove+0x5c>
   80dd0:	29000003 	ldbu	r4,0(r5)
   80dd4:	18c00044 	addi	r3,r3,1
   80dd8:	29400044 	addi	r5,r5,1
   80ddc:	193fffc5 	stb	r4,-1(r3)
   80de0:	003ffa06 	br	80dcc <__alt_data_end+0xfffd008c>
   80de4:	f800283a 	ret

00080de8 <print_repeat>:
   80de8:	defffb04 	addi	sp,sp,-20
   80dec:	dc800315 	stw	r18,12(sp)
   80df0:	dc400215 	stw	r17,8(sp)
   80df4:	dc000115 	stw	r16,4(sp)
   80df8:	dfc00415 	stw	ra,16(sp)
   80dfc:	2025883a 	mov	r18,r4
   80e00:	2823883a 	mov	r17,r5
   80e04:	d9800005 	stb	r6,0(sp)
   80e08:	3821883a 	mov	r16,r7
   80e0c:	04000a0e 	bge	zero,r16,80e38 <print_repeat+0x50>
   80e10:	88800117 	ldw	r2,4(r17)
   80e14:	01c00044 	movi	r7,1
   80e18:	d80d883a 	mov	r6,sp
   80e1c:	880b883a 	mov	r5,r17
   80e20:	9009883a 	mov	r4,r18
   80e24:	103ee83a 	callr	r2
   80e28:	843fffc4 	addi	r16,r16,-1
   80e2c:	103ff726 	beq	r2,zero,80e0c <__alt_data_end+0xfffd00cc>
   80e30:	00bfffc4 	movi	r2,-1
   80e34:	00000106 	br	80e3c <print_repeat+0x54>
   80e38:	0005883a 	mov	r2,zero
   80e3c:	dfc00417 	ldw	ra,16(sp)
   80e40:	dc800317 	ldw	r18,12(sp)
   80e44:	dc400217 	ldw	r17,8(sp)
   80e48:	dc000117 	ldw	r16,4(sp)
   80e4c:	dec00504 	addi	sp,sp,20
   80e50:	f800283a 	ret

00080e54 <___svfprintf_internal_r>:
   80e54:	deffe504 	addi	sp,sp,-108
   80e58:	d8c00804 	addi	r3,sp,32
   80e5c:	df001915 	stw	fp,100(sp)
   80e60:	ddc01815 	stw	r23,96(sp)
   80e64:	dd801715 	stw	r22,92(sp)
   80e68:	dd401615 	stw	r21,88(sp)
   80e6c:	dd001515 	stw	r20,84(sp)
   80e70:	dcc01415 	stw	r19,80(sp)
   80e74:	dc801315 	stw	r18,76(sp)
   80e78:	dc401215 	stw	r17,72(sp)
   80e7c:	dc001115 	stw	r16,68(sp)
   80e80:	dfc01a15 	stw	ra,104(sp)
   80e84:	2027883a 	mov	r19,r4
   80e88:	2839883a 	mov	fp,r5
   80e8c:	382d883a 	mov	r22,r7
   80e90:	d9800f15 	stw	r6,60(sp)
   80e94:	0021883a 	mov	r16,zero
   80e98:	d8000e15 	stw	zero,56(sp)
   80e9c:	002f883a 	mov	r23,zero
   80ea0:	002b883a 	mov	r21,zero
   80ea4:	0025883a 	mov	r18,zero
   80ea8:	0023883a 	mov	r17,zero
   80eac:	d8000c15 	stw	zero,48(sp)
   80eb0:	d8000b15 	stw	zero,44(sp)
   80eb4:	0029883a 	mov	r20,zero
   80eb8:	d8c00915 	stw	r3,36(sp)
   80ebc:	d8c00f17 	ldw	r3,60(sp)
   80ec0:	19000003 	ldbu	r4,0(r3)
   80ec4:	20803fcc 	andi	r2,r4,255
   80ec8:	1080201c 	xori	r2,r2,128
   80ecc:	10bfe004 	addi	r2,r2,-128
   80ed0:	10011c26 	beq	r2,zero,81344 <___svfprintf_internal_r+0x4f0>
   80ed4:	00c00044 	movi	r3,1
   80ed8:	a0c01426 	beq	r20,r3,80f2c <___svfprintf_internal_r+0xd8>
   80edc:	1d000216 	blt	r3,r20,80ee8 <___svfprintf_internal_r+0x94>
   80ee0:	a0000626 	beq	r20,zero,80efc <___svfprintf_internal_r+0xa8>
   80ee4:	00011306 	br	81334 <___svfprintf_internal_r+0x4e0>
   80ee8:	01400084 	movi	r5,2
   80eec:	a1401d26 	beq	r20,r5,80f64 <___svfprintf_internal_r+0x110>
   80ef0:	014000c4 	movi	r5,3
   80ef4:	a1402926 	beq	r20,r5,80f9c <___svfprintf_internal_r+0x148>
   80ef8:	00010e06 	br	81334 <___svfprintf_internal_r+0x4e0>
   80efc:	01400944 	movi	r5,37
   80f00:	1140fb26 	beq	r2,r5,812f0 <___svfprintf_internal_r+0x49c>
   80f04:	e0800117 	ldw	r2,4(fp)
   80f08:	d9000005 	stb	r4,0(sp)
   80f0c:	01c00044 	movi	r7,1
   80f10:	d80d883a 	mov	r6,sp
   80f14:	e00b883a 	mov	r5,fp
   80f18:	9809883a 	mov	r4,r19
   80f1c:	103ee83a 	callr	r2
   80f20:	1000d61e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   80f24:	84000044 	addi	r16,r16,1
   80f28:	00010206 	br	81334 <___svfprintf_internal_r+0x4e0>
   80f2c:	01400c04 	movi	r5,48
   80f30:	1140f826 	beq	r2,r5,81314 <___svfprintf_internal_r+0x4c0>
   80f34:	01400944 	movi	r5,37
   80f38:	11400a1e 	bne	r2,r5,80f64 <___svfprintf_internal_r+0x110>
   80f3c:	d8800005 	stb	r2,0(sp)
   80f40:	e0800117 	ldw	r2,4(fp)
   80f44:	a00f883a 	mov	r7,r20
   80f48:	d80d883a 	mov	r6,sp
   80f4c:	e00b883a 	mov	r5,fp
   80f50:	9809883a 	mov	r4,r19
   80f54:	103ee83a 	callr	r2
   80f58:	1000c81e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   80f5c:	84000044 	addi	r16,r16,1
   80f60:	0000f306 	br	81330 <___svfprintf_internal_r+0x4dc>
   80f64:	217ff404 	addi	r5,r4,-48
   80f68:	29403fcc 	andi	r5,r5,255
   80f6c:	00c00244 	movi	r3,9
   80f70:	19400736 	bltu	r3,r5,80f90 <___svfprintf_internal_r+0x13c>
   80f74:	00bfffc4 	movi	r2,-1
   80f78:	88800226 	beq	r17,r2,80f84 <___svfprintf_internal_r+0x130>
   80f7c:	8c4002a4 	muli	r17,r17,10
   80f80:	00000106 	br	80f88 <___svfprintf_internal_r+0x134>
   80f84:	0023883a 	mov	r17,zero
   80f88:	2c63883a 	add	r17,r5,r17
   80f8c:	0000e206 	br	81318 <___svfprintf_internal_r+0x4c4>
   80f90:	01400b84 	movi	r5,46
   80f94:	1140e426 	beq	r2,r5,81328 <___svfprintf_internal_r+0x4d4>
   80f98:	05000084 	movi	r20,2
   80f9c:	213ff404 	addi	r4,r4,-48
   80fa0:	21003fcc 	andi	r4,r4,255
   80fa4:	00c00244 	movi	r3,9
   80fa8:	19000736 	bltu	r3,r4,80fc8 <___svfprintf_internal_r+0x174>
   80fac:	00bfffc4 	movi	r2,-1
   80fb0:	90800226 	beq	r18,r2,80fbc <___svfprintf_internal_r+0x168>
   80fb4:	948002a4 	muli	r18,r18,10
   80fb8:	00000106 	br	80fc0 <___svfprintf_internal_r+0x16c>
   80fbc:	0025883a 	mov	r18,zero
   80fc0:	24a5883a 	add	r18,r4,r18
   80fc4:	0000db06 	br	81334 <___svfprintf_internal_r+0x4e0>
   80fc8:	00c01b04 	movi	r3,108
   80fcc:	10c0d426 	beq	r2,r3,81320 <___svfprintf_internal_r+0x4cc>
   80fd0:	013fffc4 	movi	r4,-1
   80fd4:	91000226 	beq	r18,r4,80fe0 <___svfprintf_internal_r+0x18c>
   80fd8:	d8000b15 	stw	zero,44(sp)
   80fdc:	00000106 	br	80fe4 <___svfprintf_internal_r+0x190>
   80fe0:	04800044 	movi	r18,1
   80fe4:	01001a44 	movi	r4,105
   80fe8:	11001626 	beq	r2,r4,81044 <___svfprintf_internal_r+0x1f0>
   80fec:	20800916 	blt	r4,r2,81014 <___svfprintf_internal_r+0x1c0>
   80ff0:	010018c4 	movi	r4,99
   80ff4:	11008a26 	beq	r2,r4,81220 <___svfprintf_internal_r+0x3cc>
   80ff8:	01001904 	movi	r4,100
   80ffc:	11001126 	beq	r2,r4,81044 <___svfprintf_internal_r+0x1f0>
   81000:	01001604 	movi	r4,88
   81004:	1100ca1e 	bne	r2,r4,81330 <___svfprintf_internal_r+0x4dc>
   81008:	00c00044 	movi	r3,1
   8100c:	d8c00e15 	stw	r3,56(sp)
   81010:	00001406 	br	81064 <___svfprintf_internal_r+0x210>
   81014:	01001cc4 	movi	r4,115
   81018:	11009a26 	beq	r2,r4,81284 <___svfprintf_internal_r+0x430>
   8101c:	20800416 	blt	r4,r2,81030 <___svfprintf_internal_r+0x1dc>
   81020:	01001bc4 	movi	r4,111
   81024:	1100c21e 	bne	r2,r4,81330 <___svfprintf_internal_r+0x4dc>
   81028:	05400204 	movi	r21,8
   8102c:	00000e06 	br	81068 <___svfprintf_internal_r+0x214>
   81030:	01001d44 	movi	r4,117
   81034:	11000c26 	beq	r2,r4,81068 <___svfprintf_internal_r+0x214>
   81038:	01001e04 	movi	r4,120
   8103c:	11000926 	beq	r2,r4,81064 <___svfprintf_internal_r+0x210>
   81040:	0000bb06 	br	81330 <___svfprintf_internal_r+0x4dc>
   81044:	b5000104 	addi	r20,r22,4
   81048:	b8000726 	beq	r23,zero,81068 <___svfprintf_internal_r+0x214>
   8104c:	dd000d15 	stw	r20,52(sp)
   81050:	b5800017 	ldw	r22,0(r22)
   81054:	b000080e 	bge	r22,zero,81078 <___svfprintf_internal_r+0x224>
   81058:	05adc83a 	sub	r22,zero,r22
   8105c:	02800044 	movi	r10,1
   81060:	00000606 	br	8107c <___svfprintf_internal_r+0x228>
   81064:	05400404 	movi	r21,16
   81068:	b0c00104 	addi	r3,r22,4
   8106c:	d8c00d15 	stw	r3,52(sp)
   81070:	b5800017 	ldw	r22,0(r22)
   81074:	002f883a 	mov	r23,zero
   81078:	0015883a 	mov	r10,zero
   8107c:	d829883a 	mov	r20,sp
   81080:	b0001426 	beq	r22,zero,810d4 <___svfprintf_internal_r+0x280>
   81084:	b009883a 	mov	r4,r22
   81088:	a80b883a 	mov	r5,r21
   8108c:	da801015 	stw	r10,64(sp)
   81090:	008148c0 	call	8148c <__udivsi3>
   81094:	1549383a 	mul	r4,r2,r21
   81098:	00c00244 	movi	r3,9
   8109c:	da801017 	ldw	r10,64(sp)
   810a0:	b12dc83a 	sub	r22,r22,r4
   810a4:	1d800216 	blt	r3,r22,810b0 <___svfprintf_internal_r+0x25c>
   810a8:	b5800c04 	addi	r22,r22,48
   810ac:	00000506 	br	810c4 <___svfprintf_internal_r+0x270>
   810b0:	d8c00e17 	ldw	r3,56(sp)
   810b4:	18000226 	beq	r3,zero,810c0 <___svfprintf_internal_r+0x26c>
   810b8:	b5800dc4 	addi	r22,r22,55
   810bc:	00000106 	br	810c4 <___svfprintf_internal_r+0x270>
   810c0:	b58015c4 	addi	r22,r22,87
   810c4:	a5800005 	stb	r22,0(r20)
   810c8:	a5000044 	addi	r20,r20,1
   810cc:	102d883a 	mov	r22,r2
   810d0:	003feb06 	br	81080 <__alt_data_end+0xfffd0340>
   810d4:	a6c7c83a 	sub	r3,r20,sp
   810d8:	d8c00a15 	stw	r3,40(sp)
   810dc:	90c5c83a 	sub	r2,r18,r3
   810e0:	00800a0e 	bge	zero,r2,8110c <___svfprintf_internal_r+0x2b8>
   810e4:	a085883a 	add	r2,r20,r2
   810e8:	01400c04 	movi	r5,48
   810ec:	d8c00917 	ldw	r3,36(sp)
   810f0:	a009883a 	mov	r4,r20
   810f4:	a0c0032e 	bgeu	r20,r3,81104 <___svfprintf_internal_r+0x2b0>
   810f8:	a5000044 	addi	r20,r20,1
   810fc:	21400005 	stb	r5,0(r4)
   81100:	a0bffa1e 	bne	r20,r2,810ec <__alt_data_end+0xfffd03ac>
   81104:	a6c7c83a 	sub	r3,r20,sp
   81108:	d8c00a15 	stw	r3,40(sp)
   8110c:	d8c00a17 	ldw	r3,40(sp)
   81110:	50d3883a 	add	r9,r10,r3
   81114:	d8c00b17 	ldw	r3,44(sp)
   81118:	8a6dc83a 	sub	r22,r17,r9
   8111c:	18001726 	beq	r3,zero,8117c <___svfprintf_internal_r+0x328>
   81120:	50000a26 	beq	r10,zero,8114c <___svfprintf_internal_r+0x2f8>
   81124:	00800b44 	movi	r2,45
   81128:	d8800805 	stb	r2,32(sp)
   8112c:	e0800117 	ldw	r2,4(fp)
   81130:	01c00044 	movi	r7,1
   81134:	d9800804 	addi	r6,sp,32
   81138:	e00b883a 	mov	r5,fp
   8113c:	9809883a 	mov	r4,r19
   81140:	103ee83a 	callr	r2
   81144:	10004d1e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   81148:	84000044 	addi	r16,r16,1
   8114c:	0580070e 	bge	zero,r22,8116c <___svfprintf_internal_r+0x318>
   81150:	b00f883a 	mov	r7,r22
   81154:	01800c04 	movi	r6,48
   81158:	e00b883a 	mov	r5,fp
   8115c:	9809883a 	mov	r4,r19
   81160:	0080de80 	call	80de8 <print_repeat>
   81164:	1000451e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   81168:	85a1883a 	add	r16,r16,r22
   8116c:	d8c00a17 	ldw	r3,40(sp)
   81170:	a013883a 	mov	r9,r20
   81174:	1d2dc83a 	sub	r22,r3,r20
   81178:	00002206 	br	81204 <___svfprintf_internal_r+0x3b0>
   8117c:	0580090e 	bge	zero,r22,811a4 <___svfprintf_internal_r+0x350>
   81180:	b00f883a 	mov	r7,r22
   81184:	01800804 	movi	r6,32
   81188:	e00b883a 	mov	r5,fp
   8118c:	9809883a 	mov	r4,r19
   81190:	da801015 	stw	r10,64(sp)
   81194:	0080de80 	call	80de8 <print_repeat>
   81198:	da801017 	ldw	r10,64(sp)
   8119c:	1000371e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   811a0:	85a1883a 	add	r16,r16,r22
   811a4:	503ff126 	beq	r10,zero,8116c <__alt_data_end+0xfffd042c>
   811a8:	00800b44 	movi	r2,45
   811ac:	d8800805 	stb	r2,32(sp)
   811b0:	e0800117 	ldw	r2,4(fp)
   811b4:	01c00044 	movi	r7,1
   811b8:	d9800804 	addi	r6,sp,32
   811bc:	e00b883a 	mov	r5,fp
   811c0:	9809883a 	mov	r4,r19
   811c4:	103ee83a 	callr	r2
   811c8:	10002c1e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   811cc:	84000044 	addi	r16,r16,1
   811d0:	003fe606 	br	8116c <__alt_data_end+0xfffd042c>
   811d4:	4a7fffc4 	addi	r9,r9,-1
   811d8:	48800003 	ldbu	r2,0(r9)
   811dc:	01c00044 	movi	r7,1
   811e0:	d9800804 	addi	r6,sp,32
   811e4:	d8800805 	stb	r2,32(sp)
   811e8:	e0800117 	ldw	r2,4(fp)
   811ec:	e00b883a 	mov	r5,fp
   811f0:	da401015 	stw	r9,64(sp)
   811f4:	9809883a 	mov	r4,r19
   811f8:	103ee83a 	callr	r2
   811fc:	da401017 	ldw	r9,64(sp)
   81200:	10001e1e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   81204:	8245c83a 	sub	r2,r16,r9
   81208:	4d89883a 	add	r4,r9,r22
   8120c:	a085883a 	add	r2,r20,r2
   81210:	013ff016 	blt	zero,r4,811d4 <__alt_data_end+0xfffd0494>
   81214:	1021883a 	mov	r16,r2
   81218:	dd800d17 	ldw	r22,52(sp)
   8121c:	00004406 	br	81330 <___svfprintf_internal_r+0x4dc>
   81220:	00800044 	movi	r2,1
   81224:	1440080e 	bge	r2,r17,81248 <___svfprintf_internal_r+0x3f4>
   81228:	8d3fffc4 	addi	r20,r17,-1
   8122c:	a00f883a 	mov	r7,r20
   81230:	01800804 	movi	r6,32
   81234:	e00b883a 	mov	r5,fp
   81238:	9809883a 	mov	r4,r19
   8123c:	0080de80 	call	80de8 <print_repeat>
   81240:	10000e1e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   81244:	8521883a 	add	r16,r16,r20
   81248:	b0800017 	ldw	r2,0(r22)
   8124c:	01c00044 	movi	r7,1
   81250:	d80d883a 	mov	r6,sp
   81254:	d8800005 	stb	r2,0(sp)
   81258:	e0800117 	ldw	r2,4(fp)
   8125c:	e00b883a 	mov	r5,fp
   81260:	9809883a 	mov	r4,r19
   81264:	b5000104 	addi	r20,r22,4
   81268:	103ee83a 	callr	r2
   8126c:	1000031e 	bne	r2,zero,8127c <___svfprintf_internal_r+0x428>
   81270:	84000044 	addi	r16,r16,1
   81274:	a02d883a 	mov	r22,r20
   81278:	00002d06 	br	81330 <___svfprintf_internal_r+0x4dc>
   8127c:	00bfffc4 	movi	r2,-1
   81280:	00003106 	br	81348 <___svfprintf_internal_r+0x4f4>
   81284:	b5000017 	ldw	r20,0(r22)
   81288:	b0c00104 	addi	r3,r22,4
   8128c:	d8c00a15 	stw	r3,40(sp)
   81290:	a009883a 	mov	r4,r20
   81294:	0080b240 	call	80b24 <strlen>
   81298:	8893c83a 	sub	r9,r17,r2
   8129c:	102d883a 	mov	r22,r2
   812a0:	0240090e 	bge	zero,r9,812c8 <___svfprintf_internal_r+0x474>
   812a4:	480f883a 	mov	r7,r9
   812a8:	01800804 	movi	r6,32
   812ac:	e00b883a 	mov	r5,fp
   812b0:	9809883a 	mov	r4,r19
   812b4:	da401015 	stw	r9,64(sp)
   812b8:	0080de80 	call	80de8 <print_repeat>
   812bc:	da401017 	ldw	r9,64(sp)
   812c0:	103fee1e 	bne	r2,zero,8127c <__alt_data_end+0xfffd053c>
   812c4:	8261883a 	add	r16,r16,r9
   812c8:	e0800117 	ldw	r2,4(fp)
   812cc:	b00f883a 	mov	r7,r22
   812d0:	a00d883a 	mov	r6,r20
   812d4:	e00b883a 	mov	r5,fp
   812d8:	9809883a 	mov	r4,r19
   812dc:	103ee83a 	callr	r2
   812e0:	103fe61e 	bne	r2,zero,8127c <__alt_data_end+0xfffd053c>
   812e4:	85a1883a 	add	r16,r16,r22
   812e8:	dd800a17 	ldw	r22,40(sp)
   812ec:	00001006 	br	81330 <___svfprintf_internal_r+0x4dc>
   812f0:	05c00044 	movi	r23,1
   812f4:	04bfffc4 	movi	r18,-1
   812f8:	d8000e15 	stw	zero,56(sp)
   812fc:	05400284 	movi	r21,10
   81300:	9023883a 	mov	r17,r18
   81304:	d8000c15 	stw	zero,48(sp)
   81308:	d8000b15 	stw	zero,44(sp)
   8130c:	b829883a 	mov	r20,r23
   81310:	00000806 	br	81334 <___svfprintf_internal_r+0x4e0>
   81314:	dd000b15 	stw	r20,44(sp)
   81318:	05000084 	movi	r20,2
   8131c:	00000506 	br	81334 <___svfprintf_internal_r+0x4e0>
   81320:	00c00044 	movi	r3,1
   81324:	d8c00c15 	stw	r3,48(sp)
   81328:	050000c4 	movi	r20,3
   8132c:	00000106 	br	81334 <___svfprintf_internal_r+0x4e0>
   81330:	0029883a 	mov	r20,zero
   81334:	d8c00f17 	ldw	r3,60(sp)
   81338:	18c00044 	addi	r3,r3,1
   8133c:	d8c00f15 	stw	r3,60(sp)
   81340:	003ede06 	br	80ebc <__alt_data_end+0xfffd017c>
   81344:	8005883a 	mov	r2,r16
   81348:	dfc01a17 	ldw	ra,104(sp)
   8134c:	df001917 	ldw	fp,100(sp)
   81350:	ddc01817 	ldw	r23,96(sp)
   81354:	dd801717 	ldw	r22,92(sp)
   81358:	dd401617 	ldw	r21,88(sp)
   8135c:	dd001517 	ldw	r20,84(sp)
   81360:	dcc01417 	ldw	r19,80(sp)
   81364:	dc801317 	ldw	r18,76(sp)
   81368:	dc401217 	ldw	r17,72(sp)
   8136c:	dc001117 	ldw	r16,68(sp)
   81370:	dec01b04 	addi	sp,sp,108
   81374:	f800283a 	ret

00081378 <__vfprintf_internal_unused>:
   81378:	00800234 	movhi	r2,8
   8137c:	1092ef04 	addi	r2,r2,19388
   81380:	300f883a 	mov	r7,r6
   81384:	280d883a 	mov	r6,r5
   81388:	200b883a 	mov	r5,r4
   8138c:	11000017 	ldw	r4,0(r2)
   81390:	0080e541 	jmpi	80e54 <___svfprintf_internal_r>

00081394 <__divsi3>:
   81394:	20001b16 	blt	r4,zero,81404 <__divsi3+0x70>
   81398:	000f883a 	mov	r7,zero
   8139c:	28001616 	blt	r5,zero,813f8 <__divsi3+0x64>
   813a0:	200d883a 	mov	r6,r4
   813a4:	29001a2e 	bgeu	r5,r4,81410 <__divsi3+0x7c>
   813a8:	00800804 	movi	r2,32
   813ac:	00c00044 	movi	r3,1
   813b0:	00000106 	br	813b8 <__divsi3+0x24>
   813b4:	10000d26 	beq	r2,zero,813ec <__divsi3+0x58>
   813b8:	294b883a 	add	r5,r5,r5
   813bc:	10bfffc4 	addi	r2,r2,-1
   813c0:	18c7883a 	add	r3,r3,r3
   813c4:	293ffb36 	bltu	r5,r4,813b4 <__alt_data_end+0xfffd0674>
   813c8:	0005883a 	mov	r2,zero
   813cc:	18000726 	beq	r3,zero,813ec <__divsi3+0x58>
   813d0:	0005883a 	mov	r2,zero
   813d4:	31400236 	bltu	r6,r5,813e0 <__divsi3+0x4c>
   813d8:	314dc83a 	sub	r6,r6,r5
   813dc:	10c4b03a 	or	r2,r2,r3
   813e0:	1806d07a 	srli	r3,r3,1
   813e4:	280ad07a 	srli	r5,r5,1
   813e8:	183ffa1e 	bne	r3,zero,813d4 <__alt_data_end+0xfffd0694>
   813ec:	38000126 	beq	r7,zero,813f4 <__divsi3+0x60>
   813f0:	0085c83a 	sub	r2,zero,r2
   813f4:	f800283a 	ret
   813f8:	014bc83a 	sub	r5,zero,r5
   813fc:	39c0005c 	xori	r7,r7,1
   81400:	003fe706 	br	813a0 <__alt_data_end+0xfffd0660>
   81404:	0109c83a 	sub	r4,zero,r4
   81408:	01c00044 	movi	r7,1
   8140c:	003fe306 	br	8139c <__alt_data_end+0xfffd065c>
   81410:	00c00044 	movi	r3,1
   81414:	003fee06 	br	813d0 <__alt_data_end+0xfffd0690>

00081418 <__modsi3>:
   81418:	20001716 	blt	r4,zero,81478 <__modsi3+0x60>
   8141c:	000f883a 	mov	r7,zero
   81420:	2005883a 	mov	r2,r4
   81424:	28001216 	blt	r5,zero,81470 <__modsi3+0x58>
   81428:	2900162e 	bgeu	r5,r4,81484 <__modsi3+0x6c>
   8142c:	01800804 	movi	r6,32
   81430:	00c00044 	movi	r3,1
   81434:	00000106 	br	8143c <__modsi3+0x24>
   81438:	30000a26 	beq	r6,zero,81464 <__modsi3+0x4c>
   8143c:	294b883a 	add	r5,r5,r5
   81440:	31bfffc4 	addi	r6,r6,-1
   81444:	18c7883a 	add	r3,r3,r3
   81448:	293ffb36 	bltu	r5,r4,81438 <__alt_data_end+0xfffd06f8>
   8144c:	18000526 	beq	r3,zero,81464 <__modsi3+0x4c>
   81450:	1806d07a 	srli	r3,r3,1
   81454:	11400136 	bltu	r2,r5,8145c <__modsi3+0x44>
   81458:	1145c83a 	sub	r2,r2,r5
   8145c:	280ad07a 	srli	r5,r5,1
   81460:	183ffb1e 	bne	r3,zero,81450 <__alt_data_end+0xfffd0710>
   81464:	38000126 	beq	r7,zero,8146c <__modsi3+0x54>
   81468:	0085c83a 	sub	r2,zero,r2
   8146c:	f800283a 	ret
   81470:	014bc83a 	sub	r5,zero,r5
   81474:	003fec06 	br	81428 <__alt_data_end+0xfffd06e8>
   81478:	0109c83a 	sub	r4,zero,r4
   8147c:	01c00044 	movi	r7,1
   81480:	003fe706 	br	81420 <__alt_data_end+0xfffd06e0>
   81484:	00c00044 	movi	r3,1
   81488:	003ff106 	br	81450 <__alt_data_end+0xfffd0710>

0008148c <__udivsi3>:
   8148c:	200d883a 	mov	r6,r4
   81490:	2900152e 	bgeu	r5,r4,814e8 <__udivsi3+0x5c>
   81494:	28001416 	blt	r5,zero,814e8 <__udivsi3+0x5c>
   81498:	00800804 	movi	r2,32
   8149c:	00c00044 	movi	r3,1
   814a0:	00000206 	br	814ac <__udivsi3+0x20>
   814a4:	10000e26 	beq	r2,zero,814e0 <__udivsi3+0x54>
   814a8:	28000516 	blt	r5,zero,814c0 <__udivsi3+0x34>
   814ac:	294b883a 	add	r5,r5,r5
   814b0:	10bfffc4 	addi	r2,r2,-1
   814b4:	18c7883a 	add	r3,r3,r3
   814b8:	293ffa36 	bltu	r5,r4,814a4 <__alt_data_end+0xfffd0764>
   814bc:	18000826 	beq	r3,zero,814e0 <__udivsi3+0x54>
   814c0:	0005883a 	mov	r2,zero
   814c4:	31400236 	bltu	r6,r5,814d0 <__udivsi3+0x44>
   814c8:	314dc83a 	sub	r6,r6,r5
   814cc:	10c4b03a 	or	r2,r2,r3
   814d0:	1806d07a 	srli	r3,r3,1
   814d4:	280ad07a 	srli	r5,r5,1
   814d8:	183ffa1e 	bne	r3,zero,814c4 <__alt_data_end+0xfffd0784>
   814dc:	f800283a 	ret
   814e0:	0005883a 	mov	r2,zero
   814e4:	f800283a 	ret
   814e8:	00c00044 	movi	r3,1
   814ec:	003ff406 	br	814c0 <__alt_data_end+0xfffd0780>

000814f0 <__umodsi3>:
   814f0:	2005883a 	mov	r2,r4
   814f4:	2900122e 	bgeu	r5,r4,81540 <__umodsi3+0x50>
   814f8:	28001116 	blt	r5,zero,81540 <__umodsi3+0x50>
   814fc:	01800804 	movi	r6,32
   81500:	00c00044 	movi	r3,1
   81504:	00000206 	br	81510 <__umodsi3+0x20>
   81508:	30000c26 	beq	r6,zero,8153c <__umodsi3+0x4c>
   8150c:	28000516 	blt	r5,zero,81524 <__umodsi3+0x34>
   81510:	294b883a 	add	r5,r5,r5
   81514:	31bfffc4 	addi	r6,r6,-1
   81518:	18c7883a 	add	r3,r3,r3
   8151c:	293ffa36 	bltu	r5,r4,81508 <__alt_data_end+0xfffd07c8>
   81520:	18000626 	beq	r3,zero,8153c <__umodsi3+0x4c>
   81524:	1806d07a 	srli	r3,r3,1
   81528:	11400136 	bltu	r2,r5,81530 <__umodsi3+0x40>
   8152c:	1145c83a 	sub	r2,r2,r5
   81530:	280ad07a 	srli	r5,r5,1
   81534:	183ffb1e 	bne	r3,zero,81524 <__alt_data_end+0xfffd07e4>
   81538:	f800283a 	ret
   8153c:	f800283a 	ret
   81540:	00c00044 	movi	r3,1
   81544:	003ff706 	br	81524 <__alt_data_end+0xfffd07e4>

00081548 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   81548:	defffc04 	addi	sp,sp,-16
   8154c:	df000315 	stw	fp,12(sp)
   81550:	df000304 	addi	fp,sp,12
   81554:	e13ffd15 	stw	r4,-12(fp)
   81558:	e17ffe15 	stw	r5,-8(fp)
   8155c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   81560:	e0fffe17 	ldw	r3,-8(fp)
   81564:	e0bffd17 	ldw	r2,-12(fp)
   81568:	18800c26 	beq	r3,r2,8159c <alt_load_section+0x54>
  {
    while( to != end )
   8156c:	00000806 	br	81590 <alt_load_section+0x48>
    {
      *to++ = *from++;
   81570:	e0bffe17 	ldw	r2,-8(fp)
   81574:	10c00104 	addi	r3,r2,4
   81578:	e0fffe15 	stw	r3,-8(fp)
   8157c:	e0fffd17 	ldw	r3,-12(fp)
   81580:	19000104 	addi	r4,r3,4
   81584:	e13ffd15 	stw	r4,-12(fp)
   81588:	18c00017 	ldw	r3,0(r3)
   8158c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   81590:	e0fffe17 	ldw	r3,-8(fp)
   81594:	e0bfff17 	ldw	r2,-4(fp)
   81598:	18bff51e 	bne	r3,r2,81570 <__alt_data_end+0xfffd0830>
    {
      *to++ = *from++;
    }
  }
}
   8159c:	0001883a 	nop
   815a0:	e037883a 	mov	sp,fp
   815a4:	df000017 	ldw	fp,0(sp)
   815a8:	dec00104 	addi	sp,sp,4
   815ac:	f800283a 	ret

000815b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   815b0:	defffe04 	addi	sp,sp,-8
   815b4:	dfc00115 	stw	ra,4(sp)
   815b8:	df000015 	stw	fp,0(sp)
   815bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   815c0:	01800234 	movhi	r6,8
   815c4:	3192f904 	addi	r6,r6,19428
   815c8:	01400234 	movhi	r5,8
   815cc:	294e0104 	addi	r5,r5,14340
   815d0:	01000234 	movhi	r4,8
   815d4:	2112f904 	addi	r4,r4,19428
   815d8:	00815480 	call	81548 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   815dc:	01800234 	movhi	r6,8
   815e0:	31809104 	addi	r6,r6,580
   815e4:	01400234 	movhi	r5,8
   815e8:	29400804 	addi	r5,r5,32
   815ec:	01000234 	movhi	r4,8
   815f0:	21000804 	addi	r4,r4,32
   815f4:	00815480 	call	81548 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   815f8:	01800234 	movhi	r6,8
   815fc:	318e0104 	addi	r6,r6,14340
   81600:	01400234 	movhi	r5,8
   81604:	294dc304 	addi	r5,r5,14092
   81608:	01000234 	movhi	r4,8
   8160c:	210dc304 	addi	r4,r4,14092
   81610:	00815480 	call	81548 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   81614:	00824780 	call	82478 <alt_dcache_flush_all>
  alt_icache_flush_all();
   81618:	00825e00 	call	825e0 <alt_icache_flush_all>
}
   8161c:	0001883a 	nop
   81620:	e037883a 	mov	sp,fp
   81624:	dfc00117 	ldw	ra,4(sp)
   81628:	df000017 	ldw	fp,0(sp)
   8162c:	dec00204 	addi	sp,sp,8
   81630:	f800283a 	ret

00081634 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   81634:	defffd04 	addi	sp,sp,-12
   81638:	dfc00215 	stw	ra,8(sp)
   8163c:	df000115 	stw	fp,4(sp)
   81640:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   81644:	0009883a 	mov	r4,zero
   81648:	008171c0 	call	8171c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8164c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   81650:	00817540 	call	81754 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   81654:	01800234 	movhi	r6,8
   81658:	318df404 	addi	r6,r6,14288
   8165c:	01400234 	movhi	r5,8
   81660:	294df404 	addi	r5,r5,14288
   81664:	01000234 	movhi	r4,8
   81668:	210df404 	addi	r4,r4,14288
   8166c:	00829a80 	call	829a8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   81670:	d0a50417 	ldw	r2,-27632(gp)
   81674:	d0e50517 	ldw	r3,-27628(gp)
   81678:	d1250617 	ldw	r4,-27624(gp)
   8167c:	200d883a 	mov	r6,r4
   81680:	180b883a 	mov	r5,r3
   81684:	1009883a 	mov	r4,r2
   81688:	0080a9c0 	call	80a9c <main>
   8168c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   81690:	01000044 	movi	r4,1
   81694:	00823a80 	call	823a8 <close>
  exit (result);
   81698:	e13fff17 	ldw	r4,-4(fp)
   8169c:	00832480 	call	83248 <exit>

000816a0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   816a0:	defffd04 	addi	sp,sp,-12
   816a4:	dfc00215 	stw	ra,8(sp)
   816a8:	df000115 	stw	fp,4(sp)
   816ac:	df000104 	addi	fp,sp,4
   816b0:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   816b4:	00800234 	movhi	r2,8
   816b8:	1092ef04 	addi	r2,r2,19388
   816bc:	10800017 	ldw	r2,0(r2)
   816c0:	10800217 	ldw	r2,8(r2)
   816c4:	100b883a 	mov	r5,r2
   816c8:	e13fff17 	ldw	r4,-4(fp)
   816cc:	00832680 	call	83268 <fputs>
#endif
#endif
}
   816d0:	e037883a 	mov	sp,fp
   816d4:	dfc00117 	ldw	ra,4(sp)
   816d8:	df000017 	ldw	fp,0(sp)
   816dc:	dec00204 	addi	sp,sp,8
   816e0:	f800283a 	ret

000816e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   816e4:	defffd04 	addi	sp,sp,-12
   816e8:	dfc00215 	stw	ra,8(sp)
   816ec:	df000115 	stw	fp,4(sp)
   816f0:	df000104 	addi	fp,sp,4
   816f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   816f8:	01400234 	movhi	r5,8
   816fc:	2952f204 	addi	r5,r5,19400
   81700:	e13fff17 	ldw	r4,-4(fp)
   81704:	008253c0 	call	8253c <alt_dev_llist_insert>
}
   81708:	e037883a 	mov	sp,fp
   8170c:	dfc00117 	ldw	ra,4(sp)
   81710:	df000017 	ldw	fp,0(sp)
   81714:	dec00204 	addi	sp,sp,8
   81718:	f800283a 	ret

0008171c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8171c:	defffd04 	addi	sp,sp,-12
   81720:	dfc00215 	stw	ra,8(sp)
   81724:	df000115 	stw	fp,4(sp)
   81728:	df000104 	addi	fp,sp,4
   8172c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   81730:	0082ea00 	call	82ea0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   81734:	00800044 	movi	r2,1
   81738:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8173c:	0001883a 	nop
   81740:	e037883a 	mov	sp,fp
   81744:	dfc00117 	ldw	ra,4(sp)
   81748:	df000017 	ldw	fp,0(sp)
   8174c:	dec00204 	addi	sp,sp,8
   81750:	f800283a 	ret

00081754 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   81754:	defffe04 	addi	sp,sp,-8
   81758:	dfc00115 	stw	ra,4(sp)
   8175c:	df000015 	stw	fp,0(sp)
   81760:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   81764:	000d883a 	mov	r6,zero
   81768:	000b883a 	mov	r5,zero
   8176c:	01000234 	movhi	r4,8
   81770:	210e7604 	addi	r4,r4,14808
   81774:	00819040 	call	81904 <altera_avalon_jtag_uart_init>
   81778:	01000234 	movhi	r4,8
   8177c:	210e6c04 	addi	r4,r4,14768
   81780:	00816e40 	call	816e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   81784:	0001883a 	nop
}
   81788:	0001883a 	nop
   8178c:	e037883a 	mov	sp,fp
   81790:	dfc00117 	ldw	ra,4(sp)
   81794:	df000017 	ldw	fp,0(sp)
   81798:	dec00204 	addi	sp,sp,8
   8179c:	f800283a 	ret

000817a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   817a0:	defffa04 	addi	sp,sp,-24
   817a4:	dfc00515 	stw	ra,20(sp)
   817a8:	df000415 	stw	fp,16(sp)
   817ac:	df000404 	addi	fp,sp,16
   817b0:	e13ffd15 	stw	r4,-12(fp)
   817b4:	e17ffe15 	stw	r5,-8(fp)
   817b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   817bc:	e0bffd17 	ldw	r2,-12(fp)
   817c0:	10800017 	ldw	r2,0(r2)
   817c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   817c8:	e0bffc17 	ldw	r2,-16(fp)
   817cc:	10c00a04 	addi	r3,r2,40
   817d0:	e0bffd17 	ldw	r2,-12(fp)
   817d4:	10800217 	ldw	r2,8(r2)
   817d8:	100f883a 	mov	r7,r2
   817dc:	e1bfff17 	ldw	r6,-4(fp)
   817e0:	e17ffe17 	ldw	r5,-8(fp)
   817e4:	1809883a 	mov	r4,r3
   817e8:	0081dd80 	call	81dd8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   817ec:	e037883a 	mov	sp,fp
   817f0:	dfc00117 	ldw	ra,4(sp)
   817f4:	df000017 	ldw	fp,0(sp)
   817f8:	dec00204 	addi	sp,sp,8
   817fc:	f800283a 	ret

00081800 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81800:	defffa04 	addi	sp,sp,-24
   81804:	dfc00515 	stw	ra,20(sp)
   81808:	df000415 	stw	fp,16(sp)
   8180c:	df000404 	addi	fp,sp,16
   81810:	e13ffd15 	stw	r4,-12(fp)
   81814:	e17ffe15 	stw	r5,-8(fp)
   81818:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8181c:	e0bffd17 	ldw	r2,-12(fp)
   81820:	10800017 	ldw	r2,0(r2)
   81824:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   81828:	e0bffc17 	ldw	r2,-16(fp)
   8182c:	10c00a04 	addi	r3,r2,40
   81830:	e0bffd17 	ldw	r2,-12(fp)
   81834:	10800217 	ldw	r2,8(r2)
   81838:	100f883a 	mov	r7,r2
   8183c:	e1bfff17 	ldw	r6,-4(fp)
   81840:	e17ffe17 	ldw	r5,-8(fp)
   81844:	1809883a 	mov	r4,r3
   81848:	0081ff40 	call	81ff4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8184c:	e037883a 	mov	sp,fp
   81850:	dfc00117 	ldw	ra,4(sp)
   81854:	df000017 	ldw	fp,0(sp)
   81858:	dec00204 	addi	sp,sp,8
   8185c:	f800283a 	ret

00081860 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   81860:	defffc04 	addi	sp,sp,-16
   81864:	dfc00315 	stw	ra,12(sp)
   81868:	df000215 	stw	fp,8(sp)
   8186c:	df000204 	addi	fp,sp,8
   81870:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81874:	e0bfff17 	ldw	r2,-4(fp)
   81878:	10800017 	ldw	r2,0(r2)
   8187c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   81880:	e0bffe17 	ldw	r2,-8(fp)
   81884:	10c00a04 	addi	r3,r2,40
   81888:	e0bfff17 	ldw	r2,-4(fp)
   8188c:	10800217 	ldw	r2,8(r2)
   81890:	100b883a 	mov	r5,r2
   81894:	1809883a 	mov	r4,r3
   81898:	0081c800 	call	81c80 <altera_avalon_jtag_uart_close>
}
   8189c:	e037883a 	mov	sp,fp
   818a0:	dfc00117 	ldw	ra,4(sp)
   818a4:	df000017 	ldw	fp,0(sp)
   818a8:	dec00204 	addi	sp,sp,8
   818ac:	f800283a 	ret

000818b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   818b0:	defffa04 	addi	sp,sp,-24
   818b4:	dfc00515 	stw	ra,20(sp)
   818b8:	df000415 	stw	fp,16(sp)
   818bc:	df000404 	addi	fp,sp,16
   818c0:	e13ffd15 	stw	r4,-12(fp)
   818c4:	e17ffe15 	stw	r5,-8(fp)
   818c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   818cc:	e0bffd17 	ldw	r2,-12(fp)
   818d0:	10800017 	ldw	r2,0(r2)
   818d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   818d8:	e0bffc17 	ldw	r2,-16(fp)
   818dc:	10800a04 	addi	r2,r2,40
   818e0:	e1bfff17 	ldw	r6,-4(fp)
   818e4:	e17ffe17 	ldw	r5,-8(fp)
   818e8:	1009883a 	mov	r4,r2
   818ec:	0081ce80 	call	81ce8 <altera_avalon_jtag_uart_ioctl>
}
   818f0:	e037883a 	mov	sp,fp
   818f4:	dfc00117 	ldw	ra,4(sp)
   818f8:	df000017 	ldw	fp,0(sp)
   818fc:	dec00204 	addi	sp,sp,8
   81900:	f800283a 	ret

00081904 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   81904:	defffa04 	addi	sp,sp,-24
   81908:	dfc00515 	stw	ra,20(sp)
   8190c:	df000415 	stw	fp,16(sp)
   81910:	df000404 	addi	fp,sp,16
   81914:	e13ffd15 	stw	r4,-12(fp)
   81918:	e17ffe15 	stw	r5,-8(fp)
   8191c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81920:	e0bffd17 	ldw	r2,-12(fp)
   81924:	00c00044 	movi	r3,1
   81928:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8192c:	e0bffd17 	ldw	r2,-12(fp)
   81930:	10800017 	ldw	r2,0(r2)
   81934:	10800104 	addi	r2,r2,4
   81938:	1007883a 	mov	r3,r2
   8193c:	e0bffd17 	ldw	r2,-12(fp)
   81940:	10800817 	ldw	r2,32(r2)
   81944:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   81948:	e0bffe17 	ldw	r2,-8(fp)
   8194c:	e0ffff17 	ldw	r3,-4(fp)
   81950:	d8000015 	stw	zero,0(sp)
   81954:	e1fffd17 	ldw	r7,-12(fp)
   81958:	01800234 	movhi	r6,8
   8195c:	31867304 	addi	r6,r6,6604
   81960:	180b883a 	mov	r5,r3
   81964:	1009883a 	mov	r4,r2
   81968:	00826140 	call	82614 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8196c:	e0bffd17 	ldw	r2,-12(fp)
   81970:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   81974:	e0bffd17 	ldw	r2,-12(fp)
   81978:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8197c:	00800234 	movhi	r2,8
   81980:	1097f604 	addi	r2,r2,24536
   81984:	10800017 	ldw	r2,0(r2)
   81988:	e1fffd17 	ldw	r7,-12(fp)
   8198c:	01800234 	movhi	r6,8
   81990:	3186f604 	addi	r6,r6,7128
   81994:	100b883a 	mov	r5,r2
   81998:	1809883a 	mov	r4,r3
   8199c:	00822180 	call	82218 <alt_alarm_start>
   819a0:	1000040e 	bge	r2,zero,819b4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   819a4:	e0fffd17 	ldw	r3,-12(fp)
   819a8:	00a00034 	movhi	r2,32768
   819ac:	10bfffc4 	addi	r2,r2,-1
   819b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   819b4:	0001883a 	nop
   819b8:	e037883a 	mov	sp,fp
   819bc:	dfc00117 	ldw	ra,4(sp)
   819c0:	df000017 	ldw	fp,0(sp)
   819c4:	dec00204 	addi	sp,sp,8
   819c8:	f800283a 	ret

000819cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   819cc:	defff804 	addi	sp,sp,-32
   819d0:	df000715 	stw	fp,28(sp)
   819d4:	df000704 	addi	fp,sp,28
   819d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   819dc:	e0bfff17 	ldw	r2,-4(fp)
   819e0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   819e4:	e0bffb17 	ldw	r2,-20(fp)
   819e8:	10800017 	ldw	r2,0(r2)
   819ec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   819f0:	e0bffc17 	ldw	r2,-16(fp)
   819f4:	10800104 	addi	r2,r2,4
   819f8:	10800037 	ldwio	r2,0(r2)
   819fc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   81a00:	e0bffd17 	ldw	r2,-12(fp)
   81a04:	1080c00c 	andi	r2,r2,768
   81a08:	10006d26 	beq	r2,zero,81bc0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   81a0c:	e0bffd17 	ldw	r2,-12(fp)
   81a10:	1080400c 	andi	r2,r2,256
   81a14:	10003526 	beq	r2,zero,81aec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   81a18:	00800074 	movhi	r2,1
   81a1c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81a20:	e0bffb17 	ldw	r2,-20(fp)
   81a24:	10800a17 	ldw	r2,40(r2)
   81a28:	10800044 	addi	r2,r2,1
   81a2c:	1081ffcc 	andi	r2,r2,2047
   81a30:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   81a34:	e0bffb17 	ldw	r2,-20(fp)
   81a38:	10c00b17 	ldw	r3,44(r2)
   81a3c:	e0bffe17 	ldw	r2,-8(fp)
   81a40:	18801526 	beq	r3,r2,81a98 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   81a44:	e0bffc17 	ldw	r2,-16(fp)
   81a48:	10800037 	ldwio	r2,0(r2)
   81a4c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   81a50:	e0bff917 	ldw	r2,-28(fp)
   81a54:	10a0000c 	andi	r2,r2,32768
   81a58:	10001126 	beq	r2,zero,81aa0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   81a5c:	e0bffb17 	ldw	r2,-20(fp)
   81a60:	10800a17 	ldw	r2,40(r2)
   81a64:	e0fff917 	ldw	r3,-28(fp)
   81a68:	1809883a 	mov	r4,r3
   81a6c:	e0fffb17 	ldw	r3,-20(fp)
   81a70:	1885883a 	add	r2,r3,r2
   81a74:	10800e04 	addi	r2,r2,56
   81a78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81a7c:	e0bffb17 	ldw	r2,-20(fp)
   81a80:	10800a17 	ldw	r2,40(r2)
   81a84:	10800044 	addi	r2,r2,1
   81a88:	10c1ffcc 	andi	r3,r2,2047
   81a8c:	e0bffb17 	ldw	r2,-20(fp)
   81a90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   81a94:	003fe206 	br	81a20 <__alt_data_end+0xfffd0ce0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   81a98:	0001883a 	nop
   81a9c:	00000106 	br	81aa4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   81aa0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   81aa4:	e0bff917 	ldw	r2,-28(fp)
   81aa8:	10bfffec 	andhi	r2,r2,65535
   81aac:	10000f26 	beq	r2,zero,81aec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81ab0:	e0bffb17 	ldw	r2,-20(fp)
   81ab4:	10c00817 	ldw	r3,32(r2)
   81ab8:	00bfff84 	movi	r2,-2
   81abc:	1886703a 	and	r3,r3,r2
   81ac0:	e0bffb17 	ldw	r2,-20(fp)
   81ac4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   81ac8:	e0bffc17 	ldw	r2,-16(fp)
   81acc:	10800104 	addi	r2,r2,4
   81ad0:	1007883a 	mov	r3,r2
   81ad4:	e0bffb17 	ldw	r2,-20(fp)
   81ad8:	10800817 	ldw	r2,32(r2)
   81adc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81ae0:	e0bffc17 	ldw	r2,-16(fp)
   81ae4:	10800104 	addi	r2,r2,4
   81ae8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   81aec:	e0bffd17 	ldw	r2,-12(fp)
   81af0:	1080800c 	andi	r2,r2,512
   81af4:	103fbe26 	beq	r2,zero,819f0 <__alt_data_end+0xfffd0cb0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   81af8:	e0bffd17 	ldw	r2,-12(fp)
   81afc:	1004d43a 	srli	r2,r2,16
   81b00:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   81b04:	00001406 	br	81b58 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   81b08:	e0bffc17 	ldw	r2,-16(fp)
   81b0c:	e0fffb17 	ldw	r3,-20(fp)
   81b10:	18c00d17 	ldw	r3,52(r3)
   81b14:	e13ffb17 	ldw	r4,-20(fp)
   81b18:	20c7883a 	add	r3,r4,r3
   81b1c:	18c20e04 	addi	r3,r3,2104
   81b20:	18c00003 	ldbu	r3,0(r3)
   81b24:	18c03fcc 	andi	r3,r3,255
   81b28:	18c0201c 	xori	r3,r3,128
   81b2c:	18ffe004 	addi	r3,r3,-128
   81b30:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81b34:	e0bffb17 	ldw	r2,-20(fp)
   81b38:	10800d17 	ldw	r2,52(r2)
   81b3c:	10800044 	addi	r2,r2,1
   81b40:	10c1ffcc 	andi	r3,r2,2047
   81b44:	e0bffb17 	ldw	r2,-20(fp)
   81b48:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   81b4c:	e0bffa17 	ldw	r2,-24(fp)
   81b50:	10bfffc4 	addi	r2,r2,-1
   81b54:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   81b58:	e0bffa17 	ldw	r2,-24(fp)
   81b5c:	10000526 	beq	r2,zero,81b74 <altera_avalon_jtag_uart_irq+0x1a8>
   81b60:	e0bffb17 	ldw	r2,-20(fp)
   81b64:	10c00d17 	ldw	r3,52(r2)
   81b68:	e0bffb17 	ldw	r2,-20(fp)
   81b6c:	10800c17 	ldw	r2,48(r2)
   81b70:	18bfe51e 	bne	r3,r2,81b08 <__alt_data_end+0xfffd0dc8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   81b74:	e0bffa17 	ldw	r2,-24(fp)
   81b78:	103f9d26 	beq	r2,zero,819f0 <__alt_data_end+0xfffd0cb0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81b7c:	e0bffb17 	ldw	r2,-20(fp)
   81b80:	10c00817 	ldw	r3,32(r2)
   81b84:	00bfff44 	movi	r2,-3
   81b88:	1886703a 	and	r3,r3,r2
   81b8c:	e0bffb17 	ldw	r2,-20(fp)
   81b90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81b94:	e0bffb17 	ldw	r2,-20(fp)
   81b98:	10800017 	ldw	r2,0(r2)
   81b9c:	10800104 	addi	r2,r2,4
   81ba0:	1007883a 	mov	r3,r2
   81ba4:	e0bffb17 	ldw	r2,-20(fp)
   81ba8:	10800817 	ldw	r2,32(r2)
   81bac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81bb0:	e0bffc17 	ldw	r2,-16(fp)
   81bb4:	10800104 	addi	r2,r2,4
   81bb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   81bbc:	003f8c06 	br	819f0 <__alt_data_end+0xfffd0cb0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   81bc0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   81bc4:	0001883a 	nop
   81bc8:	e037883a 	mov	sp,fp
   81bcc:	df000017 	ldw	fp,0(sp)
   81bd0:	dec00104 	addi	sp,sp,4
   81bd4:	f800283a 	ret

00081bd8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   81bd8:	defff804 	addi	sp,sp,-32
   81bdc:	df000715 	stw	fp,28(sp)
   81be0:	df000704 	addi	fp,sp,28
   81be4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   81be8:	e0bffb17 	ldw	r2,-20(fp)
   81bec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   81bf0:	e0bff917 	ldw	r2,-28(fp)
   81bf4:	10800017 	ldw	r2,0(r2)
   81bf8:	10800104 	addi	r2,r2,4
   81bfc:	10800037 	ldwio	r2,0(r2)
   81c00:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   81c04:	e0bffa17 	ldw	r2,-24(fp)
   81c08:	1081000c 	andi	r2,r2,1024
   81c0c:	10000b26 	beq	r2,zero,81c3c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   81c10:	e0bff917 	ldw	r2,-28(fp)
   81c14:	10800017 	ldw	r2,0(r2)
   81c18:	10800104 	addi	r2,r2,4
   81c1c:	1007883a 	mov	r3,r2
   81c20:	e0bff917 	ldw	r2,-28(fp)
   81c24:	10800817 	ldw	r2,32(r2)
   81c28:	10810014 	ori	r2,r2,1024
   81c2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   81c30:	e0bff917 	ldw	r2,-28(fp)
   81c34:	10000915 	stw	zero,36(r2)
   81c38:	00000a06 	br	81c64 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   81c3c:	e0bff917 	ldw	r2,-28(fp)
   81c40:	10c00917 	ldw	r3,36(r2)
   81c44:	00a00034 	movhi	r2,32768
   81c48:	10bfff04 	addi	r2,r2,-4
   81c4c:	10c00536 	bltu	r2,r3,81c64 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   81c50:	e0bff917 	ldw	r2,-28(fp)
   81c54:	10800917 	ldw	r2,36(r2)
   81c58:	10c00044 	addi	r3,r2,1
   81c5c:	e0bff917 	ldw	r2,-28(fp)
   81c60:	10c00915 	stw	r3,36(r2)
   81c64:	00800234 	movhi	r2,8
   81c68:	1097f604 	addi	r2,r2,24536
   81c6c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   81c70:	e037883a 	mov	sp,fp
   81c74:	df000017 	ldw	fp,0(sp)
   81c78:	dec00104 	addi	sp,sp,4
   81c7c:	f800283a 	ret

00081c80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   81c80:	defffd04 	addi	sp,sp,-12
   81c84:	df000215 	stw	fp,8(sp)
   81c88:	df000204 	addi	fp,sp,8
   81c8c:	e13ffe15 	stw	r4,-8(fp)
   81c90:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   81c94:	00000506 	br	81cac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   81c98:	e0bfff17 	ldw	r2,-4(fp)
   81c9c:	1090000c 	andi	r2,r2,16384
   81ca0:	10000226 	beq	r2,zero,81cac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   81ca4:	00bffd44 	movi	r2,-11
   81ca8:	00000b06 	br	81cd8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   81cac:	e0bffe17 	ldw	r2,-8(fp)
   81cb0:	10c00d17 	ldw	r3,52(r2)
   81cb4:	e0bffe17 	ldw	r2,-8(fp)
   81cb8:	10800c17 	ldw	r2,48(r2)
   81cbc:	18800526 	beq	r3,r2,81cd4 <altera_avalon_jtag_uart_close+0x54>
   81cc0:	e0bffe17 	ldw	r2,-8(fp)
   81cc4:	10c00917 	ldw	r3,36(r2)
   81cc8:	e0bffe17 	ldw	r2,-8(fp)
   81ccc:	10800117 	ldw	r2,4(r2)
   81cd0:	18bff136 	bltu	r3,r2,81c98 <__alt_data_end+0xfffd0f58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   81cd4:	0005883a 	mov	r2,zero
}
   81cd8:	e037883a 	mov	sp,fp
   81cdc:	df000017 	ldw	fp,0(sp)
   81ce0:	dec00104 	addi	sp,sp,4
   81ce4:	f800283a 	ret

00081ce8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   81ce8:	defffa04 	addi	sp,sp,-24
   81cec:	df000515 	stw	fp,20(sp)
   81cf0:	df000504 	addi	fp,sp,20
   81cf4:	e13ffd15 	stw	r4,-12(fp)
   81cf8:	e17ffe15 	stw	r5,-8(fp)
   81cfc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   81d00:	00bff9c4 	movi	r2,-25
   81d04:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   81d08:	e0bffe17 	ldw	r2,-8(fp)
   81d0c:	10da8060 	cmpeqi	r3,r2,27137
   81d10:	1800031e 	bne	r3,zero,81d20 <altera_avalon_jtag_uart_ioctl+0x38>
   81d14:	109a80a0 	cmpeqi	r2,r2,27138
   81d18:	1000181e 	bne	r2,zero,81d7c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   81d1c:	00002906 	br	81dc4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   81d20:	e0bffd17 	ldw	r2,-12(fp)
   81d24:	10c00117 	ldw	r3,4(r2)
   81d28:	00a00034 	movhi	r2,32768
   81d2c:	10bfffc4 	addi	r2,r2,-1
   81d30:	18802126 	beq	r3,r2,81db8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   81d34:	e0bfff17 	ldw	r2,-4(fp)
   81d38:	10800017 	ldw	r2,0(r2)
   81d3c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   81d40:	e0bffc17 	ldw	r2,-16(fp)
   81d44:	10800090 	cmplti	r2,r2,2
   81d48:	1000061e 	bne	r2,zero,81d64 <altera_avalon_jtag_uart_ioctl+0x7c>
   81d4c:	e0fffc17 	ldw	r3,-16(fp)
   81d50:	00a00034 	movhi	r2,32768
   81d54:	10bfffc4 	addi	r2,r2,-1
   81d58:	18800226 	beq	r3,r2,81d64 <altera_avalon_jtag_uart_ioctl+0x7c>
   81d5c:	e0bffc17 	ldw	r2,-16(fp)
   81d60:	00000206 	br	81d6c <altera_avalon_jtag_uart_ioctl+0x84>
   81d64:	00a00034 	movhi	r2,32768
   81d68:	10bfff84 	addi	r2,r2,-2
   81d6c:	e0fffd17 	ldw	r3,-12(fp)
   81d70:	18800115 	stw	r2,4(r3)
      rc = 0;
   81d74:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81d78:	00000f06 	br	81db8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   81d7c:	e0bffd17 	ldw	r2,-12(fp)
   81d80:	10c00117 	ldw	r3,4(r2)
   81d84:	00a00034 	movhi	r2,32768
   81d88:	10bfffc4 	addi	r2,r2,-1
   81d8c:	18800c26 	beq	r3,r2,81dc0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   81d90:	e0bffd17 	ldw	r2,-12(fp)
   81d94:	10c00917 	ldw	r3,36(r2)
   81d98:	e0bffd17 	ldw	r2,-12(fp)
   81d9c:	10800117 	ldw	r2,4(r2)
   81da0:	1885803a 	cmpltu	r2,r3,r2
   81da4:	10c03fcc 	andi	r3,r2,255
   81da8:	e0bfff17 	ldw	r2,-4(fp)
   81dac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   81db0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81db4:	00000206 	br	81dc0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   81db8:	0001883a 	nop
   81dbc:	00000106 	br	81dc4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   81dc0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   81dc4:	e0bffb17 	ldw	r2,-20(fp)
}
   81dc8:	e037883a 	mov	sp,fp
   81dcc:	df000017 	ldw	fp,0(sp)
   81dd0:	dec00104 	addi	sp,sp,4
   81dd4:	f800283a 	ret

00081dd8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   81dd8:	defff304 	addi	sp,sp,-52
   81ddc:	dfc00c15 	stw	ra,48(sp)
   81de0:	df000b15 	stw	fp,44(sp)
   81de4:	df000b04 	addi	fp,sp,44
   81de8:	e13ffc15 	stw	r4,-16(fp)
   81dec:	e17ffd15 	stw	r5,-12(fp)
   81df0:	e1bffe15 	stw	r6,-8(fp)
   81df4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   81df8:	e0bffd17 	ldw	r2,-12(fp)
   81dfc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81e00:	00004706 	br	81f20 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81e04:	e0bffc17 	ldw	r2,-16(fp)
   81e08:	10800a17 	ldw	r2,40(r2)
   81e0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81e10:	e0bffc17 	ldw	r2,-16(fp)
   81e14:	10800b17 	ldw	r2,44(r2)
   81e18:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   81e1c:	e0fff717 	ldw	r3,-36(fp)
   81e20:	e0bff817 	ldw	r2,-32(fp)
   81e24:	18800536 	bltu	r3,r2,81e3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   81e28:	e0fff717 	ldw	r3,-36(fp)
   81e2c:	e0bff817 	ldw	r2,-32(fp)
   81e30:	1885c83a 	sub	r2,r3,r2
   81e34:	e0bff615 	stw	r2,-40(fp)
   81e38:	00000406 	br	81e4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81e3c:	00c20004 	movi	r3,2048
   81e40:	e0bff817 	ldw	r2,-32(fp)
   81e44:	1885c83a 	sub	r2,r3,r2
   81e48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81e4c:	e0bff617 	ldw	r2,-40(fp)
   81e50:	10001e26 	beq	r2,zero,81ecc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   81e54:	e0fffe17 	ldw	r3,-8(fp)
   81e58:	e0bff617 	ldw	r2,-40(fp)
   81e5c:	1880022e 	bgeu	r3,r2,81e68 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   81e60:	e0bffe17 	ldw	r2,-8(fp)
   81e64:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   81e68:	e0bffc17 	ldw	r2,-16(fp)
   81e6c:	10c00e04 	addi	r3,r2,56
   81e70:	e0bff817 	ldw	r2,-32(fp)
   81e74:	1885883a 	add	r2,r3,r2
   81e78:	e1bff617 	ldw	r6,-40(fp)
   81e7c:	100b883a 	mov	r5,r2
   81e80:	e13ff517 	ldw	r4,-44(fp)
   81e84:	0080d600 	call	80d60 <memcpy>
      ptr   += n;
   81e88:	e0fff517 	ldw	r3,-44(fp)
   81e8c:	e0bff617 	ldw	r2,-40(fp)
   81e90:	1885883a 	add	r2,r3,r2
   81e94:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   81e98:	e0fffe17 	ldw	r3,-8(fp)
   81e9c:	e0bff617 	ldw	r2,-40(fp)
   81ea0:	1885c83a 	sub	r2,r3,r2
   81ea4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81ea8:	e0fff817 	ldw	r3,-32(fp)
   81eac:	e0bff617 	ldw	r2,-40(fp)
   81eb0:	1885883a 	add	r2,r3,r2
   81eb4:	10c1ffcc 	andi	r3,r2,2047
   81eb8:	e0bffc17 	ldw	r2,-16(fp)
   81ebc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   81ec0:	e0bffe17 	ldw	r2,-8(fp)
   81ec4:	00bfcf16 	blt	zero,r2,81e04 <__alt_data_end+0xfffd10c4>
   81ec8:	00000106 	br	81ed0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   81ecc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   81ed0:	e0fff517 	ldw	r3,-44(fp)
   81ed4:	e0bffd17 	ldw	r2,-12(fp)
   81ed8:	1880141e 	bne	r3,r2,81f2c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   81edc:	e0bfff17 	ldw	r2,-4(fp)
   81ee0:	1090000c 	andi	r2,r2,16384
   81ee4:	1000131e 	bne	r2,zero,81f34 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81ee8:	0001883a 	nop
   81eec:	e0bffc17 	ldw	r2,-16(fp)
   81ef0:	10c00a17 	ldw	r3,40(r2)
   81ef4:	e0bff717 	ldw	r2,-36(fp)
   81ef8:	1880051e 	bne	r3,r2,81f10 <altera_avalon_jtag_uart_read+0x138>
   81efc:	e0bffc17 	ldw	r2,-16(fp)
   81f00:	10c00917 	ldw	r3,36(r2)
   81f04:	e0bffc17 	ldw	r2,-16(fp)
   81f08:	10800117 	ldw	r2,4(r2)
   81f0c:	18bff736 	bltu	r3,r2,81eec <__alt_data_end+0xfffd11ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81f10:	e0bffc17 	ldw	r2,-16(fp)
   81f14:	10c00a17 	ldw	r3,40(r2)
   81f18:	e0bff717 	ldw	r2,-36(fp)
   81f1c:	18800726 	beq	r3,r2,81f3c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81f20:	e0bffe17 	ldw	r2,-8(fp)
   81f24:	00bfb716 	blt	zero,r2,81e04 <__alt_data_end+0xfffd10c4>
   81f28:	00000506 	br	81f40 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   81f2c:	0001883a 	nop
   81f30:	00000306 	br	81f40 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   81f34:	0001883a 	nop
   81f38:	00000106 	br	81f40 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   81f3c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   81f40:	e0fff517 	ldw	r3,-44(fp)
   81f44:	e0bffd17 	ldw	r2,-12(fp)
   81f48:	18801826 	beq	r3,r2,81fac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81f4c:	0005303a 	rdctl	r2,status
   81f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81f54:	e0fffb17 	ldw	r3,-20(fp)
   81f58:	00bfff84 	movi	r2,-2
   81f5c:	1884703a 	and	r2,r3,r2
   81f60:	1001703a 	wrctl	status,r2
  
  return context;
   81f64:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   81f68:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81f6c:	e0bffc17 	ldw	r2,-16(fp)
   81f70:	10800817 	ldw	r2,32(r2)
   81f74:	10c00054 	ori	r3,r2,1
   81f78:	e0bffc17 	ldw	r2,-16(fp)
   81f7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81f80:	e0bffc17 	ldw	r2,-16(fp)
   81f84:	10800017 	ldw	r2,0(r2)
   81f88:	10800104 	addi	r2,r2,4
   81f8c:	1007883a 	mov	r3,r2
   81f90:	e0bffc17 	ldw	r2,-16(fp)
   81f94:	10800817 	ldw	r2,32(r2)
   81f98:	18800035 	stwio	r2,0(r3)
   81f9c:	e0bffa17 	ldw	r2,-24(fp)
   81fa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81fa4:	e0bff917 	ldw	r2,-28(fp)
   81fa8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   81fac:	e0fff517 	ldw	r3,-44(fp)
   81fb0:	e0bffd17 	ldw	r2,-12(fp)
   81fb4:	18800426 	beq	r3,r2,81fc8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   81fb8:	e0fff517 	ldw	r3,-44(fp)
   81fbc:	e0bffd17 	ldw	r2,-12(fp)
   81fc0:	1885c83a 	sub	r2,r3,r2
   81fc4:	00000606 	br	81fe0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   81fc8:	e0bfff17 	ldw	r2,-4(fp)
   81fcc:	1090000c 	andi	r2,r2,16384
   81fd0:	10000226 	beq	r2,zero,81fdc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   81fd4:	00bffd44 	movi	r2,-11
   81fd8:	00000106 	br	81fe0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   81fdc:	00bffec4 	movi	r2,-5
}
   81fe0:	e037883a 	mov	sp,fp
   81fe4:	dfc00117 	ldw	ra,4(sp)
   81fe8:	df000017 	ldw	fp,0(sp)
   81fec:	dec00204 	addi	sp,sp,8
   81ff0:	f800283a 	ret

00081ff4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   81ff4:	defff304 	addi	sp,sp,-52
   81ff8:	dfc00c15 	stw	ra,48(sp)
   81ffc:	df000b15 	stw	fp,44(sp)
   82000:	df000b04 	addi	fp,sp,44
   82004:	e13ffc15 	stw	r4,-16(fp)
   82008:	e17ffd15 	stw	r5,-12(fp)
   8200c:	e1bffe15 	stw	r6,-8(fp)
   82010:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   82014:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   82018:	e0bffd17 	ldw	r2,-12(fp)
   8201c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   82020:	00003706 	br	82100 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   82024:	e0bffc17 	ldw	r2,-16(fp)
   82028:	10800c17 	ldw	r2,48(r2)
   8202c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   82030:	e0bffc17 	ldw	r2,-16(fp)
   82034:	10800d17 	ldw	r2,52(r2)
   82038:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8203c:	e0fff917 	ldw	r3,-28(fp)
   82040:	e0bff517 	ldw	r2,-44(fp)
   82044:	1880062e 	bgeu	r3,r2,82060 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   82048:	e0fff517 	ldw	r3,-44(fp)
   8204c:	e0bff917 	ldw	r2,-28(fp)
   82050:	1885c83a 	sub	r2,r3,r2
   82054:	10bfffc4 	addi	r2,r2,-1
   82058:	e0bff615 	stw	r2,-40(fp)
   8205c:	00000b06 	br	8208c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   82060:	e0bff517 	ldw	r2,-44(fp)
   82064:	10000526 	beq	r2,zero,8207c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   82068:	00c20004 	movi	r3,2048
   8206c:	e0bff917 	ldw	r2,-28(fp)
   82070:	1885c83a 	sub	r2,r3,r2
   82074:	e0bff615 	stw	r2,-40(fp)
   82078:	00000406 	br	8208c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8207c:	00c1ffc4 	movi	r3,2047
   82080:	e0bff917 	ldw	r2,-28(fp)
   82084:	1885c83a 	sub	r2,r3,r2
   82088:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8208c:	e0bff617 	ldw	r2,-40(fp)
   82090:	10001e26 	beq	r2,zero,8210c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   82094:	e0fffe17 	ldw	r3,-8(fp)
   82098:	e0bff617 	ldw	r2,-40(fp)
   8209c:	1880022e 	bgeu	r3,r2,820a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   820a0:	e0bffe17 	ldw	r2,-8(fp)
   820a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   820a8:	e0bffc17 	ldw	r2,-16(fp)
   820ac:	10c20e04 	addi	r3,r2,2104
   820b0:	e0bff917 	ldw	r2,-28(fp)
   820b4:	1885883a 	add	r2,r3,r2
   820b8:	e1bff617 	ldw	r6,-40(fp)
   820bc:	e17ffd17 	ldw	r5,-12(fp)
   820c0:	1009883a 	mov	r4,r2
   820c4:	0080d600 	call	80d60 <memcpy>
      ptr   += n;
   820c8:	e0fffd17 	ldw	r3,-12(fp)
   820cc:	e0bff617 	ldw	r2,-40(fp)
   820d0:	1885883a 	add	r2,r3,r2
   820d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   820d8:	e0fffe17 	ldw	r3,-8(fp)
   820dc:	e0bff617 	ldw	r2,-40(fp)
   820e0:	1885c83a 	sub	r2,r3,r2
   820e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   820e8:	e0fff917 	ldw	r3,-28(fp)
   820ec:	e0bff617 	ldw	r2,-40(fp)
   820f0:	1885883a 	add	r2,r3,r2
   820f4:	10c1ffcc 	andi	r3,r2,2047
   820f8:	e0bffc17 	ldw	r2,-16(fp)
   820fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   82100:	e0bffe17 	ldw	r2,-8(fp)
   82104:	00bfc716 	blt	zero,r2,82024 <__alt_data_end+0xfffd12e4>
   82108:	00000106 	br	82110 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8210c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82110:	0005303a 	rdctl	r2,status
   82114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82118:	e0fffb17 	ldw	r3,-20(fp)
   8211c:	00bfff84 	movi	r2,-2
   82120:	1884703a 	and	r2,r3,r2
   82124:	1001703a 	wrctl	status,r2
  
  return context;
   82128:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8212c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   82130:	e0bffc17 	ldw	r2,-16(fp)
   82134:	10800817 	ldw	r2,32(r2)
   82138:	10c00094 	ori	r3,r2,2
   8213c:	e0bffc17 	ldw	r2,-16(fp)
   82140:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   82144:	e0bffc17 	ldw	r2,-16(fp)
   82148:	10800017 	ldw	r2,0(r2)
   8214c:	10800104 	addi	r2,r2,4
   82150:	1007883a 	mov	r3,r2
   82154:	e0bffc17 	ldw	r2,-16(fp)
   82158:	10800817 	ldw	r2,32(r2)
   8215c:	18800035 	stwio	r2,0(r3)
   82160:	e0bffa17 	ldw	r2,-24(fp)
   82164:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82168:	e0bff817 	ldw	r2,-32(fp)
   8216c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   82170:	e0bffe17 	ldw	r2,-8(fp)
   82174:	0080100e 	bge	zero,r2,821b8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   82178:	e0bfff17 	ldw	r2,-4(fp)
   8217c:	1090000c 	andi	r2,r2,16384
   82180:	1000101e 	bne	r2,zero,821c4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   82184:	0001883a 	nop
   82188:	e0bffc17 	ldw	r2,-16(fp)
   8218c:	10c00d17 	ldw	r3,52(r2)
   82190:	e0bff517 	ldw	r2,-44(fp)
   82194:	1880051e 	bne	r3,r2,821ac <altera_avalon_jtag_uart_write+0x1b8>
   82198:	e0bffc17 	ldw	r2,-16(fp)
   8219c:	10c00917 	ldw	r3,36(r2)
   821a0:	e0bffc17 	ldw	r2,-16(fp)
   821a4:	10800117 	ldw	r2,4(r2)
   821a8:	18bff736 	bltu	r3,r2,82188 <__alt_data_end+0xfffd1448>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   821ac:	e0bffc17 	ldw	r2,-16(fp)
   821b0:	10800917 	ldw	r2,36(r2)
   821b4:	1000051e 	bne	r2,zero,821cc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   821b8:	e0bffe17 	ldw	r2,-8(fp)
   821bc:	00bfd016 	blt	zero,r2,82100 <__alt_data_end+0xfffd13c0>
   821c0:	00000306 	br	821d0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   821c4:	0001883a 	nop
   821c8:	00000106 	br	821d0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   821cc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   821d0:	e0fffd17 	ldw	r3,-12(fp)
   821d4:	e0bff717 	ldw	r2,-36(fp)
   821d8:	18800426 	beq	r3,r2,821ec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   821dc:	e0fffd17 	ldw	r3,-12(fp)
   821e0:	e0bff717 	ldw	r2,-36(fp)
   821e4:	1885c83a 	sub	r2,r3,r2
   821e8:	00000606 	br	82204 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   821ec:	e0bfff17 	ldw	r2,-4(fp)
   821f0:	1090000c 	andi	r2,r2,16384
   821f4:	10000226 	beq	r2,zero,82200 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   821f8:	00bffd44 	movi	r2,-11
   821fc:	00000106 	br	82204 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   82200:	00bffec4 	movi	r2,-5
}
   82204:	e037883a 	mov	sp,fp
   82208:	dfc00117 	ldw	ra,4(sp)
   8220c:	df000017 	ldw	fp,0(sp)
   82210:	dec00204 	addi	sp,sp,8
   82214:	f800283a 	ret

00082218 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   82218:	defff504 	addi	sp,sp,-44
   8221c:	df000a15 	stw	fp,40(sp)
   82220:	df000a04 	addi	fp,sp,40
   82224:	e13ffc15 	stw	r4,-16(fp)
   82228:	e17ffd15 	stw	r5,-12(fp)
   8222c:	e1bffe15 	stw	r6,-8(fp)
   82230:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   82234:	e03ff615 	stw	zero,-40(fp)
   82238:	00800234 	movhi	r2,8
   8223c:	1097f604 	addi	r2,r2,24536
   82240:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   82244:	10003f26 	beq	r2,zero,82344 <alt_alarm_start+0x12c>
  {
    if (alarm)
   82248:	e0bffc17 	ldw	r2,-16(fp)
   8224c:	10003b26 	beq	r2,zero,8233c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   82250:	e0bffc17 	ldw	r2,-16(fp)
   82254:	e0fffe17 	ldw	r3,-8(fp)
   82258:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8225c:	e0bffc17 	ldw	r2,-16(fp)
   82260:	e0ffff17 	ldw	r3,-4(fp)
   82264:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82268:	0005303a 	rdctl	r2,status
   8226c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82270:	e0fff917 	ldw	r3,-28(fp)
   82274:	00bfff84 	movi	r2,-2
   82278:	1884703a 	and	r2,r3,r2
   8227c:	1001703a 	wrctl	status,r2
  
  return context;
   82280:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   82284:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   82288:	00800234 	movhi	r2,8
   8228c:	1097f704 	addi	r2,r2,24540
   82290:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   82294:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   82298:	e0fffd17 	ldw	r3,-12(fp)
   8229c:	e0bff617 	ldw	r2,-40(fp)
   822a0:	1885883a 	add	r2,r3,r2
   822a4:	10c00044 	addi	r3,r2,1
   822a8:	e0bffc17 	ldw	r2,-16(fp)
   822ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   822b0:	e0bffc17 	ldw	r2,-16(fp)
   822b4:	10c00217 	ldw	r3,8(r2)
   822b8:	e0bff617 	ldw	r2,-40(fp)
   822bc:	1880042e 	bgeu	r3,r2,822d0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   822c0:	e0bffc17 	ldw	r2,-16(fp)
   822c4:	00c00044 	movi	r3,1
   822c8:	10c00405 	stb	r3,16(r2)
   822cc:	00000206 	br	822d8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   822d0:	e0bffc17 	ldw	r2,-16(fp)
   822d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   822d8:	e0fffc17 	ldw	r3,-16(fp)
   822dc:	00800234 	movhi	r2,8
   822e0:	1092f704 	addi	r2,r2,19420
   822e4:	e0bffa15 	stw	r2,-24(fp)
   822e8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   822ec:	e0bffb17 	ldw	r2,-20(fp)
   822f0:	e0fffa17 	ldw	r3,-24(fp)
   822f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   822f8:	e0bffa17 	ldw	r2,-24(fp)
   822fc:	10c00017 	ldw	r3,0(r2)
   82300:	e0bffb17 	ldw	r2,-20(fp)
   82304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82308:	e0bffa17 	ldw	r2,-24(fp)
   8230c:	10800017 	ldw	r2,0(r2)
   82310:	e0fffb17 	ldw	r3,-20(fp)
   82314:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82318:	e0bffa17 	ldw	r2,-24(fp)
   8231c:	e0fffb17 	ldw	r3,-20(fp)
   82320:	10c00015 	stw	r3,0(r2)
   82324:	e0bff817 	ldw	r2,-32(fp)
   82328:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8232c:	e0bff717 	ldw	r2,-36(fp)
   82330:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   82334:	0005883a 	mov	r2,zero
   82338:	00000306 	br	82348 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8233c:	00bffa84 	movi	r2,-22
   82340:	00000106 	br	82348 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   82344:	00bfde84 	movi	r2,-134
  }
}
   82348:	e037883a 	mov	sp,fp
   8234c:	df000017 	ldw	fp,0(sp)
   82350:	dec00104 	addi	sp,sp,4
   82354:	f800283a 	ret

00082358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82358:	defffe04 	addi	sp,sp,-8
   8235c:	dfc00115 	stw	ra,4(sp)
   82360:	df000015 	stw	fp,0(sp)
   82364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82368:	00800234 	movhi	r2,8
   8236c:	1092f504 	addi	r2,r2,19412
   82370:	10800017 	ldw	r2,0(r2)
   82374:	10000526 	beq	r2,zero,8238c <alt_get_errno+0x34>
   82378:	00800234 	movhi	r2,8
   8237c:	1092f504 	addi	r2,r2,19412
   82380:	10800017 	ldw	r2,0(r2)
   82384:	103ee83a 	callr	r2
   82388:	00000206 	br	82394 <alt_get_errno+0x3c>
   8238c:	00800234 	movhi	r2,8
   82390:	1097f904 	addi	r2,r2,24548
}
   82394:	e037883a 	mov	sp,fp
   82398:	dfc00117 	ldw	ra,4(sp)
   8239c:	df000017 	ldw	fp,0(sp)
   823a0:	dec00204 	addi	sp,sp,8
   823a4:	f800283a 	ret

000823a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   823a8:	defffb04 	addi	sp,sp,-20
   823ac:	dfc00415 	stw	ra,16(sp)
   823b0:	df000315 	stw	fp,12(sp)
   823b4:	df000304 	addi	fp,sp,12
   823b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   823bc:	e0bfff17 	ldw	r2,-4(fp)
   823c0:	10000616 	blt	r2,zero,823dc <close+0x34>
   823c4:	e0bfff17 	ldw	r2,-4(fp)
   823c8:	10c00324 	muli	r3,r2,12
   823cc:	00800234 	movhi	r2,8
   823d0:	10928e04 	addi	r2,r2,19000
   823d4:	1885883a 	add	r2,r3,r2
   823d8:	00000106 	br	823e0 <close+0x38>
   823dc:	0005883a 	mov	r2,zero
   823e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   823e4:	e0bffd17 	ldw	r2,-12(fp)
   823e8:	10001926 	beq	r2,zero,82450 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   823ec:	e0bffd17 	ldw	r2,-12(fp)
   823f0:	10800017 	ldw	r2,0(r2)
   823f4:	10800417 	ldw	r2,16(r2)
   823f8:	10000626 	beq	r2,zero,82414 <close+0x6c>
   823fc:	e0bffd17 	ldw	r2,-12(fp)
   82400:	10800017 	ldw	r2,0(r2)
   82404:	10800417 	ldw	r2,16(r2)
   82408:	e13ffd17 	ldw	r4,-12(fp)
   8240c:	103ee83a 	callr	r2
   82410:	00000106 	br	82418 <close+0x70>
   82414:	0005883a 	mov	r2,zero
   82418:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8241c:	e13fff17 	ldw	r4,-4(fp)
   82420:	0082c980 	call	82c98 <alt_release_fd>
    if (rval < 0)
   82424:	e0bffe17 	ldw	r2,-8(fp)
   82428:	1000070e 	bge	r2,zero,82448 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8242c:	00823580 	call	82358 <alt_get_errno>
   82430:	1007883a 	mov	r3,r2
   82434:	e0bffe17 	ldw	r2,-8(fp)
   82438:	0085c83a 	sub	r2,zero,r2
   8243c:	18800015 	stw	r2,0(r3)
      return -1;
   82440:	00bfffc4 	movi	r2,-1
   82444:	00000706 	br	82464 <close+0xbc>
    }
    return 0;
   82448:	0005883a 	mov	r2,zero
   8244c:	00000506 	br	82464 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82450:	00823580 	call	82358 <alt_get_errno>
   82454:	1007883a 	mov	r3,r2
   82458:	00801444 	movi	r2,81
   8245c:	18800015 	stw	r2,0(r3)
    return -1;
   82460:	00bfffc4 	movi	r2,-1
  }
}
   82464:	e037883a 	mov	sp,fp
   82468:	dfc00117 	ldw	ra,4(sp)
   8246c:	df000017 	ldw	fp,0(sp)
   82470:	dec00204 	addi	sp,sp,8
   82474:	f800283a 	ret

00082478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82478:	defffe04 	addi	sp,sp,-8
   8247c:	df000115 	stw	fp,4(sp)
   82480:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82484:	e03fff15 	stw	zero,-4(fp)
   82488:	00000506 	br	824a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8248c:	e0bfff17 	ldw	r2,-4(fp)
   82490:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82494:	e0bfff17 	ldw	r2,-4(fp)
   82498:	10800804 	addi	r2,r2,32
   8249c:	e0bfff15 	stw	r2,-4(fp)
   824a0:	e0bfff17 	ldw	r2,-4(fp)
   824a4:	10820030 	cmpltui	r2,r2,2048
   824a8:	103ff81e 	bne	r2,zero,8248c <__alt_data_end+0xfffd174c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   824ac:	0001883a 	nop
   824b0:	e037883a 	mov	sp,fp
   824b4:	df000017 	ldw	fp,0(sp)
   824b8:	dec00104 	addi	sp,sp,4
   824bc:	f800283a 	ret

000824c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   824c0:	defffc04 	addi	sp,sp,-16
   824c4:	df000315 	stw	fp,12(sp)
   824c8:	df000304 	addi	fp,sp,12
   824cc:	e13ffd15 	stw	r4,-12(fp)
   824d0:	e17ffe15 	stw	r5,-8(fp)
   824d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   824d8:	e0bfff17 	ldw	r2,-4(fp)
}
   824dc:	e037883a 	mov	sp,fp
   824e0:	df000017 	ldw	fp,0(sp)
   824e4:	dec00104 	addi	sp,sp,4
   824e8:	f800283a 	ret

000824ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   824ec:	defffe04 	addi	sp,sp,-8
   824f0:	dfc00115 	stw	ra,4(sp)
   824f4:	df000015 	stw	fp,0(sp)
   824f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   824fc:	00800234 	movhi	r2,8
   82500:	1092f504 	addi	r2,r2,19412
   82504:	10800017 	ldw	r2,0(r2)
   82508:	10000526 	beq	r2,zero,82520 <alt_get_errno+0x34>
   8250c:	00800234 	movhi	r2,8
   82510:	1092f504 	addi	r2,r2,19412
   82514:	10800017 	ldw	r2,0(r2)
   82518:	103ee83a 	callr	r2
   8251c:	00000206 	br	82528 <alt_get_errno+0x3c>
   82520:	00800234 	movhi	r2,8
   82524:	1097f904 	addi	r2,r2,24548
}
   82528:	e037883a 	mov	sp,fp
   8252c:	dfc00117 	ldw	ra,4(sp)
   82530:	df000017 	ldw	fp,0(sp)
   82534:	dec00204 	addi	sp,sp,8
   82538:	f800283a 	ret

0008253c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8253c:	defffa04 	addi	sp,sp,-24
   82540:	dfc00515 	stw	ra,20(sp)
   82544:	df000415 	stw	fp,16(sp)
   82548:	df000404 	addi	fp,sp,16
   8254c:	e13ffe15 	stw	r4,-8(fp)
   82550:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   82554:	e0bffe17 	ldw	r2,-8(fp)
   82558:	10000326 	beq	r2,zero,82568 <alt_dev_llist_insert+0x2c>
   8255c:	e0bffe17 	ldw	r2,-8(fp)
   82560:	10800217 	ldw	r2,8(r2)
   82564:	1000061e 	bne	r2,zero,82580 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   82568:	00824ec0 	call	824ec <alt_get_errno>
   8256c:	1007883a 	mov	r3,r2
   82570:	00800584 	movi	r2,22
   82574:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   82578:	00bffa84 	movi	r2,-22
   8257c:	00001306 	br	825cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   82580:	e0bffe17 	ldw	r2,-8(fp)
   82584:	e0ffff17 	ldw	r3,-4(fp)
   82588:	e0fffc15 	stw	r3,-16(fp)
   8258c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82590:	e0bffd17 	ldw	r2,-12(fp)
   82594:	e0fffc17 	ldw	r3,-16(fp)
   82598:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8259c:	e0bffc17 	ldw	r2,-16(fp)
   825a0:	10c00017 	ldw	r3,0(r2)
   825a4:	e0bffd17 	ldw	r2,-12(fp)
   825a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   825ac:	e0bffc17 	ldw	r2,-16(fp)
   825b0:	10800017 	ldw	r2,0(r2)
   825b4:	e0fffd17 	ldw	r3,-12(fp)
   825b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   825bc:	e0bffc17 	ldw	r2,-16(fp)
   825c0:	e0fffd17 	ldw	r3,-12(fp)
   825c4:	10c00015 	stw	r3,0(r2)

  return 0;  
   825c8:	0005883a 	mov	r2,zero
}
   825cc:	e037883a 	mov	sp,fp
   825d0:	dfc00117 	ldw	ra,4(sp)
   825d4:	df000017 	ldw	fp,0(sp)
   825d8:	dec00204 	addi	sp,sp,8
   825dc:	f800283a 	ret

000825e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   825e0:	defffe04 	addi	sp,sp,-8
   825e4:	dfc00115 	stw	ra,4(sp)
   825e8:	df000015 	stw	fp,0(sp)
   825ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   825f0:	01440004 	movi	r5,4096
   825f4:	0009883a 	mov	r4,zero
   825f8:	008311c0 	call	8311c <alt_icache_flush>
#endif
}
   825fc:	0001883a 	nop
   82600:	e037883a 	mov	sp,fp
   82604:	dfc00117 	ldw	ra,4(sp)
   82608:	df000017 	ldw	fp,0(sp)
   8260c:	dec00204 	addi	sp,sp,8
   82610:	f800283a 	ret

00082614 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82614:	defff904 	addi	sp,sp,-28
   82618:	dfc00615 	stw	ra,24(sp)
   8261c:	df000515 	stw	fp,20(sp)
   82620:	df000504 	addi	fp,sp,20
   82624:	e13ffc15 	stw	r4,-16(fp)
   82628:	e17ffd15 	stw	r5,-12(fp)
   8262c:	e1bffe15 	stw	r6,-8(fp)
   82630:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   82634:	e0800217 	ldw	r2,8(fp)
   82638:	d8800015 	stw	r2,0(sp)
   8263c:	e1ffff17 	ldw	r7,-4(fp)
   82640:	e1bffe17 	ldw	r6,-8(fp)
   82644:	e17ffd17 	ldw	r5,-12(fp)
   82648:	e13ffc17 	ldw	r4,-16(fp)
   8264c:	00827f40 	call	827f4 <alt_iic_isr_register>
}  
   82650:	e037883a 	mov	sp,fp
   82654:	dfc00117 	ldw	ra,4(sp)
   82658:	df000017 	ldw	fp,0(sp)
   8265c:	dec00204 	addi	sp,sp,8
   82660:	f800283a 	ret

00082664 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   82664:	defff904 	addi	sp,sp,-28
   82668:	df000615 	stw	fp,24(sp)
   8266c:	df000604 	addi	fp,sp,24
   82670:	e13ffe15 	stw	r4,-8(fp)
   82674:	e17fff15 	stw	r5,-4(fp)
   82678:	e0bfff17 	ldw	r2,-4(fp)
   8267c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82680:	0005303a 	rdctl	r2,status
   82684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82688:	e0fffb17 	ldw	r3,-20(fp)
   8268c:	00bfff84 	movi	r2,-2
   82690:	1884703a 	and	r2,r3,r2
   82694:	1001703a 	wrctl	status,r2
  
  return context;
   82698:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8269c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   826a0:	00c00044 	movi	r3,1
   826a4:	e0bffa17 	ldw	r2,-24(fp)
   826a8:	1884983a 	sll	r2,r3,r2
   826ac:	1007883a 	mov	r3,r2
   826b0:	00800234 	movhi	r2,8
   826b4:	1097f504 	addi	r2,r2,24532
   826b8:	10800017 	ldw	r2,0(r2)
   826bc:	1886b03a 	or	r3,r3,r2
   826c0:	00800234 	movhi	r2,8
   826c4:	1097f504 	addi	r2,r2,24532
   826c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   826cc:	00800234 	movhi	r2,8
   826d0:	1097f504 	addi	r2,r2,24532
   826d4:	10800017 	ldw	r2,0(r2)
   826d8:	100170fa 	wrctl	ienable,r2
   826dc:	e0bffc17 	ldw	r2,-16(fp)
   826e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   826e4:	e0bffd17 	ldw	r2,-12(fp)
   826e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   826ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   826f0:	0001883a 	nop
}
   826f4:	e037883a 	mov	sp,fp
   826f8:	df000017 	ldw	fp,0(sp)
   826fc:	dec00104 	addi	sp,sp,4
   82700:	f800283a 	ret

00082704 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   82704:	defff904 	addi	sp,sp,-28
   82708:	df000615 	stw	fp,24(sp)
   8270c:	df000604 	addi	fp,sp,24
   82710:	e13ffe15 	stw	r4,-8(fp)
   82714:	e17fff15 	stw	r5,-4(fp)
   82718:	e0bfff17 	ldw	r2,-4(fp)
   8271c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82720:	0005303a 	rdctl	r2,status
   82724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82728:	e0fffb17 	ldw	r3,-20(fp)
   8272c:	00bfff84 	movi	r2,-2
   82730:	1884703a 	and	r2,r3,r2
   82734:	1001703a 	wrctl	status,r2
  
  return context;
   82738:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8273c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   82740:	00c00044 	movi	r3,1
   82744:	e0bffa17 	ldw	r2,-24(fp)
   82748:	1884983a 	sll	r2,r3,r2
   8274c:	0084303a 	nor	r2,zero,r2
   82750:	1007883a 	mov	r3,r2
   82754:	00800234 	movhi	r2,8
   82758:	1097f504 	addi	r2,r2,24532
   8275c:	10800017 	ldw	r2,0(r2)
   82760:	1886703a 	and	r3,r3,r2
   82764:	00800234 	movhi	r2,8
   82768:	1097f504 	addi	r2,r2,24532
   8276c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82770:	00800234 	movhi	r2,8
   82774:	1097f504 	addi	r2,r2,24532
   82778:	10800017 	ldw	r2,0(r2)
   8277c:	100170fa 	wrctl	ienable,r2
   82780:	e0bffc17 	ldw	r2,-16(fp)
   82784:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82788:	e0bffd17 	ldw	r2,-12(fp)
   8278c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82790:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   82794:	0001883a 	nop
}
   82798:	e037883a 	mov	sp,fp
   8279c:	df000017 	ldw	fp,0(sp)
   827a0:	dec00104 	addi	sp,sp,4
   827a4:	f800283a 	ret

000827a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   827a8:	defffc04 	addi	sp,sp,-16
   827ac:	df000315 	stw	fp,12(sp)
   827b0:	df000304 	addi	fp,sp,12
   827b4:	e13ffe15 	stw	r4,-8(fp)
   827b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   827bc:	000530fa 	rdctl	r2,ienable
   827c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   827c4:	00c00044 	movi	r3,1
   827c8:	e0bfff17 	ldw	r2,-4(fp)
   827cc:	1884983a 	sll	r2,r3,r2
   827d0:	1007883a 	mov	r3,r2
   827d4:	e0bffd17 	ldw	r2,-12(fp)
   827d8:	1884703a 	and	r2,r3,r2
   827dc:	1004c03a 	cmpne	r2,r2,zero
   827e0:	10803fcc 	andi	r2,r2,255
}
   827e4:	e037883a 	mov	sp,fp
   827e8:	df000017 	ldw	fp,0(sp)
   827ec:	dec00104 	addi	sp,sp,4
   827f0:	f800283a 	ret

000827f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   827f4:	defff504 	addi	sp,sp,-44
   827f8:	dfc00a15 	stw	ra,40(sp)
   827fc:	df000915 	stw	fp,36(sp)
   82800:	df000904 	addi	fp,sp,36
   82804:	e13ffc15 	stw	r4,-16(fp)
   82808:	e17ffd15 	stw	r5,-12(fp)
   8280c:	e1bffe15 	stw	r6,-8(fp)
   82810:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82814:	00bffa84 	movi	r2,-22
   82818:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8281c:	e0bffd17 	ldw	r2,-12(fp)
   82820:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82824:	e0bff817 	ldw	r2,-32(fp)
   82828:	10800808 	cmpgei	r2,r2,32
   8282c:	1000271e 	bne	r2,zero,828cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82830:	0005303a 	rdctl	r2,status
   82834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82838:	e0fffb17 	ldw	r3,-20(fp)
   8283c:	00bfff84 	movi	r2,-2
   82840:	1884703a 	and	r2,r3,r2
   82844:	1001703a 	wrctl	status,r2
  
  return context;
   82848:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8284c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   82850:	00800234 	movhi	r2,8
   82854:	1097fa04 	addi	r2,r2,24552
   82858:	e0fff817 	ldw	r3,-32(fp)
   8285c:	180690fa 	slli	r3,r3,3
   82860:	10c5883a 	add	r2,r2,r3
   82864:	e0fffe17 	ldw	r3,-8(fp)
   82868:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8286c:	00800234 	movhi	r2,8
   82870:	1097fa04 	addi	r2,r2,24552
   82874:	e0fff817 	ldw	r3,-32(fp)
   82878:	180690fa 	slli	r3,r3,3
   8287c:	10c5883a 	add	r2,r2,r3
   82880:	10800104 	addi	r2,r2,4
   82884:	e0ffff17 	ldw	r3,-4(fp)
   82888:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8288c:	e0bffe17 	ldw	r2,-8(fp)
   82890:	10000526 	beq	r2,zero,828a8 <alt_iic_isr_register+0xb4>
   82894:	e0bff817 	ldw	r2,-32(fp)
   82898:	100b883a 	mov	r5,r2
   8289c:	e13ffc17 	ldw	r4,-16(fp)
   828a0:	00826640 	call	82664 <alt_ic_irq_enable>
   828a4:	00000406 	br	828b8 <alt_iic_isr_register+0xc4>
   828a8:	e0bff817 	ldw	r2,-32(fp)
   828ac:	100b883a 	mov	r5,r2
   828b0:	e13ffc17 	ldw	r4,-16(fp)
   828b4:	00827040 	call	82704 <alt_ic_irq_disable>
   828b8:	e0bff715 	stw	r2,-36(fp)
   828bc:	e0bffa17 	ldw	r2,-24(fp)
   828c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   828c4:	e0bff917 	ldw	r2,-28(fp)
   828c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   828cc:	e0bff717 	ldw	r2,-36(fp)
}
   828d0:	e037883a 	mov	sp,fp
   828d4:	dfc00117 	ldw	ra,4(sp)
   828d8:	df000017 	ldw	fp,0(sp)
   828dc:	dec00204 	addi	sp,sp,8
   828e0:	f800283a 	ret

000828e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   828e4:	defff904 	addi	sp,sp,-28
   828e8:	dfc00615 	stw	ra,24(sp)
   828ec:	df000515 	stw	fp,20(sp)
   828f0:	df000504 	addi	fp,sp,20
   828f4:	e13ffc15 	stw	r4,-16(fp)
   828f8:	e17ffd15 	stw	r5,-12(fp)
   828fc:	e1bffe15 	stw	r6,-8(fp)
   82900:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82904:	e1bfff17 	ldw	r6,-4(fp)
   82908:	e17ffe17 	ldw	r5,-8(fp)
   8290c:	e13ffd17 	ldw	r4,-12(fp)
   82910:	0082b400 	call	82b40 <open>
   82914:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   82918:	e0bffb17 	ldw	r2,-20(fp)
   8291c:	10001c16 	blt	r2,zero,82990 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   82920:	00800234 	movhi	r2,8
   82924:	10928e04 	addi	r2,r2,19000
   82928:	e0fffb17 	ldw	r3,-20(fp)
   8292c:	18c00324 	muli	r3,r3,12
   82930:	10c5883a 	add	r2,r2,r3
   82934:	10c00017 	ldw	r3,0(r2)
   82938:	e0bffc17 	ldw	r2,-16(fp)
   8293c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82940:	00800234 	movhi	r2,8
   82944:	10928e04 	addi	r2,r2,19000
   82948:	e0fffb17 	ldw	r3,-20(fp)
   8294c:	18c00324 	muli	r3,r3,12
   82950:	10c5883a 	add	r2,r2,r3
   82954:	10800104 	addi	r2,r2,4
   82958:	10c00017 	ldw	r3,0(r2)
   8295c:	e0bffc17 	ldw	r2,-16(fp)
   82960:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82964:	00800234 	movhi	r2,8
   82968:	10928e04 	addi	r2,r2,19000
   8296c:	e0fffb17 	ldw	r3,-20(fp)
   82970:	18c00324 	muli	r3,r3,12
   82974:	10c5883a 	add	r2,r2,r3
   82978:	10800204 	addi	r2,r2,8
   8297c:	10c00017 	ldw	r3,0(r2)
   82980:	e0bffc17 	ldw	r2,-16(fp)
   82984:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82988:	e13ffb17 	ldw	r4,-20(fp)
   8298c:	0082c980 	call	82c98 <alt_release_fd>
  }
} 
   82990:	0001883a 	nop
   82994:	e037883a 	mov	sp,fp
   82998:	dfc00117 	ldw	ra,4(sp)
   8299c:	df000017 	ldw	fp,0(sp)
   829a0:	dec00204 	addi	sp,sp,8
   829a4:	f800283a 	ret

000829a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   829a8:	defffb04 	addi	sp,sp,-20
   829ac:	dfc00415 	stw	ra,16(sp)
   829b0:	df000315 	stw	fp,12(sp)
   829b4:	df000304 	addi	fp,sp,12
   829b8:	e13ffd15 	stw	r4,-12(fp)
   829bc:	e17ffe15 	stw	r5,-8(fp)
   829c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   829c4:	01c07fc4 	movi	r7,511
   829c8:	01800044 	movi	r6,1
   829cc:	e17ffd17 	ldw	r5,-12(fp)
   829d0:	01000234 	movhi	r4,8
   829d4:	21129104 	addi	r4,r4,19012
   829d8:	00828e40 	call	828e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   829dc:	01c07fc4 	movi	r7,511
   829e0:	000d883a 	mov	r6,zero
   829e4:	e17ffe17 	ldw	r5,-8(fp)
   829e8:	01000234 	movhi	r4,8
   829ec:	21128e04 	addi	r4,r4,19000
   829f0:	00828e40 	call	828e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   829f4:	01c07fc4 	movi	r7,511
   829f8:	01800044 	movi	r6,1
   829fc:	e17fff17 	ldw	r5,-4(fp)
   82a00:	01000234 	movhi	r4,8
   82a04:	21129404 	addi	r4,r4,19024
   82a08:	00828e40 	call	828e4 <alt_open_fd>
}  
   82a0c:	0001883a 	nop
   82a10:	e037883a 	mov	sp,fp
   82a14:	dfc00117 	ldw	ra,4(sp)
   82a18:	df000017 	ldw	fp,0(sp)
   82a1c:	dec00204 	addi	sp,sp,8
   82a20:	f800283a 	ret

00082a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82a24:	defffe04 	addi	sp,sp,-8
   82a28:	dfc00115 	stw	ra,4(sp)
   82a2c:	df000015 	stw	fp,0(sp)
   82a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82a34:	00800234 	movhi	r2,8
   82a38:	1092f504 	addi	r2,r2,19412
   82a3c:	10800017 	ldw	r2,0(r2)
   82a40:	10000526 	beq	r2,zero,82a58 <alt_get_errno+0x34>
   82a44:	00800234 	movhi	r2,8
   82a48:	1092f504 	addi	r2,r2,19412
   82a4c:	10800017 	ldw	r2,0(r2)
   82a50:	103ee83a 	callr	r2
   82a54:	00000206 	br	82a60 <alt_get_errno+0x3c>
   82a58:	00800234 	movhi	r2,8
   82a5c:	1097f904 	addi	r2,r2,24548
}
   82a60:	e037883a 	mov	sp,fp
   82a64:	dfc00117 	ldw	ra,4(sp)
   82a68:	df000017 	ldw	fp,0(sp)
   82a6c:	dec00204 	addi	sp,sp,8
   82a70:	f800283a 	ret

00082a74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82a74:	defffd04 	addi	sp,sp,-12
   82a78:	df000215 	stw	fp,8(sp)
   82a7c:	df000204 	addi	fp,sp,8
   82a80:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   82a84:	e0bfff17 	ldw	r2,-4(fp)
   82a88:	10800217 	ldw	r2,8(r2)
   82a8c:	10d00034 	orhi	r3,r2,16384
   82a90:	e0bfff17 	ldw	r2,-4(fp)
   82a94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82a98:	e03ffe15 	stw	zero,-8(fp)
   82a9c:	00001d06 	br	82b14 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82aa0:	00800234 	movhi	r2,8
   82aa4:	10928e04 	addi	r2,r2,19000
   82aa8:	e0fffe17 	ldw	r3,-8(fp)
   82aac:	18c00324 	muli	r3,r3,12
   82ab0:	10c5883a 	add	r2,r2,r3
   82ab4:	10c00017 	ldw	r3,0(r2)
   82ab8:	e0bfff17 	ldw	r2,-4(fp)
   82abc:	10800017 	ldw	r2,0(r2)
   82ac0:	1880111e 	bne	r3,r2,82b08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82ac4:	00800234 	movhi	r2,8
   82ac8:	10928e04 	addi	r2,r2,19000
   82acc:	e0fffe17 	ldw	r3,-8(fp)
   82ad0:	18c00324 	muli	r3,r3,12
   82ad4:	10c5883a 	add	r2,r2,r3
   82ad8:	10800204 	addi	r2,r2,8
   82adc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82ae0:	1000090e 	bge	r2,zero,82b08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82ae4:	e0bffe17 	ldw	r2,-8(fp)
   82ae8:	10c00324 	muli	r3,r2,12
   82aec:	00800234 	movhi	r2,8
   82af0:	10928e04 	addi	r2,r2,19000
   82af4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82af8:	e0bfff17 	ldw	r2,-4(fp)
   82afc:	18800226 	beq	r3,r2,82b08 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82b00:	00bffcc4 	movi	r2,-13
   82b04:	00000a06 	br	82b30 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82b08:	e0bffe17 	ldw	r2,-8(fp)
   82b0c:	10800044 	addi	r2,r2,1
   82b10:	e0bffe15 	stw	r2,-8(fp)
   82b14:	00800234 	movhi	r2,8
   82b18:	1092f404 	addi	r2,r2,19408
   82b1c:	10800017 	ldw	r2,0(r2)
   82b20:	1007883a 	mov	r3,r2
   82b24:	e0bffe17 	ldw	r2,-8(fp)
   82b28:	18bfdd2e 	bgeu	r3,r2,82aa0 <__alt_data_end+0xfffd1d60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82b2c:	0005883a 	mov	r2,zero
}
   82b30:	e037883a 	mov	sp,fp
   82b34:	df000017 	ldw	fp,0(sp)
   82b38:	dec00104 	addi	sp,sp,4
   82b3c:	f800283a 	ret

00082b40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82b40:	defff604 	addi	sp,sp,-40
   82b44:	dfc00915 	stw	ra,36(sp)
   82b48:	df000815 	stw	fp,32(sp)
   82b4c:	df000804 	addi	fp,sp,32
   82b50:	e13ffd15 	stw	r4,-12(fp)
   82b54:	e17ffe15 	stw	r5,-8(fp)
   82b58:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82b5c:	00bfffc4 	movi	r2,-1
   82b60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   82b64:	00bffb44 	movi	r2,-19
   82b68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   82b6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82b70:	01400234 	movhi	r5,8
   82b74:	2952f204 	addi	r5,r5,19400
   82b78:	e13ffd17 	ldw	r4,-12(fp)
   82b7c:	0082ec40 	call	82ec4 <alt_find_dev>
   82b80:	e0bff815 	stw	r2,-32(fp)
   82b84:	e0bff817 	ldw	r2,-32(fp)
   82b88:	1000051e 	bne	r2,zero,82ba0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82b8c:	e13ffd17 	ldw	r4,-12(fp)
   82b90:	0082f540 	call	82f54 <alt_find_file>
   82b94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   82b98:	00800044 	movi	r2,1
   82b9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82ba0:	e0bff817 	ldw	r2,-32(fp)
   82ba4:	10002926 	beq	r2,zero,82c4c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82ba8:	e13ff817 	ldw	r4,-32(fp)
   82bac:	00830680 	call	83068 <alt_get_fd>
   82bb0:	e0bff915 	stw	r2,-28(fp)
   82bb4:	e0bff917 	ldw	r2,-28(fp)
   82bb8:	1000030e 	bge	r2,zero,82bc8 <open+0x88>
    {
      status = index;
   82bbc:	e0bff917 	ldw	r2,-28(fp)
   82bc0:	e0bffa15 	stw	r2,-24(fp)
   82bc4:	00002306 	br	82c54 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   82bc8:	e0bff917 	ldw	r2,-28(fp)
   82bcc:	10c00324 	muli	r3,r2,12
   82bd0:	00800234 	movhi	r2,8
   82bd4:	10928e04 	addi	r2,r2,19000
   82bd8:	1885883a 	add	r2,r3,r2
   82bdc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82be0:	e0fffe17 	ldw	r3,-8(fp)
   82be4:	00900034 	movhi	r2,16384
   82be8:	10bfffc4 	addi	r2,r2,-1
   82bec:	1886703a 	and	r3,r3,r2
   82bf0:	e0bffc17 	ldw	r2,-16(fp)
   82bf4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82bf8:	e0bffb17 	ldw	r2,-20(fp)
   82bfc:	1000051e 	bne	r2,zero,82c14 <open+0xd4>
   82c00:	e13ffc17 	ldw	r4,-16(fp)
   82c04:	0082a740 	call	82a74 <alt_file_locked>
   82c08:	e0bffa15 	stw	r2,-24(fp)
   82c0c:	e0bffa17 	ldw	r2,-24(fp)
   82c10:	10001016 	blt	r2,zero,82c54 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82c14:	e0bff817 	ldw	r2,-32(fp)
   82c18:	10800317 	ldw	r2,12(r2)
   82c1c:	10000826 	beq	r2,zero,82c40 <open+0x100>
   82c20:	e0bff817 	ldw	r2,-32(fp)
   82c24:	10800317 	ldw	r2,12(r2)
   82c28:	e1ffff17 	ldw	r7,-4(fp)
   82c2c:	e1bffe17 	ldw	r6,-8(fp)
   82c30:	e17ffd17 	ldw	r5,-12(fp)
   82c34:	e13ffc17 	ldw	r4,-16(fp)
   82c38:	103ee83a 	callr	r2
   82c3c:	00000106 	br	82c44 <open+0x104>
   82c40:	0005883a 	mov	r2,zero
   82c44:	e0bffa15 	stw	r2,-24(fp)
   82c48:	00000206 	br	82c54 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82c4c:	00bffb44 	movi	r2,-19
   82c50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82c54:	e0bffa17 	ldw	r2,-24(fp)
   82c58:	1000090e 	bge	r2,zero,82c80 <open+0x140>
  {
    alt_release_fd (index);  
   82c5c:	e13ff917 	ldw	r4,-28(fp)
   82c60:	0082c980 	call	82c98 <alt_release_fd>
    ALT_ERRNO = -status;
   82c64:	0082a240 	call	82a24 <alt_get_errno>
   82c68:	1007883a 	mov	r3,r2
   82c6c:	e0bffa17 	ldw	r2,-24(fp)
   82c70:	0085c83a 	sub	r2,zero,r2
   82c74:	18800015 	stw	r2,0(r3)
    return -1;
   82c78:	00bfffc4 	movi	r2,-1
   82c7c:	00000106 	br	82c84 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   82c80:	e0bff917 	ldw	r2,-28(fp)
}
   82c84:	e037883a 	mov	sp,fp
   82c88:	dfc00117 	ldw	ra,4(sp)
   82c8c:	df000017 	ldw	fp,0(sp)
   82c90:	dec00204 	addi	sp,sp,8
   82c94:	f800283a 	ret

00082c98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82c98:	defffe04 	addi	sp,sp,-8
   82c9c:	df000115 	stw	fp,4(sp)
   82ca0:	df000104 	addi	fp,sp,4
   82ca4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82ca8:	e0bfff17 	ldw	r2,-4(fp)
   82cac:	108000d0 	cmplti	r2,r2,3
   82cb0:	10000d1e 	bne	r2,zero,82ce8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82cb4:	00800234 	movhi	r2,8
   82cb8:	10928e04 	addi	r2,r2,19000
   82cbc:	e0ffff17 	ldw	r3,-4(fp)
   82cc0:	18c00324 	muli	r3,r3,12
   82cc4:	10c5883a 	add	r2,r2,r3
   82cc8:	10800204 	addi	r2,r2,8
   82ccc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82cd0:	00800234 	movhi	r2,8
   82cd4:	10928e04 	addi	r2,r2,19000
   82cd8:	e0ffff17 	ldw	r3,-4(fp)
   82cdc:	18c00324 	muli	r3,r3,12
   82ce0:	10c5883a 	add	r2,r2,r3
   82ce4:	10000015 	stw	zero,0(r2)
  }
}
   82ce8:	0001883a 	nop
   82cec:	e037883a 	mov	sp,fp
   82cf0:	df000017 	ldw	fp,0(sp)
   82cf4:	dec00104 	addi	sp,sp,4
   82cf8:	f800283a 	ret

00082cfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82cfc:	defffa04 	addi	sp,sp,-24
   82d00:	df000515 	stw	fp,20(sp)
   82d04:	df000504 	addi	fp,sp,20
   82d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82d0c:	0005303a 	rdctl	r2,status
   82d10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82d14:	e0fffc17 	ldw	r3,-16(fp)
   82d18:	00bfff84 	movi	r2,-2
   82d1c:	1884703a 	and	r2,r3,r2
   82d20:	1001703a 	wrctl	status,r2
  
  return context;
   82d24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82d28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82d2c:	e0bfff17 	ldw	r2,-4(fp)
   82d30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   82d34:	e0bffd17 	ldw	r2,-12(fp)
   82d38:	10800017 	ldw	r2,0(r2)
   82d3c:	e0fffd17 	ldw	r3,-12(fp)
   82d40:	18c00117 	ldw	r3,4(r3)
   82d44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   82d48:	e0bffd17 	ldw	r2,-12(fp)
   82d4c:	10800117 	ldw	r2,4(r2)
   82d50:	e0fffd17 	ldw	r3,-12(fp)
   82d54:	18c00017 	ldw	r3,0(r3)
   82d58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82d5c:	e0bffd17 	ldw	r2,-12(fp)
   82d60:	e0fffd17 	ldw	r3,-12(fp)
   82d64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   82d68:	e0bffd17 	ldw	r2,-12(fp)
   82d6c:	e0fffd17 	ldw	r3,-12(fp)
   82d70:	10c00015 	stw	r3,0(r2)
   82d74:	e0bffb17 	ldw	r2,-20(fp)
   82d78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82d7c:	e0bffe17 	ldw	r2,-8(fp)
   82d80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   82d84:	0001883a 	nop
   82d88:	e037883a 	mov	sp,fp
   82d8c:	df000017 	ldw	fp,0(sp)
   82d90:	dec00104 	addi	sp,sp,4
   82d94:	f800283a 	ret

00082d98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   82d98:	defffb04 	addi	sp,sp,-20
   82d9c:	dfc00415 	stw	ra,16(sp)
   82da0:	df000315 	stw	fp,12(sp)
   82da4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   82da8:	d0a00917 	ldw	r2,-32732(gp)
   82dac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82db0:	d0a50917 	ldw	r2,-27612(gp)
   82db4:	10800044 	addi	r2,r2,1
   82db8:	d0a50915 	stw	r2,-27612(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82dbc:	00002e06 	br	82e78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   82dc0:	e0bffd17 	ldw	r2,-12(fp)
   82dc4:	10800017 	ldw	r2,0(r2)
   82dc8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   82dcc:	e0bffd17 	ldw	r2,-12(fp)
   82dd0:	10800403 	ldbu	r2,16(r2)
   82dd4:	10803fcc 	andi	r2,r2,255
   82dd8:	10000426 	beq	r2,zero,82dec <alt_tick+0x54>
   82ddc:	d0a50917 	ldw	r2,-27612(gp)
   82de0:	1000021e 	bne	r2,zero,82dec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   82de4:	e0bffd17 	ldw	r2,-12(fp)
   82de8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   82dec:	e0bffd17 	ldw	r2,-12(fp)
   82df0:	10800217 	ldw	r2,8(r2)
   82df4:	d0e50917 	ldw	r3,-27612(gp)
   82df8:	18801d36 	bltu	r3,r2,82e70 <alt_tick+0xd8>
   82dfc:	e0bffd17 	ldw	r2,-12(fp)
   82e00:	10800403 	ldbu	r2,16(r2)
   82e04:	10803fcc 	andi	r2,r2,255
   82e08:	1000191e 	bne	r2,zero,82e70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   82e0c:	e0bffd17 	ldw	r2,-12(fp)
   82e10:	10800317 	ldw	r2,12(r2)
   82e14:	e0fffd17 	ldw	r3,-12(fp)
   82e18:	18c00517 	ldw	r3,20(r3)
   82e1c:	1809883a 	mov	r4,r3
   82e20:	103ee83a 	callr	r2
   82e24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   82e28:	e0bfff17 	ldw	r2,-4(fp)
   82e2c:	1000031e 	bne	r2,zero,82e3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   82e30:	e13ffd17 	ldw	r4,-12(fp)
   82e34:	0082cfc0 	call	82cfc <alt_alarm_stop>
   82e38:	00000d06 	br	82e70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   82e3c:	e0bffd17 	ldw	r2,-12(fp)
   82e40:	10c00217 	ldw	r3,8(r2)
   82e44:	e0bfff17 	ldw	r2,-4(fp)
   82e48:	1887883a 	add	r3,r3,r2
   82e4c:	e0bffd17 	ldw	r2,-12(fp)
   82e50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   82e54:	e0bffd17 	ldw	r2,-12(fp)
   82e58:	10c00217 	ldw	r3,8(r2)
   82e5c:	d0a50917 	ldw	r2,-27612(gp)
   82e60:	1880032e 	bgeu	r3,r2,82e70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   82e64:	e0bffd17 	ldw	r2,-12(fp)
   82e68:	00c00044 	movi	r3,1
   82e6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   82e70:	e0bffe17 	ldw	r2,-8(fp)
   82e74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82e78:	e0fffd17 	ldw	r3,-12(fp)
   82e7c:	d0a00904 	addi	r2,gp,-32732
   82e80:	18bfcf1e 	bne	r3,r2,82dc0 <__alt_data_end+0xfffd2080>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   82e84:	0001883a 	nop
}
   82e88:	0001883a 	nop
   82e8c:	e037883a 	mov	sp,fp
   82e90:	dfc00117 	ldw	ra,4(sp)
   82e94:	df000017 	ldw	fp,0(sp)
   82e98:	dec00204 	addi	sp,sp,8
   82e9c:	f800283a 	ret

00082ea0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   82ea0:	deffff04 	addi	sp,sp,-4
   82ea4:	df000015 	stw	fp,0(sp)
   82ea8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   82eac:	000170fa 	wrctl	ienable,zero
}
   82eb0:	0001883a 	nop
   82eb4:	e037883a 	mov	sp,fp
   82eb8:	df000017 	ldw	fp,0(sp)
   82ebc:	dec00104 	addi	sp,sp,4
   82ec0:	f800283a 	ret

00082ec4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82ec4:	defffa04 	addi	sp,sp,-24
   82ec8:	dfc00515 	stw	ra,20(sp)
   82ecc:	df000415 	stw	fp,16(sp)
   82ed0:	df000404 	addi	fp,sp,16
   82ed4:	e13ffe15 	stw	r4,-8(fp)
   82ed8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82edc:	e0bfff17 	ldw	r2,-4(fp)
   82ee0:	10800017 	ldw	r2,0(r2)
   82ee4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82ee8:	e13ffe17 	ldw	r4,-8(fp)
   82eec:	0080b240 	call	80b24 <strlen>
   82ef0:	10800044 	addi	r2,r2,1
   82ef4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82ef8:	00000d06 	br	82f30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82efc:	e0bffc17 	ldw	r2,-16(fp)
   82f00:	10800217 	ldw	r2,8(r2)
   82f04:	e0fffd17 	ldw	r3,-12(fp)
   82f08:	180d883a 	mov	r6,r3
   82f0c:	e17ffe17 	ldw	r5,-8(fp)
   82f10:	1009883a 	mov	r4,r2
   82f14:	00833780 	call	83378 <memcmp>
   82f18:	1000021e 	bne	r2,zero,82f24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   82f1c:	e0bffc17 	ldw	r2,-16(fp)
   82f20:	00000706 	br	82f40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   82f24:	e0bffc17 	ldw	r2,-16(fp)
   82f28:	10800017 	ldw	r2,0(r2)
   82f2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82f30:	e0fffc17 	ldw	r3,-16(fp)
   82f34:	e0bfff17 	ldw	r2,-4(fp)
   82f38:	18bff01e 	bne	r3,r2,82efc <__alt_data_end+0xfffd21bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   82f3c:	0005883a 	mov	r2,zero
}
   82f40:	e037883a 	mov	sp,fp
   82f44:	dfc00117 	ldw	ra,4(sp)
   82f48:	df000017 	ldw	fp,0(sp)
   82f4c:	dec00204 	addi	sp,sp,8
   82f50:	f800283a 	ret

00082f54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   82f54:	defffb04 	addi	sp,sp,-20
   82f58:	dfc00415 	stw	ra,16(sp)
   82f5c:	df000315 	stw	fp,12(sp)
   82f60:	df000304 	addi	fp,sp,12
   82f64:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   82f68:	00800234 	movhi	r2,8
   82f6c:	1092f004 	addi	r2,r2,19392
   82f70:	10800017 	ldw	r2,0(r2)
   82f74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   82f78:	00003106 	br	83040 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   82f7c:	e0bffd17 	ldw	r2,-12(fp)
   82f80:	10800217 	ldw	r2,8(r2)
   82f84:	1009883a 	mov	r4,r2
   82f88:	0080b240 	call	80b24 <strlen>
   82f8c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   82f90:	e0bffd17 	ldw	r2,-12(fp)
   82f94:	10c00217 	ldw	r3,8(r2)
   82f98:	e0bffe17 	ldw	r2,-8(fp)
   82f9c:	10bfffc4 	addi	r2,r2,-1
   82fa0:	1885883a 	add	r2,r3,r2
   82fa4:	10800003 	ldbu	r2,0(r2)
   82fa8:	10803fcc 	andi	r2,r2,255
   82fac:	1080201c 	xori	r2,r2,128
   82fb0:	10bfe004 	addi	r2,r2,-128
   82fb4:	10800bd8 	cmpnei	r2,r2,47
   82fb8:	1000031e 	bne	r2,zero,82fc8 <alt_find_file+0x74>
    {
      len -= 1;
   82fbc:	e0bffe17 	ldw	r2,-8(fp)
   82fc0:	10bfffc4 	addi	r2,r2,-1
   82fc4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82fc8:	e0bffe17 	ldw	r2,-8(fp)
   82fcc:	e0ffff17 	ldw	r3,-4(fp)
   82fd0:	1885883a 	add	r2,r3,r2
   82fd4:	10800003 	ldbu	r2,0(r2)
   82fd8:	10803fcc 	andi	r2,r2,255
   82fdc:	1080201c 	xori	r2,r2,128
   82fe0:	10bfe004 	addi	r2,r2,-128
   82fe4:	10800be0 	cmpeqi	r2,r2,47
   82fe8:	1000081e 	bne	r2,zero,8300c <alt_find_file+0xb8>
   82fec:	e0bffe17 	ldw	r2,-8(fp)
   82ff0:	e0ffff17 	ldw	r3,-4(fp)
   82ff4:	1885883a 	add	r2,r3,r2
   82ff8:	10800003 	ldbu	r2,0(r2)
   82ffc:	10803fcc 	andi	r2,r2,255
   83000:	1080201c 	xori	r2,r2,128
   83004:	10bfe004 	addi	r2,r2,-128
   83008:	10000a1e 	bne	r2,zero,83034 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8300c:	e0bffd17 	ldw	r2,-12(fp)
   83010:	10800217 	ldw	r2,8(r2)
   83014:	e0fffe17 	ldw	r3,-8(fp)
   83018:	180d883a 	mov	r6,r3
   8301c:	e17fff17 	ldw	r5,-4(fp)
   83020:	1009883a 	mov	r4,r2
   83024:	00833780 	call	83378 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   83028:	1000021e 	bne	r2,zero,83034 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8302c:	e0bffd17 	ldw	r2,-12(fp)
   83030:	00000806 	br	83054 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   83034:	e0bffd17 	ldw	r2,-12(fp)
   83038:	10800017 	ldw	r2,0(r2)
   8303c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83040:	e0fffd17 	ldw	r3,-12(fp)
   83044:	00800234 	movhi	r2,8
   83048:	1092f004 	addi	r2,r2,19392
   8304c:	18bfcb1e 	bne	r3,r2,82f7c <__alt_data_end+0xfffd223c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   83050:	0005883a 	mov	r2,zero
}
   83054:	e037883a 	mov	sp,fp
   83058:	dfc00117 	ldw	ra,4(sp)
   8305c:	df000017 	ldw	fp,0(sp)
   83060:	dec00204 	addi	sp,sp,8
   83064:	f800283a 	ret

00083068 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   83068:	defffc04 	addi	sp,sp,-16
   8306c:	df000315 	stw	fp,12(sp)
   83070:	df000304 	addi	fp,sp,12
   83074:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   83078:	00bffa04 	movi	r2,-24
   8307c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83080:	e03ffd15 	stw	zero,-12(fp)
   83084:	00001d06 	br	830fc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   83088:	00800234 	movhi	r2,8
   8308c:	10928e04 	addi	r2,r2,19000
   83090:	e0fffd17 	ldw	r3,-12(fp)
   83094:	18c00324 	muli	r3,r3,12
   83098:	10c5883a 	add	r2,r2,r3
   8309c:	10800017 	ldw	r2,0(r2)
   830a0:	1000131e 	bne	r2,zero,830f0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   830a4:	00800234 	movhi	r2,8
   830a8:	10928e04 	addi	r2,r2,19000
   830ac:	e0fffd17 	ldw	r3,-12(fp)
   830b0:	18c00324 	muli	r3,r3,12
   830b4:	10c5883a 	add	r2,r2,r3
   830b8:	e0ffff17 	ldw	r3,-4(fp)
   830bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   830c0:	00800234 	movhi	r2,8
   830c4:	1092f404 	addi	r2,r2,19408
   830c8:	10c00017 	ldw	r3,0(r2)
   830cc:	e0bffd17 	ldw	r2,-12(fp)
   830d0:	1880040e 	bge	r3,r2,830e4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   830d4:	00800234 	movhi	r2,8
   830d8:	1092f404 	addi	r2,r2,19408
   830dc:	e0fffd17 	ldw	r3,-12(fp)
   830e0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   830e4:	e0bffd17 	ldw	r2,-12(fp)
   830e8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   830ec:	00000606 	br	83108 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   830f0:	e0bffd17 	ldw	r2,-12(fp)
   830f4:	10800044 	addi	r2,r2,1
   830f8:	e0bffd15 	stw	r2,-12(fp)
   830fc:	e0bffd17 	ldw	r2,-12(fp)
   83100:	10800810 	cmplti	r2,r2,32
   83104:	103fe01e 	bne	r2,zero,83088 <__alt_data_end+0xfffd2348>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   83108:	e0bffe17 	ldw	r2,-8(fp)
}
   8310c:	e037883a 	mov	sp,fp
   83110:	df000017 	ldw	fp,0(sp)
   83114:	dec00104 	addi	sp,sp,4
   83118:	f800283a 	ret

0008311c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8311c:	defffb04 	addi	sp,sp,-20
   83120:	df000415 	stw	fp,16(sp)
   83124:	df000404 	addi	fp,sp,16
   83128:	e13ffe15 	stw	r4,-8(fp)
   8312c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   83130:	e0bfff17 	ldw	r2,-4(fp)
   83134:	10840070 	cmpltui	r2,r2,4097
   83138:	1000021e 	bne	r2,zero,83144 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8313c:	00840004 	movi	r2,4096
   83140:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   83144:	e0fffe17 	ldw	r3,-8(fp)
   83148:	e0bfff17 	ldw	r2,-4(fp)
   8314c:	1885883a 	add	r2,r3,r2
   83150:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83154:	e0bffe17 	ldw	r2,-8(fp)
   83158:	e0bffc15 	stw	r2,-16(fp)
   8315c:	00000506 	br	83174 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   83160:	e0bffc17 	ldw	r2,-16(fp)
   83164:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83168:	e0bffc17 	ldw	r2,-16(fp)
   8316c:	10800804 	addi	r2,r2,32
   83170:	e0bffc15 	stw	r2,-16(fp)
   83174:	e0fffc17 	ldw	r3,-16(fp)
   83178:	e0bffd17 	ldw	r2,-12(fp)
   8317c:	18bff836 	bltu	r3,r2,83160 <__alt_data_end+0xfffd2420>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   83180:	e0bffe17 	ldw	r2,-8(fp)
   83184:	108007cc 	andi	r2,r2,31
   83188:	10000226 	beq	r2,zero,83194 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8318c:	e0bffc17 	ldw	r2,-16(fp)
   83190:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   83194:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   83198:	0001883a 	nop
   8319c:	e037883a 	mov	sp,fp
   831a0:	df000017 	ldw	fp,0(sp)
   831a4:	dec00104 	addi	sp,sp,4
   831a8:	f800283a 	ret

000831ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   831ac:	defffe04 	addi	sp,sp,-8
   831b0:	df000115 	stw	fp,4(sp)
   831b4:	df000104 	addi	fp,sp,4
   831b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   831bc:	e0bfff17 	ldw	r2,-4(fp)
   831c0:	10bffe84 	addi	r2,r2,-6
   831c4:	10c00428 	cmpgeui	r3,r2,16
   831c8:	18001a1e 	bne	r3,zero,83234 <alt_exception_cause_generated_bad_addr+0x88>
   831cc:	100690ba 	slli	r3,r2,2
   831d0:	00800234 	movhi	r2,8
   831d4:	108c7904 	addi	r2,r2,12772
   831d8:	1885883a 	add	r2,r3,r2
   831dc:	10800017 	ldw	r2,0(r2)
   831e0:	1000683a 	jmp	r2
   831e4:	00083224 	muli	zero,zero,8392
   831e8:	00083224 	muli	zero,zero,8392
   831ec:	00083234 	movhi	zero,8392
   831f0:	00083234 	movhi	zero,8392
   831f4:	00083234 	movhi	zero,8392
   831f8:	00083224 	muli	zero,zero,8392
   831fc:	0008322c 	andhi	zero,zero,8392
   83200:	00083234 	movhi	zero,8392
   83204:	00083224 	muli	zero,zero,8392
   83208:	00083224 	muli	zero,zero,8392
   8320c:	00083234 	movhi	zero,8392
   83210:	00083224 	muli	zero,zero,8392
   83214:	0008322c 	andhi	zero,zero,8392
   83218:	00083234 	movhi	zero,8392
   8321c:	00083234 	movhi	zero,8392
   83220:	00083224 	muli	zero,zero,8392
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   83224:	00800044 	movi	r2,1
   83228:	00000306 	br	83238 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8322c:	0005883a 	mov	r2,zero
   83230:	00000106 	br	83238 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   83234:	0005883a 	mov	r2,zero
  }
}
   83238:	e037883a 	mov	sp,fp
   8323c:	df000017 	ldw	fp,0(sp)
   83240:	dec00104 	addi	sp,sp,4
   83244:	f800283a 	ret

00083248 <exit>:
   83248:	defffe04 	addi	sp,sp,-8
   8324c:	000b883a 	mov	r5,zero
   83250:	dc000015 	stw	r16,0(sp)
   83254:	dfc00115 	stw	ra,4(sp)
   83258:	2021883a 	mov	r16,r4
   8325c:	00834000 	call	83400 <__call_exitprocs>
   83260:	8009883a 	mov	r4,r16
   83264:	00835900 	call	83590 <_exit>

00083268 <fputs>:
   83268:	defffd04 	addi	sp,sp,-12
   8326c:	dfc00215 	stw	ra,8(sp)
   83270:	dc000115 	stw	r16,4(sp)
   83274:	d9400015 	stw	r5,0(sp)
   83278:	2021883a 	mov	r16,r4
   8327c:	0080b240 	call	80b24 <strlen>
   83280:	100f883a 	mov	r7,r2
   83284:	00800234 	movhi	r2,8
   83288:	d9400017 	ldw	r5,0(sp)
   8328c:	1092ef04 	addi	r2,r2,19388
   83290:	11000017 	ldw	r4,0(r2)
   83294:	00c00234 	movhi	r3,8
   83298:	18ccb004 	addi	r3,r3,12992
   8329c:	28c00115 	stw	r3,4(r5)
   832a0:	800d883a 	mov	r6,r16
   832a4:	00832c00 	call	832c0 <__sfvwrite_small_dev>
   832a8:	10bfffe0 	cmpeqi	r2,r2,-1
   832ac:	0085c83a 	sub	r2,zero,r2
   832b0:	dfc00217 	ldw	ra,8(sp)
   832b4:	dc000117 	ldw	r16,4(sp)
   832b8:	dec00304 	addi	sp,sp,12
   832bc:	f800283a 	ret

000832c0 <__sfvwrite_small_dev>:
   832c0:	2880000b 	ldhu	r2,0(r5)
   832c4:	1080020c 	andi	r2,r2,8
   832c8:	10002126 	beq	r2,zero,83350 <__sfvwrite_small_dev+0x90>
   832cc:	2880008f 	ldh	r2,2(r5)
   832d0:	defffa04 	addi	sp,sp,-24
   832d4:	dc000015 	stw	r16,0(sp)
   832d8:	dfc00515 	stw	ra,20(sp)
   832dc:	dd000415 	stw	r20,16(sp)
   832e0:	dcc00315 	stw	r19,12(sp)
   832e4:	dc800215 	stw	r18,8(sp)
   832e8:	dc400115 	stw	r17,4(sp)
   832ec:	2821883a 	mov	r16,r5
   832f0:	10001216 	blt	r2,zero,8333c <__sfvwrite_small_dev+0x7c>
   832f4:	2027883a 	mov	r19,r4
   832f8:	3025883a 	mov	r18,r6
   832fc:	3823883a 	mov	r17,r7
   83300:	05010004 	movi	r20,1024
   83304:	04400b0e 	bge	zero,r17,83334 <__sfvwrite_small_dev+0x74>
   83308:	880f883a 	mov	r7,r17
   8330c:	a440010e 	bge	r20,r17,83314 <__sfvwrite_small_dev+0x54>
   83310:	01c10004 	movi	r7,1024
   83314:	8140008f 	ldh	r5,2(r16)
   83318:	900d883a 	mov	r6,r18
   8331c:	9809883a 	mov	r4,r19
   83320:	00833a80 	call	833a8 <_write_r>
   83324:	0080050e 	bge	zero,r2,8333c <__sfvwrite_small_dev+0x7c>
   83328:	88a3c83a 	sub	r17,r17,r2
   8332c:	90a5883a 	add	r18,r18,r2
   83330:	003ff406 	br	83304 <__alt_data_end+0xfffd25c4>
   83334:	0005883a 	mov	r2,zero
   83338:	00000706 	br	83358 <__sfvwrite_small_dev+0x98>
   8333c:	8080000b 	ldhu	r2,0(r16)
   83340:	10801014 	ori	r2,r2,64
   83344:	8080000d 	sth	r2,0(r16)
   83348:	00bfffc4 	movi	r2,-1
   8334c:	00000206 	br	83358 <__sfvwrite_small_dev+0x98>
   83350:	00bfffc4 	movi	r2,-1
   83354:	f800283a 	ret
   83358:	dfc00517 	ldw	ra,20(sp)
   8335c:	dd000417 	ldw	r20,16(sp)
   83360:	dcc00317 	ldw	r19,12(sp)
   83364:	dc800217 	ldw	r18,8(sp)
   83368:	dc400117 	ldw	r17,4(sp)
   8336c:	dc000017 	ldw	r16,0(sp)
   83370:	dec00604 	addi	sp,sp,24
   83374:	f800283a 	ret

00083378 <memcmp>:
   83378:	218d883a 	add	r6,r4,r6
   8337c:	21800826 	beq	r4,r6,833a0 <memcmp+0x28>
   83380:	20800003 	ldbu	r2,0(r4)
   83384:	28c00003 	ldbu	r3,0(r5)
   83388:	10c00226 	beq	r2,r3,83394 <memcmp+0x1c>
   8338c:	10c5c83a 	sub	r2,r2,r3
   83390:	f800283a 	ret
   83394:	21000044 	addi	r4,r4,1
   83398:	29400044 	addi	r5,r5,1
   8339c:	003ff706 	br	8337c <__alt_data_end+0xfffd263c>
   833a0:	0005883a 	mov	r2,zero
   833a4:	f800283a 	ret

000833a8 <_write_r>:
   833a8:	defffd04 	addi	sp,sp,-12
   833ac:	dc000015 	stw	r16,0(sp)
   833b0:	04000234 	movhi	r16,8
   833b4:	dc400115 	stw	r17,4(sp)
   833b8:	8417f904 	addi	r16,r16,24548
   833bc:	2023883a 	mov	r17,r4
   833c0:	2809883a 	mov	r4,r5
   833c4:	300b883a 	mov	r5,r6
   833c8:	380d883a 	mov	r6,r7
   833cc:	dfc00215 	stw	ra,8(sp)
   833d0:	80000015 	stw	zero,0(r16)
   833d4:	00836140 	call	83614 <write>
   833d8:	00ffffc4 	movi	r3,-1
   833dc:	10c0031e 	bne	r2,r3,833ec <_write_r+0x44>
   833e0:	80c00017 	ldw	r3,0(r16)
   833e4:	18000126 	beq	r3,zero,833ec <_write_r+0x44>
   833e8:	88c00015 	stw	r3,0(r17)
   833ec:	dfc00217 	ldw	ra,8(sp)
   833f0:	dc400117 	ldw	r17,4(sp)
   833f4:	dc000017 	ldw	r16,0(sp)
   833f8:	dec00304 	addi	sp,sp,12
   833fc:	f800283a 	ret

00083400 <__call_exitprocs>:
   83400:	defff504 	addi	sp,sp,-44
   83404:	dd000515 	stw	r20,20(sp)
   83408:	05000234 	movhi	r20,8
   8340c:	dc800315 	stw	r18,12(sp)
   83410:	dfc00a15 	stw	ra,40(sp)
   83414:	df000915 	stw	fp,36(sp)
   83418:	ddc00815 	stw	r23,32(sp)
   8341c:	dd800715 	stw	r22,28(sp)
   83420:	dd400615 	stw	r21,24(sp)
   83424:	dcc00415 	stw	r19,16(sp)
   83428:	dc400215 	stw	r17,8(sp)
   8342c:	dc000115 	stw	r16,4(sp)
   83430:	d9000015 	stw	r4,0(sp)
   83434:	2825883a 	mov	r18,r5
   83438:	a512ee04 	addi	r20,r20,19384
   8343c:	a4400017 	ldw	r17,0(r20)
   83440:	8cc00c17 	ldw	r19,48(r17)
   83444:	8c400c04 	addi	r17,r17,48
   83448:	98004526 	beq	r19,zero,83560 <__call_exitprocs+0x160>
   8344c:	9c000117 	ldw	r16,4(r19)
   83450:	00900034 	movhi	r2,16384
   83454:	10bfffc4 	addi	r2,r2,-1
   83458:	9d402217 	ldw	r21,136(r19)
   8345c:	85bfffc4 	addi	r22,r16,-1
   83460:	80a1883a 	add	r16,r16,r2
   83464:	8421883a 	add	r16,r16,r16
   83468:	8421883a 	add	r16,r16,r16
   8346c:	ac2f883a 	add	r23,r21,r16
   83470:	84000204 	addi	r16,r16,8
   83474:	9c21883a 	add	r16,r19,r16
   83478:	b0002716 	blt	r22,zero,83518 <__call_exitprocs+0x118>
   8347c:	90000726 	beq	r18,zero,8349c <__call_exitprocs+0x9c>
   83480:	a800041e 	bne	r21,zero,83494 <__call_exitprocs+0x94>
   83484:	b5bfffc4 	addi	r22,r22,-1
   83488:	bdffff04 	addi	r23,r23,-4
   8348c:	843fff04 	addi	r16,r16,-4
   83490:	003ff906 	br	83478 <__alt_data_end+0xfffd2738>
   83494:	b9002017 	ldw	r4,128(r23)
   83498:	913ffa1e 	bne	r18,r4,83484 <__alt_data_end+0xfffd2744>
   8349c:	99000117 	ldw	r4,4(r19)
   834a0:	82000017 	ldw	r8,0(r16)
   834a4:	213fffc4 	addi	r4,r4,-1
   834a8:	b100021e 	bne	r22,r4,834b4 <__call_exitprocs+0xb4>
   834ac:	9d800115 	stw	r22,4(r19)
   834b0:	00000106 	br	834b8 <__call_exitprocs+0xb8>
   834b4:	80000015 	stw	zero,0(r16)
   834b8:	403ff226 	beq	r8,zero,83484 <__alt_data_end+0xfffd2744>
   834bc:	9f000117 	ldw	fp,4(r19)
   834c0:	a8000526 	beq	r21,zero,834d8 <__call_exitprocs+0xd8>
   834c4:	00800044 	movi	r2,1
   834c8:	1592983a 	sll	r9,r2,r22
   834cc:	a9404017 	ldw	r5,256(r21)
   834d0:	494a703a 	and	r5,r9,r5
   834d4:	2800021e 	bne	r5,zero,834e0 <__call_exitprocs+0xe0>
   834d8:	403ee83a 	callr	r8
   834dc:	00000906 	br	83504 <__call_exitprocs+0x104>
   834e0:	a9004117 	ldw	r4,260(r21)
   834e4:	4908703a 	and	r4,r9,r4
   834e8:	2000041e 	bne	r4,zero,834fc <__call_exitprocs+0xfc>
   834ec:	b9400017 	ldw	r5,0(r23)
   834f0:	d9000017 	ldw	r4,0(sp)
   834f4:	403ee83a 	callr	r8
   834f8:	00000206 	br	83504 <__call_exitprocs+0x104>
   834fc:	b9000017 	ldw	r4,0(r23)
   83500:	403ee83a 	callr	r8
   83504:	99000117 	ldw	r4,4(r19)
   83508:	e13fcc1e 	bne	fp,r4,8343c <__alt_data_end+0xfffd26fc>
   8350c:	89000017 	ldw	r4,0(r17)
   83510:	993fdc26 	beq	r19,r4,83484 <__alt_data_end+0xfffd2744>
   83514:	003fc906 	br	8343c <__alt_data_end+0xfffd26fc>
   83518:	00800034 	movhi	r2,0
   8351c:	10800004 	addi	r2,r2,0
   83520:	10000f26 	beq	r2,zero,83560 <__call_exitprocs+0x160>
   83524:	99400117 	ldw	r5,4(r19)
   83528:	99000017 	ldw	r4,0(r19)
   8352c:	2800091e 	bne	r5,zero,83554 <__call_exitprocs+0x154>
   83530:	20000826 	beq	r4,zero,83554 <__call_exitprocs+0x154>
   83534:	89000015 	stw	r4,0(r17)
   83538:	a8000226 	beq	r21,zero,83544 <__call_exitprocs+0x144>
   8353c:	a809883a 	mov	r4,r21
   83540:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   83544:	9809883a 	mov	r4,r19
   83548:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8354c:	8cc00017 	ldw	r19,0(r17)
   83550:	003fbd06 	br	83448 <__alt_data_end+0xfffd2708>
   83554:	9823883a 	mov	r17,r19
   83558:	2027883a 	mov	r19,r4
   8355c:	003fba06 	br	83448 <__alt_data_end+0xfffd2708>
   83560:	dfc00a17 	ldw	ra,40(sp)
   83564:	df000917 	ldw	fp,36(sp)
   83568:	ddc00817 	ldw	r23,32(sp)
   8356c:	dd800717 	ldw	r22,28(sp)
   83570:	dd400617 	ldw	r21,24(sp)
   83574:	dd000517 	ldw	r20,20(sp)
   83578:	dcc00417 	ldw	r19,16(sp)
   8357c:	dc800317 	ldw	r18,12(sp)
   83580:	dc400217 	ldw	r17,8(sp)
   83584:	dc000117 	ldw	r16,4(sp)
   83588:	dec00b04 	addi	sp,sp,44
   8358c:	f800283a 	ret

00083590 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   83590:	defffd04 	addi	sp,sp,-12
   83594:	df000215 	stw	fp,8(sp)
   83598:	df000204 	addi	fp,sp,8
   8359c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   835a0:	0001883a 	nop
   835a4:	e0bfff17 	ldw	r2,-4(fp)
   835a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   835ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   835b0:	10000226 	beq	r2,zero,835bc <_exit+0x2c>
    ALT_SIM_FAIL();
   835b4:	002af070 	cmpltui	zero,zero,43969
   835b8:	00000106 	br	835c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   835bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   835c0:	003fff06 	br	835c0 <__alt_data_end+0xfffd2880>

000835c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   835c4:	defffe04 	addi	sp,sp,-8
   835c8:	dfc00115 	stw	ra,4(sp)
   835cc:	df000015 	stw	fp,0(sp)
   835d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   835d4:	00800234 	movhi	r2,8
   835d8:	1092f504 	addi	r2,r2,19412
   835dc:	10800017 	ldw	r2,0(r2)
   835e0:	10000526 	beq	r2,zero,835f8 <alt_get_errno+0x34>
   835e4:	00800234 	movhi	r2,8
   835e8:	1092f504 	addi	r2,r2,19412
   835ec:	10800017 	ldw	r2,0(r2)
   835f0:	103ee83a 	callr	r2
   835f4:	00000206 	br	83600 <alt_get_errno+0x3c>
   835f8:	00800234 	movhi	r2,8
   835fc:	1097f904 	addi	r2,r2,24548
}
   83600:	e037883a 	mov	sp,fp
   83604:	dfc00117 	ldw	ra,4(sp)
   83608:	df000017 	ldw	fp,0(sp)
   8360c:	dec00204 	addi	sp,sp,8
   83610:	f800283a 	ret

00083614 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83614:	defff904 	addi	sp,sp,-28
   83618:	dfc00615 	stw	ra,24(sp)
   8361c:	df000515 	stw	fp,20(sp)
   83620:	df000504 	addi	fp,sp,20
   83624:	e13ffd15 	stw	r4,-12(fp)
   83628:	e17ffe15 	stw	r5,-8(fp)
   8362c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83630:	e0bffd17 	ldw	r2,-12(fp)
   83634:	10000616 	blt	r2,zero,83650 <write+0x3c>
   83638:	e0bffd17 	ldw	r2,-12(fp)
   8363c:	10c00324 	muli	r3,r2,12
   83640:	00800234 	movhi	r2,8
   83644:	10928e04 	addi	r2,r2,19000
   83648:	1885883a 	add	r2,r3,r2
   8364c:	00000106 	br	83654 <write+0x40>
   83650:	0005883a 	mov	r2,zero
   83654:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83658:	e0bffb17 	ldw	r2,-20(fp)
   8365c:	10002126 	beq	r2,zero,836e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83660:	e0bffb17 	ldw	r2,-20(fp)
   83664:	10800217 	ldw	r2,8(r2)
   83668:	108000cc 	andi	r2,r2,3
   8366c:	10001826 	beq	r2,zero,836d0 <write+0xbc>
   83670:	e0bffb17 	ldw	r2,-20(fp)
   83674:	10800017 	ldw	r2,0(r2)
   83678:	10800617 	ldw	r2,24(r2)
   8367c:	10001426 	beq	r2,zero,836d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83680:	e0bffb17 	ldw	r2,-20(fp)
   83684:	10800017 	ldw	r2,0(r2)
   83688:	10800617 	ldw	r2,24(r2)
   8368c:	e0ffff17 	ldw	r3,-4(fp)
   83690:	180d883a 	mov	r6,r3
   83694:	e17ffe17 	ldw	r5,-8(fp)
   83698:	e13ffb17 	ldw	r4,-20(fp)
   8369c:	103ee83a 	callr	r2
   836a0:	e0bffc15 	stw	r2,-16(fp)
   836a4:	e0bffc17 	ldw	r2,-16(fp)
   836a8:	1000070e 	bge	r2,zero,836c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   836ac:	00835c40 	call	835c4 <alt_get_errno>
   836b0:	1007883a 	mov	r3,r2
   836b4:	e0bffc17 	ldw	r2,-16(fp)
   836b8:	0085c83a 	sub	r2,zero,r2
   836bc:	18800015 	stw	r2,0(r3)
        return -1;
   836c0:	00bfffc4 	movi	r2,-1
   836c4:	00000c06 	br	836f8 <write+0xe4>
      }
      return rval;
   836c8:	e0bffc17 	ldw	r2,-16(fp)
   836cc:	00000a06 	br	836f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   836d0:	00835c40 	call	835c4 <alt_get_errno>
   836d4:	1007883a 	mov	r3,r2
   836d8:	00800344 	movi	r2,13
   836dc:	18800015 	stw	r2,0(r3)
   836e0:	00000406 	br	836f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   836e4:	00835c40 	call	835c4 <alt_get_errno>
   836e8:	1007883a 	mov	r3,r2
   836ec:	00801444 	movi	r2,81
   836f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   836f4:	00bfffc4 	movi	r2,-1
}
   836f8:	e037883a 	mov	sp,fp
   836fc:	dfc00117 	ldw	ra,4(sp)
   83700:	df000017 	ldw	fp,0(sp)
   83704:	dec00204 	addi	sp,sp,8
   83708:	f800283a 	ret
