
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module frequency_meter_Nios_display(

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO,
	
	////////  LVDS  ///////
	input 							lvds_freq
	
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire cout_i, cout_b, clk_base, clk_in;
reg freq_en = 0, count_en = 0, led_out = 0;
reg [7:0] count_clk;
wire [31:0] freq_mem; //регистр-хранилище для данных об измеряемой частоте

logic freq_base, time_del;

assign clk_in = lvds_freq;

//=======================================================
//  Structural coding
//=======================================================

Nios_display_system u0 (
	  .clk_clk       (FPGA_CLK1_50),       //   clk.clk
	  .reset_reset_n (KEY[0]), // reset.reset_n
	  .key_export    (KEY[1]),    //   key.export
	  .led_export    (LED),     //   led.export
	  .lcd_data_export (GPIO[20:13]), //  lcd_data.export
	  .lcd_e_export    (GPIO[12]),    //     lcd_e.export
	  .lcd_rs_export   (GPIO[10]),   //    lcd_rs.export
	  .lcd_rw_export   (GPIO[11]),   //    lcd_rw.export
	  .sw_export       (SW),        //        sw.export
	  .freq_export		 (freq_mem),     	//     freq.export
	  .freq_en_export  (freq_en),  //   freq_en.export
	  .freq_base_export(freq_base),
	  .time_del_export(time_del)

 );
 
 PLL_base pll_base
 (
	
	.refclk(FPGA_CLK1_50),
	.rst(~KEY[0]),
	.outclk_0(clk_base),
	//.outclk_1(clk_in)
	
 );
 
 freq_m_module freq_meter
(
	
	.clk_base(clk_base),
	.clk_in(clk_in),
	.freq_base(freq_base),
	.time_del(time_del),
	.freq_mem(freq_mem),
	.cout_i(cout_i),
	.cout_b(cout_b)
	
);

always @(posedge clk_base)
begin
	
	if (cout_b == 1'b1)
	begin
		
		freq_en = 1'b1;
		count_en = 1'b1;
		
	end
	
	if (count_en == 1'b1) count_clk = count_clk + 1'b1;
	
	if (count_clk == 8'd1000)
	begin
		
		freq_en = 1'b0;
		count_en = 1'b0;
		count_clk = 8'b0;
		
	end
	
end

endmodule
